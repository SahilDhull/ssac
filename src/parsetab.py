
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftIDENTIFIERrightEQUALSNOTleftINT_LITleftFLOAT_LITleftSTRING_LITleftCOMPARE_ORleftCOMPARE_ANDleftEQEQNOTEQUALSleftORleftXORleftANDANDXORleftLESSTHANGREATERTHANLESSTHAN_EQUALGREATERTHAN_EQUALleftPLUSMINUSleftLSHIFTRSHIFTleftMULTIPLYDIVIDEMODULOleftLPARENRPARENAND ANDEQUAL ANDXOR ANDXOR_EQUAL BOOL BREAK CASE COLON COMMA COMPARE_AND COMPARE_OR CONST CONTINUE DECREMENT DEFAULT DEFER DIVIDE DIVIDE_EQUAL DOT ELSE EQEQ EQUALS FALLTHROUGH FLOAT FLOAT_LIT FOR FUNC GO GOTO GREATERTHAN GREATERTHAN_EQUAL IDENTIFIER IF IMAGINARY_LIT IMPORT INCREMENT INT INT_LIT LCURL LESSTHAN LESSTHAN_EQUAL LPAREN LSHIFT LSHIFT_EQUAL LSQUARE MAP MINUS MINUSEQUAL MODEQUAL MODULO MULTIPLY NOT NOTEQUALS OR OREQUAL PACKAGE PD PLUS PLUSEQUAL PRINT PS RCURL RETURN RPAREN RSHIFT RSHIFT_EQUAL RSQUARE SCAN SEMICOLON SHORT_ASSIGNMENT STRING STRING_LIT STRUCT SWITCH TIMESEQUAL TYPE TYPECAST VAR XOR XOREQUALstart : SourceFileType : TypeName\n            | TypeLitTypeName : TypeToken\n                | QualifiedIdentTypeToken : INT\n                 | FLOAT\n                 | BOOL\n                 | STRING\n                 | TYPE IDENTIFIERTypeLit : ArrayType\n               | ST StructType\n               | PointerType\n               | MapType\n               | SliceTypeST : SliceType : LSQUARE RSQUARE ElementTypeMapType : MAP LSQUARE KeyType RSQUARE ElementType KeyType : TypeArrayType : LSQUARE ArrayLength RSQUARE ElementType ArrayLength : Expression  ElementType : Type StructType : FuncScope STRUCT LCURL FieldDeclRep RCURL EndScopeFuncScope :  FieldDeclRep : FieldDeclRep FieldDecl SEMICOLON\n                  | epsilon  FieldDecl : IdentifierList TypePointerType : MULTIPLY BaseTypeBaseType : TypeSignature : Parameters ResultOptResultOpt : Result\n                 | epsilonResult : Parameters\n              | TypeParameters : LPAREN ParametersList RPAREN\n                  | LPAREN RPARENParametersList : ParameterDecl\n                      | ParametersList COMMA ParameterDeclParameterDecl : IdentifierList Type\n                     | TypeBlock : LCURL StatementList RCURLStatementList : StatementRepStatementRep : StatementRep Statement SEMICOLON\n                    | epsilonDeclaration : ConstDecl\n                 | TypeDecl\n                 | VarDeclTopLevelDecl : Declaration\n                  | FunctionDeclConstDecl : CONST ConstSpec\n                 | CONST LPAREN ConstSpecRep RPARENConstSpecRep : ConstSpecRep ConstSpec SEMICOLON\n                    | epsilonConstSpec : IdentifierList TypeExprListOptTypeExprListOpt : Type EQUALS ExpressionListIdentifierList : IDENTIFIER \n                      | IdentifierRepIdentifierRep : IdentifierRep COMMA IDENTIFIER\n                     | IDENTIFIER COMMA IDENTIFIERExpressionList : Expression ExpressionRepExpressionRep : ExpressionRep COMMA Expression\n                     | epsilonTypeDecl : TYPE TypeSpec\n                | TYPE LPAREN TypeSpecRep RPARENTypeSpecRep : TypeSpecRep TypeSpec SEMICOLON\n                   | epsilonTypeSpec : AliasDecl\n                | TypeDefAliasDecl : IDENTIFIER EQUALS TypeTypeDef : IDENTIFIER TypeVarDecl : VAR VarSpec\n               | VAR LPAREN VarSpecRep RPARENVarSpecRep : VarSpecRep VarSpec SEMICOLON\n                  | epsilonVarSpec : IdentifierList Type ExpressionListOptExpressionListOpt : EQUALS ExpressionList\n                         | epsilon ShortVarDecl : IDENTIFIER SHORT_ASSIGNMENT Expression FunctionDecl : FUNC FunctionName CreateScope Function EndScope\n                  | FUNC FunctionName CreateScope Signature EndScopeCreateScope : EndScope : FunctionName : IDENTIFIERFunction : Signature RetTypeSet FunctionBodyRetTypeSet : FunctionBody : BlockOperand : Literal\n               | OperandName\n               | LPAREN Expression RPARENLiteral : BasicLitBasicLit : I INT_LIT\n              | F FLOAT_LIT\n              | C IMAGINARY_LIT\n              | S STRING_LITI : F : C : S : OperandName : IDENTIFIERQualifiedIdent : IDENTIFIER DOT TypeNamePrimaryExpr : Operand\n                 | PrimaryExpr DOT IDENTIFIER\n                 | Conversion\n                 | PrimaryExpr LSQUARE Expression RSQUARE\n                 | PrimaryExpr Slice\n                 | PrimaryExpr TypeAssertion\n                 | PrimaryExpr LPAREN ExpressionListTypeOpt RPARENSlice : LSQUARE ExpressionOpt COLON ExpressionOpt RSQUARE\n             | LSQUARE ExpressionOpt COLON Expression COLON Expression RSQUARETypeAssertion : DOT LPAREN Type RPARENExpressionListTypeOpt : ExpressionList\n                             | epsilonExpression : UnaryExpr\n                  | Expression COMPARE_OR Expression\n                  | Expression COMPARE_AND Expression\n                  | Expression EQEQ Expression\n                  | Expression NOTEQUALS Expression\n                  | Expression LESSTHAN Expression\n                  | Expression GREATERTHAN Expression\n                  | Expression LESSTHAN_EQUAL Expression\n                  | Expression GREATERTHAN_EQUAL Expression\n                  | Expression OR Expression\n                  | Expression XOR Expression\n                  | Expression ANDXOR Expression\n                  | Expression DIVIDE Expression\n                  | Expression MODULO Expression\n                  | Expression LSHIFT Expression\n                  | Expression RSHIFT Expression\n                  | Expression PLUS Expression\n                  | Expression MINUS Expression\n                  | Expression MULTIPLY Expression\n                  | Expression AND ExpressionExpressionOpt : Expression\n                     | epsilonUnaryExpr : PrimaryExpr\n                 | UnaryOp UnaryExpr\n                 | NOT UnaryExprUnaryOp : PLUS\n               | MINUS\n               | MULTIPLY\n               | AND Conversion : TYPECAST Type LPAREN Expression RPARENStatement : Declaration\n               | LabeledStmt\n               | SimpleStmt\n               | ReturnStmt\n               | BreakStmt\n               | ContinueStmt\n               | GotoStmt\n               | CreateScope Block EndScope\n               | IfStmt\n               | SwitchStmt\n               | ForStmt\n               | DeferStmt\n               | FallThroughStmt\n               | GoStmt\n               | PrintStmt\n               | ScanStmtPrintStmt : PRINT PD Expression\n               | PRINT PS ExpressionScanStmt : SCAN ExpressionFallThroughStmt : FALLTHROUGHGoStmt : GO ExpressionDeferStmt : DEFER Expression SimpleStmt : epsilon\n                 | ExpressionStmt\n                 | IncDecStmt\n                 | Assignment\n                 | ShortVarDecl  LabeledStmt : Label COLON Statement  Label : IDENTIFIER  ExpressionStmt : Expression  IncDecStmt : Expression INCREMENT\n                 | Expression DECREMENT  Assignment : ExpressionList assign_op ExpressionList assign_op : AssignOp AssignOp : PLUSEQUAL\n               | MINUSEQUAL\n               | TIMESEQUAL\n               | DIVIDE_EQUAL\n               | MODEQUAL\n               | ANDEQUAL\n               | OREQUAL\n               | XOREQUAL\n               | ANDXOR_EQUAL\n               | LSHIFT_EQUAL\n               | RSHIFT_EQUAL\n               | EQUALS  IfStmt : IF Expression CreateScope IFSYM Block EndScope ElseOpt IFSYM :  ElseOpt : ELSE IfStmt\n              | ELSE CreateScope Block EndScope\n              | epsilon  SwitchStmt : ExprSwitchStmtExprSwitchStmt : SWITCH Expression CreateScope LCURL StartSwitch ExprCaseClauseList RCURL EndScopeStartSwitch : ExprCaseClauseList : epsilon\n                 | ExprCaseClauseList ExprCaseClause\n    ExprCaseClause : ExprSwitchCase COLON StatementList ExprSwitchCase : CASE ExpressionList\n                 | DEFAULT \n    ForStmt : FOR CreateScope ConditionBlockOpt Block EndScopeConditionBlockOpt : epsilon\n             | Condition\n             | ForClauseCondition : Expression ForClause : SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmtConditionOpt : epsilon\n          | Condition ReturnStmt : RETURN ExpressionListPureOptExpressionListPureOpt : ExpressionList\n             | epsilonBreakStmt : BREAK LabelOptContinueStmt : CONTINUE LabelOptLabelOpt : Label\n        | epsilon GotoStmt : GOTO Label SourceFile : PackageClause SEMICOLON ImportDeclRep TopLevelDeclRepImportDeclRep : epsilon\n           | ImportDeclRep ImportDecl SEMICOLONTopLevelDeclRep : TopLevelDeclRep TopLevelDecl SEMICOLON\n                     | epsilonPackageClause : PACKAGE PackageNamePackageName : IDENTIFIERImportDecl : IMPORT ImportSpec\n          | IMPORT LPAREN ImportSpecRep RPAREN  ImportSpecRep : ImportSpecRep ImportSpec SEMICOLON\n            | epsilon  ImportSpec : PackageNameDotOpt ImportPath  PackageNameDotOpt : DOT\n                        | PackageName\n                        | epsilon ImportPath : STRING_LIT epsilon : '
    
_lr_action_items = {'FUNC':([5,8,9,10,11,24,36,],[-234,-219,-234,20,-222,-220,-221,]),'ANDXOR':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,149,151,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,237,245,247,248,249,280,283,293,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-113,-135,-87,152,-101,152,-136,-137,-93,-92,-91,-105,-106,-94,152,152,-102,-89,-124,152,-125,-132,152,152,-128,-130,152,-120,-129,-131,-118,-119,-127,152,-126,152,-121,-107,-104,152,152,152,-110,-142,-99,152,-108,152,152,152,152,152,152,152,152,152,-99,152,-109,152,]),'DIVIDE':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,149,151,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,237,245,247,248,249,280,283,293,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-113,-135,-87,154,-101,154,-136,-137,-93,-92,-91,-105,-106,-94,154,154,-102,-89,154,154,-125,154,154,154,154,154,154,154,154,-131,154,154,154,154,-126,154,154,-107,-104,154,154,154,-110,-142,-99,154,-108,154,154,154,154,154,154,154,154,154,-99,154,-109,154,]),'CONST':([5,8,9,10,11,24,36,228,241,242,299,306,377,],[-234,-219,-234,14,-222,-220,-221,-234,14,-44,-43,14,-234,]),'LPAREN':([13,14,21,23,37,38,54,56,57,59,61,62,63,64,66,67,70,71,73,75,88,89,90,92,93,94,95,97,98,99,100,101,106,109,110,112,114,116,118,121,126,136,138,139,141,142,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,185,201,202,203,223,228,231,232,233,234,235,238,241,242,248,249,251,254,260,266,273,278,280,285,290,293,294,296,299,306,307,308,309,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,345,351,352,363,368,377,],[25,33,40,44,-83,-81,-11,-3,-4,-2,-15,-9,-14,109,-6,-7,-8,-13,-5,123,-29,-28,109,-103,109,-140,-139,-88,-90,109,-138,-99,145,109,-87,-141,-101,-12,-10,123,109,-100,-22,-17,-93,-92,-91,-105,109,-106,109,200,-94,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,223,-36,-102,-20,-89,109,-234,-35,109,-107,109,-104,-18,109,-44,-110,-142,-82,109,109,109,-81,109,-99,109,109,-108,109,-23,-43,109,109,109,109,109,-186,-176,-187,-178,-181,-184,-188,-177,-185,109,-182,-183,-179,-180,-99,-109,109,109,109,-234,]),'NOTEQUALS':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,149,151,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,237,245,247,248,249,280,283,293,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-113,-135,-87,153,-101,153,-136,-137,-93,-92,-91,-105,-106,-94,153,153,-102,-89,-124,-117,-125,-132,-123,153,-128,-130,-116,-120,-129,-131,-118,-119,-127,153,-126,-122,-121,-107,-104,153,153,153,-110,-142,-99,153,-108,153,153,153,153,153,153,153,153,153,-99,153,-109,153,]),'EQEQ':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,149,151,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,237,245,247,248,249,280,283,293,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-113,-135,-87,160,-101,160,-136,-137,-93,-92,-91,-105,-106,-94,160,160,-102,-89,-124,-117,-125,-132,-123,160,-128,-130,-116,-120,-129,-131,-118,-119,-127,160,-126,-122,-121,-107,-104,160,160,160,-110,-142,-99,160,-108,160,160,160,160,160,160,160,160,160,-99,160,-109,160,]),'GOTO':([228,241,242,299,306,377,],[-234,263,-44,-43,263,-234,]),'XOREQUAL':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,149,192,193,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,245,248,249,280,282,283,293,344,345,351,],[-103,-88,-90,-99,-113,-135,-87,-101,-136,-137,-93,-92,-91,-105,-106,-94,-60,-62,-102,-89,-124,-117,-125,-132,-123,-114,-128,-130,-116,-120,-129,-131,-118,-119,-127,-115,-126,-122,-121,-107,-104,-61,-110,-142,-99,320,-234,-108,-234,-99,-109,]),'PRINT':([228,241,242,299,306,377,],[-234,269,-44,-43,269,-234,]),'LESSTHAN':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,149,151,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,237,245,247,248,249,280,283,293,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-113,-135,-87,164,-101,164,-136,-137,-93,-92,-91,-105,-106,-94,164,164,-102,-89,164,164,-125,164,164,164,-128,-130,164,-120,-129,-131,-118,-119,-127,164,-126,164,-121,-107,-104,164,164,164,-110,-142,-99,164,-108,164,164,164,164,164,164,164,164,164,-99,164,-109,164,]),'COLON':([92,97,98,101,105,106,110,114,135,137,140,141,142,143,144,146,147,149,192,193,197,198,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,245,247,248,249,267,280,293,351,369,370,376,],[-103,-88,-90,-99,-113,-135,-87,-101,-234,-136,-137,-93,-92,-91,-105,-106,-234,-94,-60,-62,234,-134,-133,-102,-89,-124,-117,-125,-132,-123,-114,-128,-130,-116,-120,-129,-131,-118,-119,-127,-115,-126,-122,-121,-107,-104,-61,294,-110,-142,306,-171,-108,-109,377,-201,-200,]),'GREATERTHAN_EQUAL':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,149,151,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,237,245,247,248,249,280,283,293,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-113,-135,-87,170,-101,170,-136,-137,-93,-92,-91,-105,-106,-94,170,170,-102,-89,170,170,-125,170,170,170,-128,-130,170,-120,-129,-131,-118,-119,-127,170,-126,170,-121,-107,-104,170,170,170,-110,-142,-99,170,-108,170,170,170,170,170,170,170,170,170,-99,170,-109,170,]),'LSHIFT':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,149,151,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,237,245,247,248,249,280,283,293,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-113,-135,-87,166,-101,166,-136,-137,-93,-92,-91,-105,-106,-94,166,166,-102,-89,166,166,-125,166,166,166,-128,166,166,166,166,-131,166,166,-127,166,-126,166,166,-107,-104,166,166,166,-110,-142,-99,166,-108,166,166,166,166,166,166,166,166,166,-99,166,-109,166,]),'MULTIPLY':([32,34,35,41,46,55,64,82,85,90,92,93,94,95,96,97,98,99,100,101,105,106,109,110,111,112,113,114,115,119,121,123,126,135,137,140,141,142,143,144,145,146,147,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,183,185,187,199,200,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,228,230,231,232,233,234,235,237,241,242,245,247,248,249,252,254,260,266,273,278,280,283,285,290,293,294,298,299,300,306,307,308,309,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,332,334,335,337,338,344,345,347,351,352,359,363,368,377,],[-57,55,-56,55,55,55,94,55,-58,94,-103,94,-140,-139,55,-88,-90,94,-138,-99,-113,-135,94,-87,163,-141,55,-101,55,-59,55,55,94,163,-136,-137,-93,-92,-91,-105,94,-106,94,-94,55,163,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,55,-36,-56,163,55,-102,-89,163,163,-125,163,163,163,163,163,163,163,163,-131,163,163,163,163,-126,163,163,94,55,-234,55,-35,94,-107,94,-104,163,94,-44,163,163,-110,-142,55,94,94,94,-81,94,-99,163,94,94,-108,94,163,-43,163,94,94,94,94,163,94,-186,-176,-187,-178,-181,-184,-188,-177,-185,94,-182,-183,-179,-180,163,163,163,163,163,163,-99,163,-109,94,163,94,94,-234,]),'RSHIFT':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,149,151,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,237,245,247,248,249,280,283,293,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-113,-135,-87,158,-101,158,-136,-137,-93,-92,-91,-105,-106,-94,158,158,-102,-89,158,158,-125,158,158,158,-128,158,158,158,158,-131,158,158,-127,158,-126,158,158,-107,-104,158,158,158,-110,-142,-99,158,-108,158,158,158,158,158,158,158,158,158,-99,158,-109,158,]),'MINUS':([64,90,92,93,94,95,97,98,99,100,101,105,106,109,110,111,112,114,126,135,137,140,141,142,143,144,145,146,147,149,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,228,232,233,234,235,237,241,242,245,247,248,249,254,260,266,273,278,280,283,285,290,293,294,298,299,300,306,307,308,309,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,332,334,335,337,338,344,345,347,351,352,359,363,368,377,],[95,95,-103,95,-140,-139,-88,-90,95,-138,-99,-113,-135,95,-87,159,-141,-101,95,159,-136,-137,-93,-92,-91,-105,95,-106,95,-94,159,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,159,-102,-89,159,159,-125,159,159,159,-128,-130,159,159,-129,-131,159,159,-127,159,-126,159,159,95,-234,95,-107,95,-104,159,95,-44,159,159,-110,-142,95,95,95,-81,95,-99,159,95,95,-108,95,159,-43,159,95,95,95,95,159,95,-186,-176,-187,-178,-181,-184,-188,-177,-185,95,-182,-183,-179,-180,159,159,159,159,159,159,-99,159,-109,95,159,95,95,-234,]),'DOT':([13,25,47,48,60,92,97,98,101,106,110,114,132,141,142,143,144,146,149,187,201,203,233,235,248,249,280,293,345,351,],[30,-234,-228,30,91,-103,-88,-90,-99,148,-87,-101,-227,-93,-92,-91,-105,-106,-94,91,-102,-89,-107,-104,-110,-142,-99,-108,-99,-109,]),'LCURL':([54,56,57,59,61,62,63,66,67,70,71,73,88,89,92,97,98,101,105,106,110,114,116,118,121,122,135,136,137,138,139,140,141,142,143,144,146,149,174,176,177,178,179,180,182,185,192,193,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,228,231,233,235,238,241,242,245,248,249,251,255,262,273,277,281,283,288,289,293,296,299,306,309,313,329,330,334,340,341,342,343,344,345,346,347,348,350,351,355,363,367,374,377,379,],[-11,-3,-4,-2,-15,-9,-14,-6,-7,-8,-13,-5,-29,-28,-103,-88,-90,-99,-113,-135,-87,-101,-12,-10,-234,-85,-234,-100,-136,-22,-17,-137,-93,-92,-91,-105,-106,-94,225,-33,-34,-30,-32,-31,228,-36,-60,-62,-102,-20,-89,-124,-117,-125,-132,-123,-114,-128,-130,-116,-120,-129,-131,-118,-119,-127,-115,-126,-122,-121,-234,-35,-107,-104,-18,-81,-44,-61,-110,-142,-82,-166,-167,-81,-168,-165,-172,228,-169,-108,-23,-43,-81,-234,-81,-173,-174,-81,-204,-203,228,-205,-206,-99,354,-78,-175,-190,-109,228,-234,-207,-81,-234,228,]),'RSQUARE':([54,56,57,59,61,62,63,64,66,67,70,71,73,88,89,92,97,98,101,105,106,108,110,111,114,116,118,136,137,138,139,140,141,142,143,144,146,149,172,173,198,199,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,234,235,238,246,247,248,249,251,293,296,335,351,],[-11,-3,-4,-2,-15,-9,-14,96,-6,-7,-8,-13,-5,-29,-28,-103,-88,-90,-99,-113,-135,150,-87,-21,-101,-12,-10,-100,-136,-22,-17,-137,-93,-92,-91,-105,-106,-94,-19,224,-134,235,-102,-20,-89,-124,-117,-125,-132,-123,-114,-128,-130,-116,-120,-129,-131,-118,-119,-127,-115,-126,-122,-121,-107,-234,-104,-18,293,-133,-110,-142,-82,-108,-23,351,-109,]),'COMPARE_OR':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,149,151,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,237,245,247,248,249,280,283,293,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-113,-135,-87,157,-101,157,-136,-137,-93,-92,-91,-105,-106,-94,157,157,-102,-89,-124,-117,-125,-132,-123,-114,-128,-130,-116,-120,-129,-131,-118,-119,-127,-115,-126,-122,-121,-107,-104,157,157,157,-110,-142,-99,157,-108,157,157,157,157,157,157,157,157,157,-99,157,-109,157,]),'RPAREN':([25,33,40,44,47,48,52,53,54,56,57,59,61,62,63,66,67,70,71,73,76,77,79,80,88,89,92,97,98,101,105,106,110,114,116,118,123,132,133,135,136,137,138,139,140,141,142,143,144,145,146,149,151,184,186,188,189,191,192,193,194,195,196,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,229,233,235,236,237,238,244,245,248,249,251,293,296,351,],[-234,-234,-234,-234,-228,83,87,-53,-11,-3,-4,-2,-15,-9,-14,-6,-7,-8,-13,-5,124,-74,129,-66,-29,-28,-103,-88,-90,-99,-113,-135,-87,-101,-12,-10,185,-227,-52,-234,-100,-136,-22,-17,-137,-93,-92,-91,-105,-234,-106,-94,203,-40,231,-37,-73,-65,-60,-62,-112,233,-111,-102,-20,-89,-124,-117,-125,-132,-123,-114,-128,-130,-116,-120,-129,-131,-118,-119,-127,-115,-126,-122,-121,-39,-107,-104,248,249,-18,-38,-61,-110,-142,-82,-108,-23,-109,]),'DEFER':([228,241,242,299,306,377,],[-234,260,-44,-43,260,-234,]),'SEMICOLON':([1,6,7,12,15,16,17,18,19,22,26,31,39,42,43,45,49,50,54,56,57,59,61,62,63,66,67,69,70,71,73,78,81,83,84,86,87,88,89,92,97,98,101,105,106,110,114,116,118,120,121,122,124,125,127,128,129,130,131,134,135,136,137,138,139,140,141,142,143,144,146,149,175,176,177,178,179,180,181,185,190,192,193,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,226,227,228,231,233,235,238,241,242,245,248,249,250,251,253,255,256,257,258,259,261,262,264,265,266,268,270,271,272,273,274,275,276,277,279,280,281,283,284,286,287,289,291,292,293,296,297,298,299,300,301,302,303,304,305,306,309,310,311,312,329,330,331,332,333,336,337,338,339,341,344,345,347,348,349,351,352,353,356,357,358,359,360,362,366,371,373,375,377,378,380,382,383,],[5,-223,-224,24,-49,36,-48,-45,-46,-47,-225,-50,-71,-68,-67,-63,-229,-233,-11,-3,-4,-2,-15,-9,-14,-6,-7,-54,-8,-13,-5,-234,-70,-226,132,133,-51,-29,-28,-103,-88,-90,-99,-113,-135,-87,-101,-12,-10,-82,-234,-82,-72,189,-77,-75,-64,191,-69,-55,-234,-100,-136,-22,-17,-137,-93,-92,-91,-105,-106,-94,-79,-33,-34,-30,-32,-31,-80,-36,-76,-60,-62,-102,-20,-89,-124,-117,-125,-132,-123,-114,-128,-130,-116,-120,-129,-131,-118,-119,-127,-115,-126,-122,-121,-84,-86,-234,-35,-107,-104,-18,-234,-44,-61,-110,-142,295,-82,-148,-166,-158,299,-151,-155,-162,-167,-144,-157,-234,-194,-156,-154,-149,-81,-146,-152,-234,-168,-143,-99,-165,-172,-234,-145,-153,-169,-147,-41,-108,-23,-27,-163,-43,-164,-171,-217,-210,-212,-211,-234,-234,-216,-214,-215,-173,-174,-213,-161,-82,-170,-160,-159,352,-165,-172,-99,-78,-175,-150,-109,-234,-82,-209,-208,363,-206,-202,-82,-234,-82,-193,-189,-234,-195,-191,-82,-192,]),'IF':([228,241,242,299,306,374,377,],[-234,290,-44,-43,290,290,-234,]),'FALLTHROUGH':([228,241,242,299,306,377,],[-234,261,-44,-43,261,-234,]),'RSHIFT_EQUAL':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,149,192,193,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,245,248,249,280,282,283,293,344,345,351,],[-103,-88,-90,-99,-113,-135,-87,-101,-136,-137,-93,-92,-91,-105,-106,-94,-60,-62,-102,-89,-124,-117,-125,-132,-123,-114,-128,-130,-116,-120,-129,-131,-118,-119,-127,-115,-126,-122,-121,-107,-104,-61,-110,-142,-99,317,-234,-108,-234,-99,-109,]),'MODEQUAL':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,149,192,193,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,245,248,249,280,282,283,293,344,345,351,],[-103,-88,-90,-99,-113,-135,-87,-101,-136,-137,-93,-92,-91,-105,-106,-94,-60,-62,-102,-89,-124,-117,-125,-132,-123,-114,-128,-130,-116,-120,-129,-131,-118,-119,-127,-115,-126,-122,-121,-107,-104,-61,-110,-142,-99,319,-234,-108,-234,-99,-109,]),'RCURL':([225,228,239,240,241,242,243,295,299,354,361,364,365,372,377,381,],[-234,-234,251,-26,-42,-44,292,-25,-43,-196,-234,-197,371,-198,-234,-199,]),'PLUS':([64,90,92,93,94,95,97,98,99,100,101,105,106,109,110,111,112,114,126,135,137,140,141,142,143,144,145,146,147,149,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,228,232,233,234,235,237,241,242,245,247,248,249,254,260,266,273,278,280,283,285,290,293,294,298,299,300,306,307,308,309,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,332,334,335,337,338,344,345,347,351,352,359,363,368,377,],[100,100,-103,100,-140,-139,-88,-90,100,-138,-99,-113,-135,100,-87,162,-141,-101,100,162,-136,-137,-93,-92,-91,-105,100,-106,100,-94,162,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,162,-102,-89,162,162,-125,162,162,162,-128,-130,162,162,-129,-131,162,162,-127,162,-126,162,162,100,-234,100,-107,100,-104,162,100,-44,162,162,-110,-142,100,100,100,-81,100,-99,162,100,100,-108,100,162,-43,162,100,100,100,100,162,100,-186,-176,-187,-178,-181,-184,-188,-177,-185,100,-182,-183,-179,-180,162,162,162,162,162,162,-99,162,-109,100,162,100,100,-234,]),'GO':([228,241,242,299,306,377,],[-234,254,-44,-43,254,-234,]),'SWITCH':([228,241,242,299,306,377,],[-234,278,-44,-43,278,-234,]),'ANDXOR_EQUAL':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,149,192,193,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,245,248,249,280,282,283,293,344,345,351,],[-103,-88,-90,-99,-113,-135,-87,-101,-136,-137,-93,-92,-91,-105,-106,-94,-60,-62,-102,-89,-124,-117,-125,-132,-123,-114,-128,-130,-116,-120,-129,-131,-118,-119,-127,-115,-126,-122,-121,-107,-104,-61,-110,-142,-99,323,-234,-108,-234,-99,-109,]),'COMMA':([32,35,54,56,57,59,61,62,63,66,67,70,71,73,85,88,89,92,97,98,101,105,106,110,114,116,118,119,135,136,137,138,139,140,141,142,143,144,146,149,184,186,187,188,192,193,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,229,233,235,238,244,245,248,249,251,280,283,293,296,344,345,351,],[51,74,-11,-3,-4,-2,-15,-9,-14,-6,-7,-8,-13,-5,-58,-29,-28,-103,-88,-90,-99,-113,-135,-87,-101,-12,-10,-59,-234,-100,-136,-22,-17,-137,-93,-92,-91,-105,-106,-94,-40,230,74,-37,232,-62,-102,-20,-89,-124,-117,-125,-132,-123,-114,-128,-130,-116,-120,-129,-131,-118,-119,-127,-115,-126,-122,-121,-39,-107,-104,-18,-38,-61,-110,-142,-82,-99,-234,-108,-23,-234,-99,-109,]),'DIVIDE_EQUAL':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,149,192,193,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,245,248,249,280,282,283,293,344,345,351,],[-103,-88,-90,-99,-113,-135,-87,-101,-136,-137,-93,-92,-91,-105,-106,-94,-60,-62,-102,-89,-124,-117,-125,-132,-123,-114,-128,-130,-116,-120,-129,-131,-118,-119,-127,-115,-126,-122,-121,-107,-104,-61,-110,-142,-99,328,-234,-108,-234,-99,-109,]),'INCREMENT':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,149,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,248,249,280,283,293,344,345,351,],[-103,-88,-90,-99,-113,-135,-87,-101,-136,-137,-93,-92,-91,-105,-106,-94,-102,-89,-124,-117,-125,-132,-123,-114,-128,-130,-116,-120,-129,-131,-118,-119,-127,-115,-126,-122,-121,-107,-104,-110,-142,-99,329,-108,329,-99,-109,]),'IMPORT':([5,8,9,24,],[-234,-219,13,-220,]),'IDENTIFIER':([2,13,14,20,21,23,25,32,33,34,35,40,41,44,46,47,48,51,52,53,55,64,72,74,76,77,79,80,82,85,90,91,93,94,95,96,99,100,109,112,113,115,119,121,123,126,132,133,145,147,148,150,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,183,185,187,189,191,200,223,224,225,228,230,231,232,234,239,240,241,242,252,254,260,263,266,273,276,278,284,285,290,294,295,299,306,307,308,309,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,352,363,368,377,],[7,7,35,37,35,46,-234,-57,-234,60,-56,-234,60,-234,60,-228,7,85,35,-53,60,101,118,119,35,-74,46,-66,60,-58,101,60,101,-140,-139,60,101,-138,101,-141,60,60,-59,60,187,101,-227,-52,101,101,201,60,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,60,-36,-56,-73,-65,60,101,60,-234,-234,187,-35,101,101,35,-26,280,-44,60,101,101,301,101,-81,301,101,301,101,101,101,-25,-43,280,101,101,345,101,-186,-176,-187,-178,-181,-184,-188,-177,-185,101,-182,-183,-179,-180,101,345,101,-234,]),'SHORT_ASSIGNMENT':([280,345,],[314,314,]),'$end':([3,4,5,8,9,10,11,24,36,],[-1,0,-234,-219,-234,-218,-222,-220,-221,]),'IMAGINARY_LIT':([64,90,93,94,95,99,100,102,109,112,126,145,147,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,223,228,232,234,241,242,254,260,266,273,278,285,290,294,299,306,307,308,309,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,352,363,368,377,],[-97,-97,-97,-140,-139,-97,-138,141,-97,-141,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-234,-97,-97,-97,-44,-97,-97,-97,-81,-97,-97,-97,-97,-43,-97,-97,-97,-97,-97,-186,-176,-187,-178,-181,-184,-188,-177,-185,-97,-182,-183,-179,-180,-97,-97,-97,-234,]),'PD':([269,],[308,]),'MODULO':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,149,151,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,237,245,247,248,249,280,283,293,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-113,-135,-87,168,-101,168,-136,-137,-93,-92,-91,-105,-106,-94,168,168,-102,-89,168,168,-125,168,168,168,168,168,168,168,168,-131,168,168,168,168,-126,168,168,-107,-104,168,168,168,-110,-142,-99,168,-108,168,168,168,168,168,168,168,168,168,-99,168,-109,168,]),'STRING':([32,34,35,41,46,55,82,85,91,96,113,115,119,121,123,150,183,185,187,200,224,230,231,252,],[-57,62,-56,62,62,62,62,-58,62,62,62,62,-59,62,62,62,62,-36,-56,62,62,62,-35,62,]),'FOR':([228,241,242,299,306,377,],[-234,273,-44,-43,273,-234,]),'PACKAGE':([0,],[2,]),'COMPARE_AND':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,149,151,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,237,245,247,248,249,280,283,293,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-113,-135,-87,167,-101,167,-136,-137,-93,-92,-91,-105,-106,-94,167,167,-102,-89,-124,-117,-125,-132,-123,167,-128,-130,-116,-120,-129,-131,-118,-119,-127,-115,-126,-122,-121,-107,-104,167,167,167,-110,-142,-99,167,-108,167,167,167,167,167,167,167,167,167,-99,167,-109,167,]),'LSHIFT_EQUAL':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,149,192,193,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,245,248,249,280,282,283,293,344,345,351,],[-103,-88,-90,-99,-113,-135,-87,-101,-136,-137,-93,-92,-91,-105,-106,-94,-60,-62,-102,-89,-124,-117,-125,-132,-123,-114,-128,-130,-116,-120,-129,-131,-118,-119,-127,-115,-126,-122,-121,-107,-104,-61,-110,-142,-99,315,-234,-108,-234,-99,-109,]),'XOR':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,149,151,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,237,245,247,248,249,280,283,293,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-113,-135,-87,156,-101,156,-136,-137,-93,-92,-91,-105,-106,-94,156,156,-102,-89,-124,156,-125,-132,-123,156,-128,-130,156,-120,-129,-131,-118,-119,-127,156,-126,156,-121,-107,-104,156,156,156,-110,-142,-99,156,-108,156,156,156,156,156,156,156,156,156,-99,156,-109,156,]),'EQUALS':([46,54,56,57,58,59,61,62,63,66,67,70,71,73,78,88,89,92,97,98,101,105,106,110,114,116,118,136,137,138,139,140,141,142,143,144,146,149,192,193,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,238,245,248,249,251,280,282,283,293,296,344,345,351,],[82,-11,-3,-4,90,-2,-15,-9,-14,-6,-7,-8,-13,-5,126,-29,-28,-103,-88,-90,-99,-113,-135,-87,-101,-12,-10,-100,-136,-22,-17,-137,-93,-92,-91,-105,-106,-94,-60,-62,-102,-20,-89,-124,-117,-125,-132,-123,-114,-128,-130,-116,-120,-129,-131,-118,-119,-127,-115,-126,-122,-121,-107,-104,-18,-61,-110,-142,-82,-99,321,-234,-108,-23,-234,-99,-109,]),'ELSE':([292,362,366,],[-41,-82,374,]),'PLUSEQUAL':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,149,192,193,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,245,248,249,280,282,283,293,344,345,351,],[-103,-88,-90,-99,-113,-135,-87,-101,-136,-137,-93,-92,-91,-105,-106,-94,-60,-62,-102,-89,-124,-117,-125,-132,-123,-114,-128,-130,-116,-120,-129,-131,-118,-119,-127,-115,-126,-122,-121,-107,-104,-61,-110,-142,-99,322,-234,-108,-234,-99,-109,]),'GREATERTHAN':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,149,151,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,237,245,247,248,249,280,283,293,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-113,-135,-87,165,-101,165,-136,-137,-93,-92,-91,-105,-106,-94,165,165,-102,-89,165,165,-125,165,165,165,-128,-130,165,-120,-129,-131,-118,-119,-127,165,-126,165,-121,-107,-104,165,165,165,-110,-142,-99,165,-108,165,165,165,165,165,165,165,165,165,-99,165,-109,165,]),'LSQUARE':([32,34,35,41,46,55,65,82,85,92,96,97,98,101,106,110,113,114,115,119,121,123,141,142,143,144,146,149,150,183,185,187,200,201,203,224,230,231,233,235,248,249,252,280,293,345,351,],[-57,64,-56,64,64,64,115,64,-58,-103,64,-88,-90,-99,147,-87,64,-101,64,-59,64,64,-93,-92,-91,-105,-106,-94,64,64,-36,-56,64,-102,-89,64,64,-35,-107,-104,-110,-142,64,-99,-108,-99,-109,]),'VAR':([5,8,9,10,11,24,36,228,241,242,299,306,377,],[-234,-219,-234,21,-222,-220,-221,-234,21,-44,-43,21,-234,]),'OREQUAL':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,149,192,193,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,245,248,249,280,282,283,293,344,345,351,],[-103,-88,-90,-99,-113,-135,-87,-101,-136,-137,-93,-92,-91,-105,-106,-94,-60,-62,-102,-89,-124,-117,-125,-132,-123,-114,-128,-130,-116,-120,-129,-131,-118,-119,-127,-115,-126,-122,-121,-107,-104,-61,-110,-142,-99,326,-234,-108,-234,-99,-109,]),'TYPECAST':([64,90,93,94,95,99,100,109,112,126,145,147,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,223,228,232,234,241,242,254,260,266,273,278,285,290,294,299,306,307,308,309,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,352,363,368,377,],[113,113,113,-140,-139,113,-138,113,-141,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,-234,113,113,113,-44,113,113,113,-81,113,113,113,113,-43,113,113,113,113,113,-186,-176,-187,-178,-181,-184,-188,-177,-185,113,-182,-183,-179,-180,113,113,113,-234,]),'AND':([64,90,92,93,94,95,97,98,99,100,101,105,106,109,110,111,112,114,126,135,137,140,141,142,143,144,145,146,147,149,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,228,232,233,234,235,237,241,242,245,247,248,249,254,260,266,273,278,280,283,285,290,293,294,298,299,300,306,307,308,309,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,332,334,335,337,338,344,345,347,351,352,359,363,368,377,],[112,112,-103,112,-140,-139,-88,-90,112,-138,-99,-113,-135,112,-87,155,-141,-101,112,155,-136,-137,-93,-92,-91,-105,112,-106,112,-94,155,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,155,-102,-89,-124,155,-125,-132,155,155,-128,-130,155,-120,-129,-131,-118,-119,-127,155,-126,155,-121,112,-234,112,-107,112,-104,155,112,-44,155,155,-110,-142,112,112,112,-81,112,-99,155,112,112,-108,112,155,-43,155,112,112,112,112,155,112,-186,-176,-187,-178,-181,-184,-188,-177,-185,112,-182,-183,-179,-180,155,155,155,155,155,155,-99,155,-109,112,155,112,112,-234,]),'MAP':([32,34,35,41,46,55,82,85,96,113,115,119,121,123,150,183,185,187,200,224,230,231,252,],[-57,65,-56,65,65,65,65,-58,65,65,65,-59,65,65,65,65,-36,-56,65,65,65,-35,65,]),'RETURN':([228,241,242,299,306,377,],[-234,266,-44,-43,266,-234,]),'STRUCT':([32,34,35,41,46,55,68,82,85,96,113,115,117,119,121,123,150,183,185,187,200,224,230,231,252,],[-57,-16,-56,-16,-16,-16,-24,-16,-58,-16,-16,-16,174,-59,-16,-16,-16,-16,-36,-56,-16,-16,-16,-35,-16,]),'CASE':([241,242,299,354,361,364,365,372,377,381,],[-42,-44,-43,-196,-234,-197,368,-198,-234,-199,]),'LESSTHAN_EQUAL':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,149,151,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,237,245,247,248,249,280,283,293,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-113,-135,-87,161,-101,161,-136,-137,-93,-92,-91,-105,-106,-94,161,161,-102,-89,161,161,-125,161,161,161,-128,-130,161,-120,-129,-131,-118,-119,-127,161,-126,161,-121,-107,-104,161,161,161,-110,-142,-99,161,-108,161,161,161,161,161,161,161,161,161,-99,161,-109,161,]),'INT':([32,34,35,41,46,55,82,85,91,96,113,115,119,121,123,150,183,185,187,200,224,230,231,252,],[-57,66,-56,66,66,66,66,-58,66,66,66,66,-59,66,66,66,66,-36,-56,66,66,66,-35,66,]),'TIMESEQUAL':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,149,192,193,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,245,248,249,280,282,283,293,344,345,351,],[-103,-88,-90,-99,-113,-135,-87,-101,-136,-137,-93,-92,-91,-105,-106,-94,-60,-62,-102,-89,-124,-117,-125,-132,-123,-114,-128,-130,-116,-120,-129,-131,-118,-119,-127,-115,-126,-122,-121,-107,-104,-61,-110,-142,-99,327,-234,-108,-234,-99,-109,]),'MINUSEQUAL':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,149,192,193,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,245,248,249,280,282,283,293,344,345,351,],[-103,-88,-90,-99,-113,-135,-87,-101,-136,-137,-93,-92,-91,-105,-106,-94,-60,-62,-102,-89,-124,-117,-125,-132,-123,-114,-128,-130,-116,-120,-129,-131,-118,-119,-127,-115,-126,-122,-121,-107,-104,-61,-110,-142,-99,318,-234,-108,-234,-99,-109,]),'FLOAT':([32,34,35,41,46,55,82,85,91,96,113,115,119,121,123,150,183,185,187,200,224,230,231,252,],[-57,67,-56,67,67,67,67,-58,67,67,67,67,-59,67,67,67,67,-36,-56,67,67,67,-35,67,]),'FLOAT_LIT':([64,90,93,94,95,99,100,103,109,112,126,145,147,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,223,228,232,234,241,242,254,260,266,273,278,285,290,294,299,306,307,308,309,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,352,363,368,377,],[-96,-96,-96,-140,-139,-96,-138,142,-96,-141,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-234,-96,-96,-96,-44,-96,-96,-96,-81,-96,-96,-96,-96,-43,-96,-96,-96,-96,-96,-186,-176,-187,-178,-181,-184,-188,-177,-185,-96,-182,-183,-179,-180,-96,-96,-96,-234,]),'DEFAULT':([241,242,299,354,361,364,365,372,377,381,],[-42,-44,-43,-196,-234,-197,370,-198,-234,-199,]),'BREAK':([228,241,242,299,306,377,],[-234,284,-44,-43,284,-234,]),'INT_LIT':([64,90,93,94,95,99,100,104,109,112,126,145,147,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,223,228,232,234,241,242,254,260,266,273,278,285,290,294,299,306,307,308,309,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,352,363,368,377,],[-95,-95,-95,-140,-139,-95,-138,143,-95,-141,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-234,-95,-95,-95,-44,-95,-95,-95,-81,-95,-95,-95,-95,-43,-95,-95,-95,-95,-95,-186,-176,-187,-178,-181,-184,-188,-177,-185,-95,-182,-183,-179,-180,-95,-95,-95,-234,]),'CONTINUE':([228,241,242,299,306,377,],[-234,276,-44,-43,276,-234,]),'BOOL':([32,34,35,41,46,55,82,85,91,96,113,115,119,121,123,150,183,185,187,200,224,230,231,252,],[-57,70,-56,70,70,70,70,-58,70,70,70,70,-59,70,70,70,70,-36,-56,70,70,70,-35,70,]),'PS':([269,],[307,]),'STRING_LIT':([7,13,25,27,28,29,30,47,48,64,90,93,94,95,99,100,107,109,112,126,132,145,147,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,223,228,232,234,241,242,254,260,266,273,278,285,290,294,299,306,307,308,309,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,352,363,368,377,],[-224,-234,-234,-232,-231,50,-230,-228,-234,-98,-98,-98,-140,-139,-98,-138,149,-98,-141,-98,-227,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-234,-98,-98,-98,-44,-98,-98,-98,-81,-98,-98,-98,-98,-43,-98,-98,-98,-98,-98,-186,-176,-187,-178,-181,-184,-188,-177,-185,-98,-182,-183,-179,-180,-98,-98,-98,-234,]),'NOT':([64,90,93,94,95,99,100,109,112,126,145,147,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,223,228,232,234,241,242,254,260,266,273,278,285,290,294,299,306,307,308,309,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,352,363,368,377,],[99,99,99,-140,-139,99,-138,99,-141,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-234,99,99,99,-44,99,99,99,-81,99,99,99,99,-43,99,99,99,99,99,-186,-176,-187,-178,-181,-184,-188,-177,-185,99,-182,-183,-179,-180,99,99,99,-234,]),'ANDEQUAL':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,149,192,193,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,245,248,249,280,282,283,293,344,345,351,],[-103,-88,-90,-99,-113,-135,-87,-101,-136,-137,-93,-92,-91,-105,-106,-94,-60,-62,-102,-89,-124,-117,-125,-132,-123,-114,-128,-130,-116,-120,-129,-131,-118,-119,-127,-115,-126,-122,-121,-107,-104,-61,-110,-142,-99,325,-234,-108,-234,-99,-109,]),'DECREMENT':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,149,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,248,249,280,283,293,344,345,351,],[-103,-88,-90,-99,-113,-135,-87,-101,-136,-137,-93,-92,-91,-105,-106,-94,-102,-89,-124,-117,-125,-132,-123,-114,-128,-130,-116,-120,-129,-131,-118,-119,-127,-115,-126,-122,-121,-107,-104,-110,-142,-99,330,-108,330,-99,-109,]),'TYPE':([5,8,9,10,11,24,32,34,35,36,41,46,55,82,85,91,96,113,115,119,121,123,150,183,185,187,200,224,228,230,231,241,242,252,299,306,377,],[-234,-219,-234,23,-222,-220,-57,72,-56,-221,72,72,72,72,-58,72,72,72,72,-59,72,72,72,72,-36,-56,72,72,-234,72,-35,23,-44,72,-43,23,-234,]),'OR':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,149,151,199,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,235,237,245,247,248,249,280,283,293,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-113,-135,-87,169,-101,169,-136,-137,-93,-92,-91,-105,-106,-94,169,169,-102,-89,-124,169,-125,-132,-123,169,-128,-130,169,-120,-129,-131,-118,-119,-127,169,-126,-122,-121,-107,-104,169,169,169,-110,-142,-99,169,-108,169,169,169,169,169,169,169,169,169,-99,169,-109,169,]),'SCAN':([228,241,242,299,306,377,],[-234,285,-44,-43,285,-234,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'FunctionBody':([182,],[226,]),'Conversion':([64,90,93,99,109,126,145,147,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,223,232,234,241,254,260,266,278,285,290,294,306,307,308,309,314,324,352,363,368,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'ContinueStmt':([241,306,],[253,253,]),'ExpressionRep':([135,283,344,],[192,192,192,]),'ExpressionStmt':([241,306,309,363,],[255,255,255,255,]),'ScanStmt':([241,306,],[256,256,]),'Statement':([241,306,],[257,336,]),'IfStmt':([241,306,374,],[258,258,380,]),'FallThroughStmt':([241,306,],[259,259,]),'StatementRep':([228,377,],[241,241,]),'TypeToken':([34,41,46,55,82,91,96,113,115,121,123,150,183,200,224,230,252,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'AliasDecl':([23,79,],[43,43,]),'PackageNameDotOpt':([13,48,],[29,29,]),'TypeName':([34,41,46,55,82,91,96,113,115,121,123,150,183,200,224,230,252,],[59,59,59,59,59,136,59,59,59,59,59,59,59,59,59,59,59,]),'ExprCaseClause':([365,],[372,]),'ParametersList':([123,],[186,]),'ParameterDecl':([123,230,],[188,244,]),'FuncScope':([68,],[117,]),'FunctionName':([20,],[38,]),'LabeledStmt':([241,306,],[264,264,]),'KeyType':([115,],[173,]),'StatementList':([228,377,],[243,381,]),'TypeAssertion':([106,],[146,]),'ConditionOpt':([352,],[358,]),'ElementType':([96,150,224,],[139,202,238,]),'RetTypeSet':([122,],[182,]),'PointerType':([34,41,46,55,82,96,113,115,121,123,150,183,200,224,230,252,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'EndScope':([120,122,251,333,353,362,371,382,],[175,181,296,349,360,366,378,383,]),'VarSpecRep':([40,],[76,]),'VarDecl':([10,241,306,],[22,22,22,]),'PrintStmt':([241,306,],[265,265,]),'ConstSpecRep':([33,],[52,]),'Operand':([64,90,93,99,109,126,145,147,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,223,232,234,241,254,260,266,278,285,290,294,306,307,308,309,314,324,352,363,368,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'TypeSpec':([23,79,],[45,130,]),'Parameters':([75,121,],[121,176,]),'UnaryOp':([64,90,93,99,109,126,145,147,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,223,232,234,241,254,260,266,278,285,290,294,306,307,308,309,314,324,352,363,368,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'PackageName':([2,13,48,],[6,28,28,]),'SourceFile':([0,],[3,]),'ExpressionListPureOpt':([266,],[303,]),'Label':([241,263,276,284,306,],[267,302,312,312,267,]),'FunctionDecl':([10,],[15,]),'TopLevelDecl':([10,],[16,]),'ExprSwitchStmt':([241,306,],[268,268,]),'IdentifierList':([14,21,52,76,123,230,239,],[34,41,34,41,183,183,252,]),'IdentifierRep':([14,21,52,76,123,230,239,],[32,32,32,32,32,32,32,]),'Type':([34,41,46,55,82,96,113,115,121,123,150,183,200,224,230,252,],[58,78,81,88,131,138,171,172,177,184,138,229,236,138,184,297,]),'ImportDeclRep':([5,],[9,]),'GoStmt':([241,306,],[270,270,]),'DeferStmt':([241,306,],[271,271,]),'PackageClause':([0,],[1,]),'ResultOpt':([121,],[178,]),'IncDecStmt':([241,306,309,363,],[262,262,262,262,]),'GotoStmt':([241,306,],[272,272,]),'TopLevelDeclRep':([9,],[10,]),'C':([64,90,93,99,109,126,145,147,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,223,232,234,241,254,260,266,278,285,290,294,306,307,308,309,314,324,352,363,368,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'PrimaryExpr':([64,90,93,99,109,126,145,147,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,223,232,234,241,254,260,266,278,285,290,294,306,307,308,309,314,324,352,363,368,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'S':([64,90,93,99,109,126,145,147,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,223,232,234,241,254,260,266,278,285,290,294,306,307,308,309,314,324,352,363,368,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,]),'StartSwitch':([354,],[361,]),'assign_op':([282,],[324,]),'Signature':([75,],[122,]),'Block':([182,288,342,355,379,],[227,333,353,362,382,]),'ExprCaseClauseList':([361,],[365,]),'SwitchStmt':([241,306,],[275,275,]),'VarSpec':([21,76,],[39,125,]),'Result':([121,],[180,]),'Assignment':([241,306,309,363,],[277,277,277,277,]),'ExpressionListTypeOpt':([145,],[195,]),'QualifiedIdent':([34,41,46,55,82,91,96,113,115,121,123,150,183,200,224,230,252,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'Literal':([64,90,93,99,109,126,145,147,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,223,232,234,241,254,260,266,278,285,290,294,306,307,308,309,314,324,352,363,368,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'ImportDecl':([9,],[12,]),'OperandName':([64,90,93,99,109,126,145,147,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,223,232,234,241,254,260,266,278,285,290,294,306,307,308,309,314,324,352,363,368,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'AssignOp':([282,],[316,]),'LabelOpt':([276,284,],[311,331,]),'FieldDeclRep':([225,],[239,]),'start':([0,],[4,]),'Declaration':([10,241,306,],[17,279,279,]),'Condition':([309,352,],[340,356,]),'StructType':([68,],[116,]),'ConstSpec':([14,52,],[31,86,]),'F':([64,90,93,99,109,126,145,147,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,223,232,234,241,254,260,266,278,285,290,294,306,307,308,309,314,324,352,363,368,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'epsilon':([5,9,13,25,33,40,44,48,78,121,135,145,147,225,228,234,241,266,276,283,284,306,309,344,352,361,363,366,377,],[8,11,27,47,53,77,80,27,127,179,193,194,198,240,242,198,281,304,310,193,310,281,341,193,357,364,281,373,242,]),'ConditionBlockOpt':([309,],[342,]),'ExpressionList':([90,126,145,241,266,306,309,324,363,368,],[134,190,196,282,305,282,282,348,282,376,]),'SimpleStmt':([241,306,309,363,],[286,286,339,367,]),'ImportSpecRep':([25,],[48,]),'Expression':([64,90,109,126,145,147,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,223,232,234,241,254,260,266,278,285,290,294,306,307,308,309,314,324,352,363,368,],[111,135,151,135,135,199,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,237,245,247,283,298,300,135,313,332,334,335,283,337,338,344,347,135,359,283,135,]),'ImportPath':([29,],[49,]),'ExprSwitchCase':([365,],[369,]),'ExpressionOpt':([147,234,],[197,246,]),'ST':([34,41,46,55,82,96,113,115,121,123,150,183,200,224,230,252,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'TypeExprListOpt':([34,],[69,]),'ReturnStmt':([241,306,],[274,274,]),'ConstDecl':([10,241,306,],[18,18,18,]),'Slice':([106,],[144,]),'ArrayType':([34,41,46,55,82,96,113,115,121,123,150,183,200,224,230,252,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'ForStmt':([241,306,],[287,287,]),'Function':([75,],[120,]),'ImportSpec':([13,48,],[26,84,]),'TypeLit':([34,41,46,55,82,96,113,115,121,123,150,183,200,224,230,252,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'TypeSpecRep':([44,],[79,]),'CreateScope':([38,241,273,306,313,334,374,],[75,288,309,288,346,350,379,]),'SliceType':([34,41,46,55,82,96,113,115,121,123,150,183,200,224,230,252,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'TypeDecl':([10,241,306,],[19,19,19,]),'BaseType':([55,],[89,]),'I':([64,90,93,99,109,126,145,147,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,223,232,234,241,254,260,266,278,285,290,294,306,307,308,309,314,324,352,363,368,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'IFSYM':([350,],[355,]),'UnaryExpr':([64,90,93,99,109,126,145,147,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,223,232,234,241,254,260,266,278,285,290,294,306,307,308,309,314,324,352,363,368,],[105,105,137,140,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'ArrayLength':([64,],[108,]),'MapType':([34,41,46,55,82,96,113,115,121,123,150,183,200,224,230,252,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'ForClause':([309,],[343,]),'ShortVarDecl':([241,306,309,363,],[289,289,289,289,]),'TypeDef':([23,79,],[42,42,]),'FieldDecl':([239,],[250,]),'BreakStmt':([241,306,],[291,291,]),'BasicLit':([64,90,93,99,109,126,145,147,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,223,232,234,241,254,260,266,278,285,290,294,306,307,308,309,314,324,352,363,368,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'ExpressionListOpt':([78,],[128,]),'ElseOpt':([366,],[375,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> SourceFile','start',1,'p_start','parser.py',205),
  ('Type -> TypeName','Type',1,'p_type','parser.py',214),
  ('Type -> TypeLit','Type',1,'p_type','parser.py',215),
  ('TypeName -> TypeToken','TypeName',1,'p_type_name','parser.py',219),
  ('TypeName -> QualifiedIdent','TypeName',1,'p_type_name','parser.py',220),
  ('TypeToken -> INT','TypeToken',1,'p_type_token','parser.py',233),
  ('TypeToken -> FLOAT','TypeToken',1,'p_type_token','parser.py',234),
  ('TypeToken -> BOOL','TypeToken',1,'p_type_token','parser.py',235),
  ('TypeToken -> STRING','TypeToken',1,'p_type_token','parser.py',236),
  ('TypeToken -> TYPE IDENTIFIER','TypeToken',2,'p_type_token','parser.py',237),
  ('TypeLit -> ArrayType','TypeLit',1,'p_type_lit','parser.py',273),
  ('TypeLit -> ST StructType','TypeLit',2,'p_type_lit','parser.py',274),
  ('TypeLit -> PointerType','TypeLit',1,'p_type_lit','parser.py',275),
  ('TypeLit -> MapType','TypeLit',1,'p_type_lit','parser.py',276),
  ('TypeLit -> SliceType','TypeLit',1,'p_type_lit','parser.py',277),
  ('ST -> <empty>','ST',0,'p_S_T','parser.py',284),
  ('SliceType -> LSQUARE RSQUARE ElementType','SliceType',3,'p_slice_type','parser.py',299),
  ('MapType -> MAP LSQUARE KeyType RSQUARE ElementType','MapType',5,'p_map_type','parser.py',308),
  ('KeyType -> Type','KeyType',1,'p_key_type','parser.py',315),
  ('ArrayType -> LSQUARE ArrayLength RSQUARE ElementType','ArrayType',4,'p_array_type','parser.py',322),
  ('ArrayLength -> Expression','ArrayLength',1,'p_array_length','parser.py',353),
  ('ElementType -> Type','ElementType',1,'p_element_type','parser.py',357),
  ('StructType -> FuncScope STRUCT LCURL FieldDeclRep RCURL EndScope','StructType',6,'p_struct_type','parser.py',362),
  ('FuncScope -> <empty>','FuncScope',0,'p_func_scope','parser.py',376),
  ('FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON','FieldDeclRep',3,'p_field_decl_rep','parser.py',387),
  ('FieldDeclRep -> epsilon','FieldDeclRep',1,'p_field_decl_rep','parser.py',388),
  ('FieldDecl -> IdentifierList Type','FieldDecl',2,'p_field_decl','parser.py',401),
  ('PointerType -> MULTIPLY BaseType','PointerType',2,'p_point_type','parser.py',435),
  ('BaseType -> Type','BaseType',1,'p_base_type','parser.py',442),
  ('Signature -> Parameters ResultOpt','Signature',2,'p_sign','parser.py',449),
  ('ResultOpt -> Result','ResultOpt',1,'p_result_opt','parser.py',467),
  ('ResultOpt -> epsilon','ResultOpt',1,'p_result_opt','parser.py',468),
  ('Result -> Parameters','Result',1,'p_result','parser.py',472),
  ('Result -> Type','Result',1,'p_result','parser.py',473),
  ('Parameters -> LPAREN ParametersList RPAREN','Parameters',3,'p_params','parser.py',478),
  ('Parameters -> LPAREN RPAREN','Parameters',2,'p_params','parser.py',479),
  ('ParametersList -> ParameterDecl','ParametersList',1,'p_param_list','parser.py',501),
  ('ParametersList -> ParametersList COMMA ParameterDecl','ParametersList',3,'p_param_list','parser.py',502),
  ('ParameterDecl -> IdentifierList Type','ParameterDecl',2,'p_param_decl','parser.py',512),
  ('ParameterDecl -> Type','ParameterDecl',1,'p_param_decl','parser.py',513),
  ('Block -> LCURL StatementList RCURL','Block',3,'p_block','parser.py',536),
  ('StatementList -> StatementRep','StatementList',1,'p_stat_list','parser.py',540),
  ('StatementRep -> StatementRep Statement SEMICOLON','StatementRep',3,'p_stat_rep','parser.py',544),
  ('StatementRep -> epsilon','StatementRep',1,'p_stat_rep','parser.py',545),
  ('Declaration -> ConstDecl','Declaration',1,'p_decl','parser.py',558),
  ('Declaration -> TypeDecl','Declaration',1,'p_decl','parser.py',559),
  ('Declaration -> VarDecl','Declaration',1,'p_decl','parser.py',560),
  ('TopLevelDecl -> Declaration','TopLevelDecl',1,'p_toplevel_decl','parser.py',564),
  ('TopLevelDecl -> FunctionDecl','TopLevelDecl',1,'p_toplevel_decl','parser.py',565),
  ('ConstDecl -> CONST ConstSpec','ConstDecl',2,'p_const_decl','parser.py',572),
  ('ConstDecl -> CONST LPAREN ConstSpecRep RPAREN','ConstDecl',4,'p_const_decl','parser.py',573),
  ('ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON','ConstSpecRep',3,'p_const_spec_rep','parser.py',580),
  ('ConstSpecRep -> epsilon','ConstSpecRep',1,'p_const_spec_rep','parser.py',581),
  ('ConstSpec -> IdentifierList TypeExprListOpt','ConstSpec',2,'p_const_spec','parser.py',590),
  ('TypeExprListOpt -> Type EQUALS ExpressionList','TypeExprListOpt',3,'p_type_expr_list','parser.py',612),
  ('IdentifierList -> IDENTIFIER','IdentifierList',1,'p_identifier_list','parser.py',626),
  ('IdentifierList -> IdentifierRep','IdentifierList',1,'p_identifier_list','parser.py',627),
  ('IdentifierRep -> IdentifierRep COMMA IDENTIFIER','IdentifierRep',3,'p_identifier_rep','parser.py',643),
  ('IdentifierRep -> IDENTIFIER COMMA IDENTIFIER','IdentifierRep',3,'p_identifier_rep','parser.py',644),
  ('ExpressionList -> Expression ExpressionRep','ExpressionList',2,'p_expr_list','parser.py',674),
  ('ExpressionRep -> ExpressionRep COMMA Expression','ExpressionRep',3,'p_expr_rep','parser.py',685),
  ('ExpressionRep -> epsilon','ExpressionRep',1,'p_expr_rep','parser.py',686),
  ('TypeDecl -> TYPE TypeSpec','TypeDecl',2,'p_type_decl','parser.py',704),
  ('TypeDecl -> TYPE LPAREN TypeSpecRep RPAREN','TypeDecl',4,'p_type_decl','parser.py',705),
  ('TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON','TypeSpecRep',3,'p_type_spec_rep','parser.py',712),
  ('TypeSpecRep -> epsilon','TypeSpecRep',1,'p_type_spec_rep','parser.py',713),
  ('TypeSpec -> AliasDecl','TypeSpec',1,'p_type_spec','parser.py',720),
  ('TypeSpec -> TypeDef','TypeSpec',1,'p_type_spec','parser.py',721),
  ('AliasDecl -> IDENTIFIER EQUALS Type','AliasDecl',3,'p_alias_decl','parser.py',725),
  ('TypeDef -> IDENTIFIER Type','TypeDef',2,'p_type_def','parser.py',737),
  ('VarDecl -> VAR VarSpec','VarDecl',2,'p_var_decl','parser.py',750),
  ('VarDecl -> VAR LPAREN VarSpecRep RPAREN','VarDecl',4,'p_var_decl','parser.py',751),
  ('VarSpecRep -> VarSpecRep VarSpec SEMICOLON','VarSpecRep',3,'p_var_spec_rep','parser.py',759),
  ('VarSpecRep -> epsilon','VarSpecRep',1,'p_var_spec_rep','parser.py',760),
  ('VarSpec -> IdentifierList Type ExpressionListOpt','VarSpec',3,'p_var_spec','parser.py',770),
  ('ExpressionListOpt -> EQUALS ExpressionList','ExpressionListOpt',2,'p_expr_list_opt','parser.py',856),
  ('ExpressionListOpt -> epsilon','ExpressionListOpt',1,'p_expr_list_opt','parser.py',857),
  ('ShortVarDecl -> IDENTIFIER SHORT_ASSIGNMENT Expression','ShortVarDecl',3,'p_short_var_decl','parser.py',867),
  ('FunctionDecl -> FUNC FunctionName CreateScope Function EndScope','FunctionDecl',5,'p_func_decl','parser.py',894),
  ('FunctionDecl -> FUNC FunctionName CreateScope Signature EndScope','FunctionDecl',5,'p_func_decl','parser.py',895),
  ('CreateScope -> <empty>','CreateScope',0,'p_create_scope','parser.py',912),
  ('EndScope -> <empty>','EndScope',0,'p_end_scope','parser.py',917),
  ('FunctionName -> IDENTIFIER','FunctionName',1,'p_func_name','parser.py',921),
  ('Function -> Signature RetTypeSet FunctionBody','Function',3,'p_func','parser.py',936),
  ('RetTypeSet -> <empty>','RetTypeSet',0,'p_ret_type_set','parser.py',960),
  ('FunctionBody -> Block','FunctionBody',1,'p_func_body','parser.py',972),
  ('Operand -> Literal','Operand',1,'p_operand','parser.py',979),
  ('Operand -> OperandName','Operand',1,'p_operand','parser.py',980),
  ('Operand -> LPAREN Expression RPAREN','Operand',3,'p_operand','parser.py',981),
  ('Literal -> BasicLit','Literal',1,'p_literal','parser.py',988),
  ('BasicLit -> I INT_LIT','BasicLit',2,'p_basic_lit','parser.py',993),
  ('BasicLit -> F FLOAT_LIT','BasicLit',2,'p_basic_lit','parser.py',994),
  ('BasicLit -> C IMAGINARY_LIT','BasicLit',2,'p_basic_lit','parser.py',995),
  ('BasicLit -> S STRING_LIT','BasicLit',2,'p_basic_lit','parser.py',996),
  ('I -> <empty>','I',0,'p_I','parser.py',1008),
  ('F -> <empty>','F',0,'p_F','parser.py',1012),
  ('C -> <empty>','C',0,'p_C','parser.py',1016),
  ('S -> <empty>','S',0,'p_S','parser.py',1020),
  ('OperandName -> IDENTIFIER','OperandName',1,'p_operand_name','parser.py',1024),
  ('QualifiedIdent -> IDENTIFIER DOT TypeName','QualifiedIdent',3,'p_qualified_ident','parser.py',1082),
  ('PrimaryExpr -> Operand','PrimaryExpr',1,'p_prim_expr','parser.py',1094),
  ('PrimaryExpr -> PrimaryExpr DOT IDENTIFIER','PrimaryExpr',3,'p_prim_expr','parser.py',1095),
  ('PrimaryExpr -> Conversion','PrimaryExpr',1,'p_prim_expr','parser.py',1096),
  ('PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE','PrimaryExpr',4,'p_prim_expr','parser.py',1097),
  ('PrimaryExpr -> PrimaryExpr Slice','PrimaryExpr',2,'p_prim_expr','parser.py',1098),
  ('PrimaryExpr -> PrimaryExpr TypeAssertion','PrimaryExpr',2,'p_prim_expr','parser.py',1099),
  ('PrimaryExpr -> PrimaryExpr LPAREN ExpressionListTypeOpt RPAREN','PrimaryExpr',4,'p_prim_expr','parser.py',1100),
  ('Slice -> LSQUARE ExpressionOpt COLON ExpressionOpt RSQUARE','Slice',5,'p_slice','parser.py',1266),
  ('Slice -> LSQUARE ExpressionOpt COLON Expression COLON Expression RSQUARE','Slice',7,'p_slice','parser.py',1267),
  ('TypeAssertion -> DOT LPAREN Type RPAREN','TypeAssertion',4,'p_type_assert','parser.py',1275),
  ('ExpressionListTypeOpt -> ExpressionList','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',1280),
  ('ExpressionListTypeOpt -> epsilon','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',1281),
  ('Expression -> UnaryExpr','Expression',1,'p_expr','parser.py',1287),
  ('Expression -> Expression COMPARE_OR Expression','Expression',3,'p_expr','parser.py',1288),
  ('Expression -> Expression COMPARE_AND Expression','Expression',3,'p_expr','parser.py',1289),
  ('Expression -> Expression EQEQ Expression','Expression',3,'p_expr','parser.py',1290),
  ('Expression -> Expression NOTEQUALS Expression','Expression',3,'p_expr','parser.py',1291),
  ('Expression -> Expression LESSTHAN Expression','Expression',3,'p_expr','parser.py',1292),
  ('Expression -> Expression GREATERTHAN Expression','Expression',3,'p_expr','parser.py',1293),
  ('Expression -> Expression LESSTHAN_EQUAL Expression','Expression',3,'p_expr','parser.py',1294),
  ('Expression -> Expression GREATERTHAN_EQUAL Expression','Expression',3,'p_expr','parser.py',1295),
  ('Expression -> Expression OR Expression','Expression',3,'p_expr','parser.py',1296),
  ('Expression -> Expression XOR Expression','Expression',3,'p_expr','parser.py',1297),
  ('Expression -> Expression ANDXOR Expression','Expression',3,'p_expr','parser.py',1298),
  ('Expression -> Expression DIVIDE Expression','Expression',3,'p_expr','parser.py',1299),
  ('Expression -> Expression MODULO Expression','Expression',3,'p_expr','parser.py',1300),
  ('Expression -> Expression LSHIFT Expression','Expression',3,'p_expr','parser.py',1301),
  ('Expression -> Expression RSHIFT Expression','Expression',3,'p_expr','parser.py',1302),
  ('Expression -> Expression PLUS Expression','Expression',3,'p_expr','parser.py',1303),
  ('Expression -> Expression MINUS Expression','Expression',3,'p_expr','parser.py',1304),
  ('Expression -> Expression MULTIPLY Expression','Expression',3,'p_expr','parser.py',1305),
  ('Expression -> Expression AND Expression','Expression',3,'p_expr','parser.py',1306),
  ('ExpressionOpt -> Expression','ExpressionOpt',1,'p_expr_opt','parser.py',1353),
  ('ExpressionOpt -> epsilon','ExpressionOpt',1,'p_expr_opt','parser.py',1354),
  ('UnaryExpr -> PrimaryExpr','UnaryExpr',1,'p_unary_expr','parser.py',1358),
  ('UnaryExpr -> UnaryOp UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',1359),
  ('UnaryExpr -> NOT UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',1360),
  ('UnaryOp -> PLUS','UnaryOp',1,'p_unary_op','parser.py',1395),
  ('UnaryOp -> MINUS','UnaryOp',1,'p_unary_op','parser.py',1396),
  ('UnaryOp -> MULTIPLY','UnaryOp',1,'p_unary_op','parser.py',1397),
  ('UnaryOp -> AND','UnaryOp',1,'p_unary_op','parser.py',1398),
  ('Conversion -> TYPECAST Type LPAREN Expression RPAREN','Conversion',5,'p_conversion','parser.py',1412),
  ('Statement -> Declaration','Statement',1,'p_statement','parser.py',1420),
  ('Statement -> LabeledStmt','Statement',1,'p_statement','parser.py',1421),
  ('Statement -> SimpleStmt','Statement',1,'p_statement','parser.py',1422),
  ('Statement -> ReturnStmt','Statement',1,'p_statement','parser.py',1423),
  ('Statement -> BreakStmt','Statement',1,'p_statement','parser.py',1424),
  ('Statement -> ContinueStmt','Statement',1,'p_statement','parser.py',1425),
  ('Statement -> GotoStmt','Statement',1,'p_statement','parser.py',1426),
  ('Statement -> CreateScope Block EndScope','Statement',3,'p_statement','parser.py',1427),
  ('Statement -> IfStmt','Statement',1,'p_statement','parser.py',1428),
  ('Statement -> SwitchStmt','Statement',1,'p_statement','parser.py',1429),
  ('Statement -> ForStmt','Statement',1,'p_statement','parser.py',1430),
  ('Statement -> DeferStmt','Statement',1,'p_statement','parser.py',1431),
  ('Statement -> FallThroughStmt','Statement',1,'p_statement','parser.py',1432),
  ('Statement -> GoStmt','Statement',1,'p_statement','parser.py',1433),
  ('Statement -> PrintStmt','Statement',1,'p_statement','parser.py',1434),
  ('Statement -> ScanStmt','Statement',1,'p_statement','parser.py',1435),
  ('PrintStmt -> PRINT PD Expression','PrintStmt',3,'p_print_stmt','parser.py',1442),
  ('PrintStmt -> PRINT PS Expression','PrintStmt',3,'p_print_stmt','parser.py',1443),
  ('ScanStmt -> SCAN Expression','ScanStmt',2,'p_scan_stmt','parser.py',1456),
  ('FallThroughStmt -> FALLTHROUGH','FallThroughStmt',1,'p_fallthrough_stmt','parser.py',1463),
  ('GoStmt -> GO Expression','GoStmt',2,'p_go_stmt','parser.py',1467),
  ('DeferStmt -> DEFER Expression','DeferStmt',2,'p_defer_stmt','parser.py',1473),
  ('SimpleStmt -> epsilon','SimpleStmt',1,'p_simple_stmt','parser.py',1478),
  ('SimpleStmt -> ExpressionStmt','SimpleStmt',1,'p_simple_stmt','parser.py',1479),
  ('SimpleStmt -> IncDecStmt','SimpleStmt',1,'p_simple_stmt','parser.py',1480),
  ('SimpleStmt -> Assignment','SimpleStmt',1,'p_simple_stmt','parser.py',1481),
  ('SimpleStmt -> ShortVarDecl','SimpleStmt',1,'p_simple_stmt','parser.py',1482),
  ('LabeledStmt -> Label COLON Statement','LabeledStmt',3,'p_labeled_statements','parser.py',1487),
  ('Label -> IDENTIFIER','Label',1,'p_label','parser.py',1505),
  ('ExpressionStmt -> Expression','ExpressionStmt',1,'p_expression_stmt','parser.py',1510),
  ('IncDecStmt -> Expression INCREMENT','IncDecStmt',2,'p_inc_dec','parser.py',1516),
  ('IncDecStmt -> Expression DECREMENT','IncDecStmt',2,'p_inc_dec','parser.py',1517),
  ('Assignment -> ExpressionList assign_op ExpressionList','Assignment',3,'p_assignment','parser.py',1524),
  ('assign_op -> AssignOp','assign_op',1,'p_assign_op','parser.py',1565),
  ('AssignOp -> PLUSEQUAL','AssignOp',1,'p_AssignOp','parser.py',1569),
  ('AssignOp -> MINUSEQUAL','AssignOp',1,'p_AssignOp','parser.py',1570),
  ('AssignOp -> TIMESEQUAL','AssignOp',1,'p_AssignOp','parser.py',1571),
  ('AssignOp -> DIVIDE_EQUAL','AssignOp',1,'p_AssignOp','parser.py',1572),
  ('AssignOp -> MODEQUAL','AssignOp',1,'p_AssignOp','parser.py',1573),
  ('AssignOp -> ANDEQUAL','AssignOp',1,'p_AssignOp','parser.py',1574),
  ('AssignOp -> OREQUAL','AssignOp',1,'p_AssignOp','parser.py',1575),
  ('AssignOp -> XOREQUAL','AssignOp',1,'p_AssignOp','parser.py',1576),
  ('AssignOp -> ANDXOR_EQUAL','AssignOp',1,'p_AssignOp','parser.py',1577),
  ('AssignOp -> LSHIFT_EQUAL','AssignOp',1,'p_AssignOp','parser.py',1578),
  ('AssignOp -> RSHIFT_EQUAL','AssignOp',1,'p_AssignOp','parser.py',1579),
  ('AssignOp -> EQUALS','AssignOp',1,'p_AssignOp','parser.py',1580),
  ('IfStmt -> IF Expression CreateScope IFSYM Block EndScope ElseOpt','IfStmt',7,'p_if_statement','parser.py',1586),
  ('IFSYM -> <empty>','IFSYM',0,'p_if_sym','parser.py',1607),
  ('ElseOpt -> ELSE IfStmt','ElseOpt',2,'p_else_opt','parser.py',1613),
  ('ElseOpt -> ELSE CreateScope Block EndScope','ElseOpt',4,'p_else_opt','parser.py',1614),
  ('ElseOpt -> epsilon','ElseOpt',1,'p_else_opt','parser.py',1615),
  ('SwitchStmt -> ExprSwitchStmt','SwitchStmt',1,'p_switch_statement','parser.py',1627),
  ('ExprSwitchStmt -> SWITCH Expression CreateScope LCURL StartSwitch ExprCaseClauseList RCURL EndScope','ExprSwitchStmt',8,'p_ExprSwitchStmt','parser.py',1631),
  ('StartSwitch -> <empty>','StartSwitch',0,'p_start_switch','parser.py',1663),
  ('ExprCaseClauseList -> epsilon','ExprCaseClauseList',1,'p_ExprCaseClauseList','parser.py',1679),
  ('ExprCaseClauseList -> ExprCaseClauseList ExprCaseClause','ExprCaseClauseList',2,'p_ExprCaseClauseList','parser.py',1680),
  ('ExprCaseClause -> ExprSwitchCase COLON StatementList','ExprCaseClause',3,'p_ExprCaseClause','parser.py',1696),
  ('ExprSwitchCase -> CASE ExpressionList','ExprSwitchCase',2,'p_ExprSwitchCase','parser.py',1719),
  ('ExprSwitchCase -> DEFAULT','ExprSwitchCase',1,'p_ExprSwitchCase','parser.py',1720),
  ('ForStmt -> FOR CreateScope ConditionBlockOpt Block EndScope','ForStmt',5,'p_for','parser.py',1744),
  ('ConditionBlockOpt -> epsilon','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',1764),
  ('ConditionBlockOpt -> Condition','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',1765),
  ('ConditionBlockOpt -> ForClause','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',1766),
  ('Condition -> Expression','Condition',1,'p_condition','parser.py',1775),
  ('ForClause -> SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmt','ForClause',5,'p_forclause','parser.py',1780),
  ('ConditionOpt -> epsilon','ConditionOpt',1,'p_conditionopt','parser.py',1809),
  ('ConditionOpt -> Condition','ConditionOpt',1,'p_conditionopt','parser.py',1810),
  ('ReturnStmt -> RETURN ExpressionListPureOpt','ReturnStmt',2,'p_return','parser.py',1817),
  ('ExpressionListPureOpt -> ExpressionList','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',1866),
  ('ExpressionListPureOpt -> epsilon','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',1867),
  ('BreakStmt -> BREAK LabelOpt','BreakStmt',2,'p_break','parser.py',1872),
  ('ContinueStmt -> CONTINUE LabelOpt','ContinueStmt',2,'p_continue','parser.py',1876),
  ('LabelOpt -> Label','LabelOpt',1,'p_labelopt','parser.py',1880),
  ('LabelOpt -> epsilon','LabelOpt',1,'p_labelopt','parser.py',1881),
  ('GotoStmt -> GOTO Label','GotoStmt',2,'p_goto','parser.py',1886),
  ('SourceFile -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep','SourceFile',4,'p_source_file','parser.py',1892),
  ('ImportDeclRep -> epsilon','ImportDeclRep',1,'p_import_decl_rep','parser.py',1900),
  ('ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON','ImportDeclRep',3,'p_import_decl_rep','parser.py',1901),
  ('TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON','TopLevelDeclRep',3,'p_toplevel_decl_rep','parser.py',1910),
  ('TopLevelDeclRep -> epsilon','TopLevelDeclRep',1,'p_toplevel_decl_rep','parser.py',1911),
  ('PackageClause -> PACKAGE PackageName','PackageClause',2,'p_package_clause','parser.py',1922),
  ('PackageName -> IDENTIFIER','PackageName',1,'p_package_name','parser.py',1927),
  ('ImportDecl -> IMPORT ImportSpec','ImportDecl',2,'p_import_decl','parser.py',1938),
  ('ImportDecl -> IMPORT LPAREN ImportSpecRep RPAREN','ImportDecl',4,'p_import_decl','parser.py',1939),
  ('ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON','ImportSpecRep',3,'p_import_spec_rep','parser.py',1946),
  ('ImportSpecRep -> epsilon','ImportSpecRep',1,'p_import_spec_rep','parser.py',1947),
  ('ImportSpec -> PackageNameDotOpt ImportPath','ImportSpec',2,'p_import_spec','parser.py',1955),
  ('PackageNameDotOpt -> DOT','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',1963),
  ('PackageNameDotOpt -> PackageName','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',1964),
  ('PackageNameDotOpt -> epsilon','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',1965),
  ('ImportPath -> STRING_LIT','ImportPath',1,'p_import_path','parser.py',1973),
  ('epsilon -> <empty>','epsilon',0,'p_empty','parser.py',1982),
]
