
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftIDENTIFIERrightEQUALSNOTleftINT_LITleftFLOAT_LITleftSTRING_LITleftCOMPARE_ORleftCOMPARE_ANDleftEQEQNOTEQUALSleftORleftXORleftANDANDXORleftLESSTHANGREATERTHANLESSTHAN_EQUALGREATERTHAN_EQUALleftPLUSMINUSleftLSHIFTRSHIFTleftMULTIPLYDIVIDEMODULOleftLPARENRPARENAND ANDEQUAL ANDXOR ANDXOR_EQUAL BOOL BREAK CASE COLON COMMA COMPARE_AND COMPARE_OR CONST CONTINUE DECREMENT DEFAULT DEFER DIVIDE DIVIDE_EQUAL DOT ELSE EQEQ EQUALS FALLTHROUGH FLOAT FLOAT_LIT FOR FUNC GO GOTO GREATERTHAN GREATERTHAN_EQUAL IDENTIFIER IF IMAGINARY_LIT IMPORT INCREMENT INT INT_LIT LCURL LESSTHAN LESSTHAN_EQUAL LPAREN LSHIFT LSHIFT_EQUAL LSQUARE MAP MINUS MINUSEQUAL MODEQUAL MODULO MULTIPLY NOT NOTEQUALS OR OREQUAL PACKAGE PD PLUS PLUSEQUAL PRINT PS RCURL RETURN RPAREN RSHIFT RSHIFT_EQUAL RSQUARE SCAN SEMICOLON SHORT_ASSIGNMENT STRING STRING_LIT STRUCT SWITCH TIMESEQUAL TYPE TYPECAST VAR XOR XOREQUALstart : SourceFileType : TypeName\n            | TypeLitTypeName : TypeToken\n                | QualifiedIdentTypeToken : INT\n                 | FLOAT\n                 | BOOL\n                 | STRING\n                 | TYPE IDENTIFIERTypeLit : ArrayType\n               | ST StructType\n               | PointerType\n               | MapType\n               | SliceTypeST : SliceType : LSQUARE RSQUARE ElementTypeMapType : MAP LSQUARE KeyType RSQUARE ElementType KeyType : TypeArrayType : LSQUARE ArrayLength RSQUARE ElementType ArrayLength : Expression  ElementType : Type StructType : FuncScope STRUCT LCURL FieldDeclRep RCURL EndScopeFuncScope :  FieldDeclRep : FieldDeclRep FieldDecl SEMICOLON\n                  | epsilon  FieldDecl : IdentifierList TypePointerType : MULTIPLY BaseTypeBaseType : TypeSignature : Parameters ResultOptResultOpt : Result\n                 | epsilonResult : Parameters\n              | TypeParameters : LPAREN ParametersList RPAREN\n                  | LPAREN RPARENParametersList : ParameterDecl\n                      | ParametersList COMMA ParameterDeclParameterDecl : IdentifierList Type\n                     | TypeBlock : LCURL StatementList RCURLStatementList : StatementRepStatementRep : StatementRep Statement SEMICOLON\n                    | epsilonDeclaration : ConstDecl\n                 | TypeDecl\n                 | VarDeclTopLevelDecl : Declaration\n                  | FunctionDeclConstDecl : CONST ConstSpec\n                 | CONST LPAREN ConstSpecRep RPARENConstSpecRep : ConstSpecRep ConstSpec SEMICOLON\n                    | epsilonConstSpec : IdentifierList TypeExprListOptTypeExprListOpt : Type EQUALS ExpressionListIdentifierList : IDENTIFIER \n                      | IdentifierRepIdentifierRep : IdentifierRep COMMA IDENTIFIER\n                     | IDENTIFIER COMMA IDENTIFIERExpressionList : Expression ExpressionRepExpressionRep : ExpressionRep COMMA Expression\n                     | epsilonTypeDecl : TYPE TypeSpec\n                | TYPE LPAREN TypeSpecRep RPARENTypeSpecRep : TypeSpecRep TypeSpec SEMICOLON\n                   | epsilonTypeSpec : AliasDecl\n                | TypeDefAliasDecl : IDENTIFIER EQUALS TypeTypeDef : IDENTIFIER TypeVarDecl : VAR VarSpec\n               | VAR LPAREN VarSpecRep RPARENVarSpecRep : VarSpecRep VarSpec SEMICOLON\n                  | epsilonVarSpec : IdentifierList Type ExpressionListOptExpressionListOpt : EQUALS ExpressionList\n                         | epsilon ShortVarDecl : IDENTIFIER SHORT_ASSIGNMENT Expression FunctionDecl : FUNC FunctionName CreateScope Function EndScope\n                  | FUNC FunctionName CreateScope Signature EndScopeCreateScope : EndScope : FunctionName : IDENTIFIERFunction : Signature RetTypeSet FunctionBodyRetTypeSet : FunctionBody : BlockOperand : Literal\n               | OperandName\n               | LPAREN Expression RPARENLiteral : BasicLitBasicLit : I INT_LIT\n              | F FLOAT_LIT\n              | C IMAGINARY_LIT\n              | S STRING_LITI : F : C : S : OperandName : IDENTIFIERQualifiedIdent : IDENTIFIER DOT TypeNamePrimaryExpr : Operand\n                 | PrimaryExpr Selector\n                 | Conversion\n                 | PrimaryExpr LSQUARE Expression RSQUARE\n                 | PrimaryExpr Slice\n                 | PrimaryExpr TypeAssertion\n                 | PrimaryExpr LPAREN ExpressionListTypeOpt RPARENSelector : DOT IDENTIFIERSlice : LSQUARE ExpressionOpt COLON ExpressionOpt RSQUARE\n             | LSQUARE ExpressionOpt COLON Expression COLON Expression RSQUARETypeAssertion : DOT LPAREN Type RPARENExpressionListTypeOpt : ExpressionList\n                             | epsilonExpression : UnaryExpr\n                  | Expression COMPARE_OR Expression\n                  | Expression COMPARE_AND Expression\n                  | Expression EQEQ Expression\n                  | Expression NOTEQUALS Expression\n                  | Expression LESSTHAN Expression\n                  | Expression GREATERTHAN Expression\n                  | Expression LESSTHAN_EQUAL Expression\n                  | Expression GREATERTHAN_EQUAL Expression\n                  | Expression OR Expression\n                  | Expression XOR Expression\n                  | Expression ANDXOR Expression\n                  | Expression DIVIDE Expression\n                  | Expression MODULO Expression\n                  | Expression LSHIFT Expression\n                  | Expression RSHIFT Expression\n                  | Expression PLUS Expression\n                  | Expression MINUS Expression\n                  | Expression MULTIPLY Expression\n                  | Expression AND ExpressionExpressionOpt : Expression\n                     | epsilonUnaryExpr : PrimaryExpr\n                 | UnaryOp UnaryExpr\n                 | NOT UnaryExprUnaryOp : PLUS\n               | MINUS\n               | MULTIPLY\n               | AND Conversion : TYPECAST Type LPAREN Expression RPARENStatement : Declaration\n               | LabeledStmt\n               | SimpleStmt\n               | ReturnStmt\n               | BreakStmt\n               | ContinueStmt\n               | GotoStmt\n               | CreateScope Block EndScope\n               | IfStmt\n               | SwitchStmt\n               | ForStmt\n               | DeferStmt\n               | FallThroughStmt\n               | GoStmt\n               | PrintStmt\n               | ScanStmtPrintStmt : PRINT PD Expression\n               | PRINT PS ExpressionScanStmt : SCAN ExpressionFallThroughStmt : FALLTHROUGHGoStmt : GO ExpressionDeferStmt : DEFER Expression SimpleStmt : epsilon\n                 | ExpressionStmt\n                 | IncDecStmt\n                 | Assignment\n                 | ShortVarDecl  LabeledStmt : Label COLON Statement  Label : IDENTIFIER  ExpressionStmt : Expression  IncDecStmt : Expression INCREMENT\n                 | Expression DECREMENT  Assignment : ExpressionList assign_op ExpressionList assign_op : AssignOp AssignOp : PLUSEQUAL\n               | MINUSEQUAL\n               | TIMESEQUAL\n               | DIVIDE_EQUAL\n               | MODEQUAL\n               | ANDEQUAL\n               | OREQUAL\n               | XOREQUAL\n               | ANDXOR_EQUAL\n               | LSHIFT_EQUAL\n               | RSHIFT_EQUAL\n               | EQUALS  IfStmt : IF Expression CreateScope IFSYM Block EndScope ElseOpt IFSYM :  ElseOpt : ELSE IfStmt\n              | ELSE CreateScope Block EndScope\n              | epsilon  SwitchStmt : ExprSwitchStmtExprSwitchStmt : SWITCH Expression CreateScope LCURL StartSwitch ExprCaseClauseList RCURL StartSwitch : ExprCaseClauseList : epsilon\n                 | ExprCaseClauseList ExprCaseClause\n    ExprCaseClause : ExprSwitchCase COLON StatementList ExprSwitchCase : CASE ExpressionList\n                 | DEFAULT \n    ForStmt : FOR CreateScope ConditionBlockOpt Block EndScopeConditionBlockOpt : epsilon\n             | Condition\n             | ForClauseCondition : Expression ForClause : SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmtConditionOpt : epsilon\n          | Condition ReturnStmt : RETURN ExpressionListPureOptExpressionListPureOpt : ExpressionList\n             | epsilonBreakStmt : BREAK LabelOptContinueStmt : CONTINUE LabelOptLabelOpt : Label\n        | epsilon GotoStmt : GOTO Label SourceFile : PackageClause SEMICOLON ImportDeclRep TopLevelDeclRepImportDeclRep : epsilon\n           | ImportDeclRep ImportDecl SEMICOLONTopLevelDeclRep : TopLevelDeclRep TopLevelDecl SEMICOLON\n                     | epsilonPackageClause : PACKAGE PackageNamePackageName : IDENTIFIERImportDecl : IMPORT ImportSpec\n          | IMPORT LPAREN ImportSpecRep RPAREN  ImportSpecRep : ImportSpecRep ImportSpec SEMICOLON\n            | epsilon  ImportSpec : PackageNameDotOpt ImportPath  PackageNameDotOpt : DOT\n                        | PackageName\n                        | epsilon ImportPath : STRING_LIT epsilon : '
    
_lr_action_items = {'FUNC':([5,8,9,10,11,24,36,],[-235,-220,-235,20,-223,-221,-222,]),'ANDXOR':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,147,150,152,200,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,238,246,248,249,250,281,284,294,299,301,314,333,335,336,338,339,345,346,348,352,360,],[-103,-88,-90,-99,-114,-136,-87,153,-101,153,-137,-138,-93,-92,-91,-105,-102,-106,-94,153,153,-108,-89,-125,153,-126,-133,153,153,-129,-131,153,-121,-130,-132,-119,-120,-128,153,-127,153,-122,-107,-104,153,153,153,-111,-143,-99,153,-109,153,153,153,153,153,153,153,153,153,-99,153,-110,153,]),'DIVIDE':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,147,150,152,200,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,238,246,248,249,250,281,284,294,299,301,314,333,335,336,338,339,345,346,348,352,360,],[-103,-88,-90,-99,-114,-136,-87,155,-101,155,-137,-138,-93,-92,-91,-105,-102,-106,-94,155,155,-108,-89,155,155,-126,155,155,155,155,155,155,155,155,-132,155,155,155,155,-127,155,155,-107,-104,155,155,155,-111,-143,-99,155,-109,155,155,155,155,155,155,155,155,155,-99,155,-110,155,]),'CONST':([5,8,9,10,11,24,36,229,242,243,300,307,378,],[-235,-220,-235,14,-223,-221,-222,-235,14,-44,-43,14,-235,]),'LPAREN':([13,14,21,23,37,38,54,56,57,59,61,62,63,64,66,67,70,71,73,75,88,89,90,92,93,94,95,97,98,99,100,101,106,109,110,112,114,116,118,121,126,136,138,139,141,142,143,144,145,146,147,148,149,150,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,186,201,203,204,224,229,232,233,234,235,236,239,242,243,249,250,252,255,261,267,274,279,281,286,291,294,295,297,300,307,308,309,310,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,346,352,353,364,369,378,],[25,33,40,44,-83,-81,-11,-3,-4,-2,-15,-9,-14,109,-6,-7,-8,-13,-5,123,-29,-28,109,-103,109,-141,-140,-88,-90,109,-139,-99,145,109,-87,-142,-101,-12,-10,123,109,-100,-22,-17,-93,-92,-91,-105,109,-102,-106,109,202,-94,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,224,-36,-108,-20,-89,109,-235,-35,109,-107,109,-104,-18,109,-44,-111,-143,-82,109,109,109,-81,109,-99,109,109,-109,109,-23,-43,109,109,109,109,109,-187,-177,-188,-179,-182,-185,-189,-178,-186,109,-183,-184,-180,-181,-99,-110,109,109,109,-235,]),'NOTEQUALS':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,147,150,152,200,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,238,246,248,249,250,281,284,294,299,301,314,333,335,336,338,339,345,346,348,352,360,],[-103,-88,-90,-99,-114,-136,-87,154,-101,154,-137,-138,-93,-92,-91,-105,-102,-106,-94,154,154,-108,-89,-125,-118,-126,-133,-124,154,-129,-131,-117,-121,-130,-132,-119,-120,-128,154,-127,-123,-122,-107,-104,154,154,154,-111,-143,-99,154,-109,154,154,154,154,154,154,154,154,154,-99,154,-110,154,]),'EQEQ':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,147,150,152,200,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,238,246,248,249,250,281,284,294,299,301,314,333,335,336,338,339,345,346,348,352,360,],[-103,-88,-90,-99,-114,-136,-87,161,-101,161,-137,-138,-93,-92,-91,-105,-102,-106,-94,161,161,-108,-89,-125,-118,-126,-133,-124,161,-129,-131,-117,-121,-130,-132,-119,-120,-128,161,-127,-123,-122,-107,-104,161,161,161,-111,-143,-99,161,-109,161,161,161,161,161,161,161,161,161,-99,161,-110,161,]),'GOTO':([229,242,243,300,307,378,],[-235,264,-44,-43,264,-235,]),'XOREQUAL':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,147,150,193,194,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,246,249,250,281,283,284,294,345,346,352,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-60,-62,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-61,-111,-143,-99,321,-235,-109,-235,-99,-110,]),'PRINT':([229,242,243,300,307,378,],[-235,270,-44,-43,270,-235,]),'LESSTHAN':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,147,150,152,200,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,238,246,248,249,250,281,284,294,299,301,314,333,335,336,338,339,345,346,348,352,360,],[-103,-88,-90,-99,-114,-136,-87,165,-101,165,-137,-138,-93,-92,-91,-105,-102,-106,-94,165,165,-108,-89,165,165,-126,165,165,165,-129,-131,165,-121,-130,-132,-119,-120,-128,165,-127,165,-122,-107,-104,165,165,165,-111,-143,-99,165,-109,165,165,165,165,165,165,165,165,165,-99,165,-110,165,]),'COLON':([92,97,98,101,105,106,110,114,135,137,140,141,142,143,144,146,147,148,150,193,194,198,199,200,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,246,248,249,250,268,281,294,352,370,371,377,],[-103,-88,-90,-99,-114,-136,-87,-101,-235,-137,-138,-93,-92,-91,-105,-102,-106,-235,-94,-60,-62,235,-135,-134,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-61,295,-111,-143,307,-172,-109,-110,378,-202,-201,]),'GREATERTHAN_EQUAL':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,147,150,152,200,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,238,246,248,249,250,281,284,294,299,301,314,333,335,336,338,339,345,346,348,352,360,],[-103,-88,-90,-99,-114,-136,-87,171,-101,171,-137,-138,-93,-92,-91,-105,-102,-106,-94,171,171,-108,-89,171,171,-126,171,171,171,-129,-131,171,-121,-130,-132,-119,-120,-128,171,-127,171,-122,-107,-104,171,171,171,-111,-143,-99,171,-109,171,171,171,171,171,171,171,171,171,-99,171,-110,171,]),'LSHIFT':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,147,150,152,200,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,238,246,248,249,250,281,284,294,299,301,314,333,335,336,338,339,345,346,348,352,360,],[-103,-88,-90,-99,-114,-136,-87,167,-101,167,-137,-138,-93,-92,-91,-105,-102,-106,-94,167,167,-108,-89,167,167,-126,167,167,167,-129,167,167,167,167,-132,167,167,-128,167,-127,167,167,-107,-104,167,167,167,-111,-143,-99,167,-109,167,167,167,167,167,167,167,167,167,-99,167,-110,167,]),'MULTIPLY':([32,34,35,41,46,55,64,82,85,90,92,93,94,95,96,97,98,99,100,101,105,106,109,110,111,112,113,114,115,119,121,123,126,135,137,140,141,142,143,144,145,146,147,148,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,184,186,188,200,201,202,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,229,231,232,233,234,235,236,238,242,243,246,248,249,250,253,255,261,267,274,279,281,284,286,291,294,295,299,300,301,307,308,309,310,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,333,335,336,338,339,345,346,348,352,353,360,364,369,378,],[-57,55,-56,55,55,55,94,55,-58,94,-103,94,-141,-140,55,-88,-90,94,-139,-99,-114,-136,94,-87,164,-142,55,-101,55,-59,55,55,94,164,-137,-138,-93,-92,-91,-105,94,-102,-106,94,-94,55,164,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,55,-36,-56,164,-108,55,-89,164,164,-126,164,164,164,164,164,164,164,164,-132,164,164,164,164,-127,164,164,94,55,-235,55,-35,94,-107,94,-104,164,94,-44,164,164,-111,-143,55,94,94,94,-81,94,-99,164,94,94,-109,94,164,-43,164,94,94,94,94,164,94,-187,-177,-188,-179,-182,-185,-189,-178,-186,94,-183,-184,-180,-181,164,164,164,164,164,164,-99,164,-110,94,164,94,94,-235,]),'RSHIFT':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,147,150,152,200,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,238,246,248,249,250,281,284,294,299,301,314,333,335,336,338,339,345,346,348,352,360,],[-103,-88,-90,-99,-114,-136,-87,159,-101,159,-137,-138,-93,-92,-91,-105,-102,-106,-94,159,159,-108,-89,159,159,-126,159,159,159,-129,159,159,159,159,-132,159,159,-128,159,-127,159,159,-107,-104,159,159,159,-111,-143,-99,159,-109,159,159,159,159,159,159,159,159,159,-99,159,-110,159,]),'MINUS':([64,90,92,93,94,95,97,98,99,100,101,105,106,109,110,111,112,114,126,135,137,140,141,142,143,144,145,146,147,148,150,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,200,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,229,233,234,235,236,238,242,243,246,248,249,250,255,261,267,274,279,281,284,286,291,294,295,299,300,301,307,308,309,310,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,333,335,336,338,339,345,346,348,352,353,360,364,369,378,],[95,95,-103,95,-141,-140,-88,-90,95,-139,-99,-114,-136,95,-87,160,-142,-101,95,160,-137,-138,-93,-92,-91,-105,95,-102,-106,95,-94,160,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,160,-108,-89,160,160,-126,160,160,160,-129,-131,160,160,-130,-132,160,160,-128,160,-127,160,160,95,-235,95,-107,95,-104,160,95,-44,160,160,-111,-143,95,95,95,-81,95,-99,160,95,95,-109,95,160,-43,160,95,95,95,95,160,95,-187,-177,-188,-179,-182,-185,-189,-178,-186,95,-183,-184,-180,-181,160,160,160,160,160,160,-99,160,-110,95,160,95,95,-235,]),'DOT':([13,25,47,48,60,92,97,98,101,106,110,114,132,141,142,143,144,146,147,150,188,201,204,234,236,249,250,281,294,346,352,],[30,-235,-229,30,91,-103,-88,-90,-99,149,-87,-101,-228,-93,-92,-91,-105,-102,-106,-94,91,-108,-89,-107,-104,-111,-143,-99,-109,-99,-110,]),'LCURL':([54,56,57,59,61,62,63,66,67,70,71,73,88,89,92,97,98,101,105,106,110,114,116,118,121,122,135,136,137,138,139,140,141,142,143,144,146,147,150,175,177,178,179,180,181,183,186,193,194,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,229,232,234,236,239,242,243,246,249,250,252,256,263,274,278,282,284,289,290,294,297,300,307,310,314,330,331,335,341,342,343,344,345,346,347,348,349,351,352,356,364,368,375,378,379,],[-11,-3,-4,-2,-15,-9,-14,-6,-7,-8,-13,-5,-29,-28,-103,-88,-90,-99,-114,-136,-87,-101,-12,-10,-235,-85,-235,-100,-137,-22,-17,-138,-93,-92,-91,-105,-102,-106,-94,226,-33,-34,-30,-32,-31,229,-36,-60,-62,-108,-20,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-235,-35,-107,-104,-18,-81,-44,-61,-111,-143,-82,-167,-168,-81,-169,-166,-173,229,-170,-109,-23,-43,-81,-235,-81,-174,-175,-81,-205,-204,229,-206,-207,-99,355,-78,-176,-191,-110,229,-235,-208,-81,-235,229,]),'RSQUARE':([54,56,57,59,61,62,63,64,66,67,70,71,73,88,89,92,97,98,101,105,106,108,110,111,114,116,118,136,137,138,139,140,141,142,143,144,146,147,150,173,174,199,200,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,235,236,239,247,248,249,250,252,294,297,336,352,],[-11,-3,-4,-2,-15,-9,-14,96,-6,-7,-8,-13,-5,-29,-28,-103,-88,-90,-99,-114,-136,151,-87,-21,-101,-12,-10,-100,-137,-22,-17,-138,-93,-92,-91,-105,-102,-106,-94,-19,225,-135,236,-108,-20,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-235,-104,-18,294,-134,-111,-143,-82,-109,-23,352,-110,]),'COMPARE_OR':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,147,150,152,200,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,238,246,248,249,250,281,284,294,299,301,314,333,335,336,338,339,345,346,348,352,360,],[-103,-88,-90,-99,-114,-136,-87,158,-101,158,-137,-138,-93,-92,-91,-105,-102,-106,-94,158,158,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,158,158,158,-111,-143,-99,158,-109,158,158,158,158,158,158,158,158,158,-99,158,-110,158,]),'RPAREN':([25,33,40,44,47,48,52,53,54,56,57,59,61,62,63,66,67,70,71,73,76,77,79,80,88,89,92,97,98,101,105,106,110,114,116,118,123,132,133,135,136,137,138,139,140,141,142,143,144,145,146,147,150,152,185,187,189,190,192,193,194,195,196,197,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,230,234,236,237,238,239,245,246,249,250,252,294,297,352,],[-235,-235,-235,-235,-229,83,87,-53,-11,-3,-4,-2,-15,-9,-14,-6,-7,-8,-13,-5,124,-74,129,-66,-29,-28,-103,-88,-90,-99,-114,-136,-87,-101,-12,-10,186,-228,-52,-235,-100,-137,-22,-17,-138,-93,-92,-91,-105,-235,-102,-106,-94,204,-40,232,-37,-73,-65,-60,-62,-113,234,-112,-108,-20,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-39,-107,-104,249,250,-18,-38,-61,-111,-143,-82,-109,-23,-110,]),'DEFER':([229,242,243,300,307,378,],[-235,261,-44,-43,261,-235,]),'SEMICOLON':([1,6,7,12,15,16,17,18,19,22,26,31,39,42,43,45,49,50,54,56,57,59,61,62,63,66,67,69,70,71,73,78,81,83,84,86,87,88,89,92,97,98,101,105,106,110,114,116,118,120,121,122,124,125,127,128,129,130,131,134,135,136,137,138,139,140,141,142,143,144,146,147,150,176,177,178,179,180,181,182,186,191,193,194,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,227,228,229,232,234,236,239,242,243,246,249,250,251,252,254,256,257,258,259,260,262,263,265,266,267,269,271,272,273,274,275,276,277,278,280,281,282,284,285,287,288,290,292,293,294,297,298,299,300,301,302,303,304,305,306,307,310,311,312,313,330,331,332,333,334,337,338,339,340,342,345,346,348,349,350,352,353,354,357,358,359,360,361,363,367,372,374,376,378,380,382,383,],[5,-224,-225,24,-49,36,-48,-45,-46,-47,-226,-50,-71,-68,-67,-63,-230,-234,-11,-3,-4,-2,-15,-9,-14,-6,-7,-54,-8,-13,-5,-235,-70,-227,132,133,-51,-29,-28,-103,-88,-90,-99,-114,-136,-87,-101,-12,-10,-82,-235,-82,-72,190,-77,-75,-64,192,-69,-55,-235,-100,-137,-22,-17,-138,-93,-92,-91,-105,-102,-106,-94,-79,-33,-34,-30,-32,-31,-80,-36,-76,-60,-62,-108,-20,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-84,-86,-235,-35,-107,-104,-18,-235,-44,-61,-111,-143,296,-82,-149,-167,-159,300,-152,-156,-163,-168,-145,-158,-235,-195,-157,-155,-150,-81,-147,-153,-235,-169,-144,-99,-166,-173,-235,-146,-154,-170,-148,-41,-109,-23,-27,-164,-43,-165,-172,-218,-211,-213,-212,-235,-235,-217,-215,-216,-174,-175,-214,-162,-82,-171,-161,-160,353,-166,-173,-99,-78,-176,-151,-110,-235,-82,-210,-209,364,-207,-203,-82,-235,-196,-194,-190,-235,-192,-82,-193,]),'IF':([229,242,243,300,307,375,378,],[-235,291,-44,-43,291,291,-235,]),'FALLTHROUGH':([229,242,243,300,307,378,],[-235,262,-44,-43,262,-235,]),'RSHIFT_EQUAL':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,147,150,193,194,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,246,249,250,281,283,284,294,345,346,352,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-60,-62,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-61,-111,-143,-99,318,-235,-109,-235,-99,-110,]),'MODEQUAL':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,147,150,193,194,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,246,249,250,281,283,284,294,345,346,352,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-60,-62,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-61,-111,-143,-99,320,-235,-109,-235,-99,-110,]),'RCURL':([226,229,240,241,242,243,244,296,300,355,362,365,366,373,378,381,],[-235,-235,252,-26,-42,-44,293,-25,-43,-197,-235,-198,372,-199,-235,-200,]),'PLUS':([64,90,92,93,94,95,97,98,99,100,101,105,106,109,110,111,112,114,126,135,137,140,141,142,143,144,145,146,147,148,150,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,200,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,229,233,234,235,236,238,242,243,246,248,249,250,255,261,267,274,279,281,284,286,291,294,295,299,300,301,307,308,309,310,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,333,335,336,338,339,345,346,348,352,353,360,364,369,378,],[100,100,-103,100,-141,-140,-88,-90,100,-139,-99,-114,-136,100,-87,163,-142,-101,100,163,-137,-138,-93,-92,-91,-105,100,-102,-106,100,-94,163,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,163,-108,-89,163,163,-126,163,163,163,-129,-131,163,163,-130,-132,163,163,-128,163,-127,163,163,100,-235,100,-107,100,-104,163,100,-44,163,163,-111,-143,100,100,100,-81,100,-99,163,100,100,-109,100,163,-43,163,100,100,100,100,163,100,-187,-177,-188,-179,-182,-185,-189,-178,-186,100,-183,-184,-180,-181,163,163,163,163,163,163,-99,163,-110,100,163,100,100,-235,]),'GO':([229,242,243,300,307,378,],[-235,255,-44,-43,255,-235,]),'SWITCH':([229,242,243,300,307,378,],[-235,279,-44,-43,279,-235,]),'ANDXOR_EQUAL':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,147,150,193,194,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,246,249,250,281,283,284,294,345,346,352,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-60,-62,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-61,-111,-143,-99,324,-235,-109,-235,-99,-110,]),'COMMA':([32,35,54,56,57,59,61,62,63,66,67,70,71,73,85,88,89,92,97,98,101,105,106,110,114,116,118,119,135,136,137,138,139,140,141,142,143,144,146,147,150,185,187,188,189,193,194,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,230,234,236,239,245,246,249,250,252,281,284,294,297,345,346,352,],[51,74,-11,-3,-4,-2,-15,-9,-14,-6,-7,-8,-13,-5,-58,-29,-28,-103,-88,-90,-99,-114,-136,-87,-101,-12,-10,-59,-235,-100,-137,-22,-17,-138,-93,-92,-91,-105,-102,-106,-94,-40,231,74,-37,233,-62,-108,-20,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-39,-107,-104,-18,-38,-61,-111,-143,-82,-99,-235,-109,-23,-235,-99,-110,]),'DIVIDE_EQUAL':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,147,150,193,194,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,246,249,250,281,283,284,294,345,346,352,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-60,-62,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-61,-111,-143,-99,329,-235,-109,-235,-99,-110,]),'INCREMENT':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,147,150,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,249,250,281,284,294,345,346,352,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-111,-143,-99,330,-109,330,-99,-110,]),'IMPORT':([5,8,9,24,],[-235,-220,13,-221,]),'IDENTIFIER':([2,13,14,20,21,23,25,32,33,34,35,40,41,44,46,47,48,51,52,53,55,64,72,74,76,77,79,80,82,85,90,91,93,94,95,96,99,100,109,112,113,115,119,121,123,126,132,133,145,148,149,151,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,184,186,188,190,192,202,224,225,226,229,231,232,233,235,240,241,242,243,253,255,261,264,267,274,277,279,285,286,291,295,296,300,307,308,309,310,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,353,364,369,378,],[7,7,35,37,35,46,-235,-57,-235,60,-56,-235,60,-235,60,-229,7,85,35,-53,60,101,118,119,35,-74,46,-66,60,-58,101,60,101,-141,-140,60,101,-139,101,-142,60,60,-59,60,188,101,-228,-52,101,101,201,60,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,60,-36,-56,-73,-65,60,101,60,-235,-235,188,-35,101,101,35,-26,281,-44,60,101,101,302,101,-81,302,101,302,101,101,101,-25,-43,281,101,101,346,101,-187,-177,-188,-179,-182,-185,-189,-178,-186,101,-183,-184,-180,-181,101,346,101,-235,]),'SHORT_ASSIGNMENT':([281,346,],[315,315,]),'$end':([3,4,5,8,9,10,11,24,36,],[-1,0,-235,-220,-235,-219,-223,-221,-222,]),'IMAGINARY_LIT':([64,90,93,94,95,99,100,102,109,112,126,145,148,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,224,229,233,235,242,243,255,261,267,274,279,286,291,295,300,307,308,309,310,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,353,364,369,378,],[-97,-97,-97,-141,-140,-97,-139,141,-97,-142,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-235,-97,-97,-97,-44,-97,-97,-97,-81,-97,-97,-97,-97,-43,-97,-97,-97,-97,-97,-187,-177,-188,-179,-182,-185,-189,-178,-186,-97,-183,-184,-180,-181,-97,-97,-97,-235,]),'PD':([270,],[309,]),'MODULO':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,147,150,152,200,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,238,246,248,249,250,281,284,294,299,301,314,333,335,336,338,339,345,346,348,352,360,],[-103,-88,-90,-99,-114,-136,-87,169,-101,169,-137,-138,-93,-92,-91,-105,-102,-106,-94,169,169,-108,-89,169,169,-126,169,169,169,169,169,169,169,169,-132,169,169,169,169,-127,169,169,-107,-104,169,169,169,-111,-143,-99,169,-109,169,169,169,169,169,169,169,169,169,-99,169,-110,169,]),'STRING':([32,34,35,41,46,55,82,85,91,96,113,115,119,121,123,151,184,186,188,202,225,231,232,253,],[-57,62,-56,62,62,62,62,-58,62,62,62,62,-59,62,62,62,62,-36,-56,62,62,62,-35,62,]),'FOR':([229,242,243,300,307,378,],[-235,274,-44,-43,274,-235,]),'PACKAGE':([0,],[2,]),'COMPARE_AND':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,147,150,152,200,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,238,246,248,249,250,281,284,294,299,301,314,333,335,336,338,339,345,346,348,352,360,],[-103,-88,-90,-99,-114,-136,-87,168,-101,168,-137,-138,-93,-92,-91,-105,-102,-106,-94,168,168,-108,-89,-125,-118,-126,-133,-124,168,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,168,168,168,-111,-143,-99,168,-109,168,168,168,168,168,168,168,168,168,-99,168,-110,168,]),'LSHIFT_EQUAL':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,147,150,193,194,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,246,249,250,281,283,284,294,345,346,352,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-60,-62,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-61,-111,-143,-99,316,-235,-109,-235,-99,-110,]),'XOR':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,147,150,152,200,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,238,246,248,249,250,281,284,294,299,301,314,333,335,336,338,339,345,346,348,352,360,],[-103,-88,-90,-99,-114,-136,-87,157,-101,157,-137,-138,-93,-92,-91,-105,-102,-106,-94,157,157,-108,-89,-125,157,-126,-133,-124,157,-129,-131,157,-121,-130,-132,-119,-120,-128,157,-127,157,-122,-107,-104,157,157,157,-111,-143,-99,157,-109,157,157,157,157,157,157,157,157,157,-99,157,-110,157,]),'EQUALS':([46,54,56,57,58,59,61,62,63,66,67,70,71,73,78,88,89,92,97,98,101,105,106,110,114,116,118,136,137,138,139,140,141,142,143,144,146,147,150,193,194,201,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,239,246,249,250,252,281,283,284,294,297,345,346,352,],[82,-11,-3,-4,90,-2,-15,-9,-14,-6,-7,-8,-13,-5,126,-29,-28,-103,-88,-90,-99,-114,-136,-87,-101,-12,-10,-100,-137,-22,-17,-138,-93,-92,-91,-105,-102,-106,-94,-60,-62,-108,-20,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-18,-61,-111,-143,-82,-99,322,-235,-109,-23,-235,-99,-110,]),'ELSE':([293,363,367,],[-41,-82,375,]),'PLUSEQUAL':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,147,150,193,194,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,246,249,250,281,283,284,294,345,346,352,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-60,-62,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-61,-111,-143,-99,323,-235,-109,-235,-99,-110,]),'GREATERTHAN':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,147,150,152,200,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,238,246,248,249,250,281,284,294,299,301,314,333,335,336,338,339,345,346,348,352,360,],[-103,-88,-90,-99,-114,-136,-87,166,-101,166,-137,-138,-93,-92,-91,-105,-102,-106,-94,166,166,-108,-89,166,166,-126,166,166,166,-129,-131,166,-121,-130,-132,-119,-120,-128,166,-127,166,-122,-107,-104,166,166,166,-111,-143,-99,166,-109,166,166,166,166,166,166,166,166,166,-99,166,-110,166,]),'LSQUARE':([32,34,35,41,46,55,65,82,85,92,96,97,98,101,106,110,113,114,115,119,121,123,141,142,143,144,146,147,150,151,184,186,188,201,202,204,225,231,232,234,236,249,250,253,281,294,346,352,],[-57,64,-56,64,64,64,115,64,-58,-103,64,-88,-90,-99,148,-87,64,-101,64,-59,64,64,-93,-92,-91,-105,-102,-106,-94,64,64,-36,-56,-108,64,-89,64,64,-35,-107,-104,-111,-143,64,-99,-109,-99,-110,]),'VAR':([5,8,9,10,11,24,36,229,242,243,300,307,378,],[-235,-220,-235,21,-223,-221,-222,-235,21,-44,-43,21,-235,]),'OREQUAL':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,147,150,193,194,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,246,249,250,281,283,284,294,345,346,352,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-60,-62,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-61,-111,-143,-99,327,-235,-109,-235,-99,-110,]),'TYPECAST':([64,90,93,94,95,99,100,109,112,126,145,148,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,224,229,233,235,242,243,255,261,267,274,279,286,291,295,300,307,308,309,310,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,353,364,369,378,],[113,113,113,-141,-140,113,-139,113,-142,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,-235,113,113,113,-44,113,113,113,-81,113,113,113,113,-43,113,113,113,113,113,-187,-177,-188,-179,-182,-185,-189,-178,-186,113,-183,-184,-180,-181,113,113,113,-235,]),'AND':([64,90,92,93,94,95,97,98,99,100,101,105,106,109,110,111,112,114,126,135,137,140,141,142,143,144,145,146,147,148,150,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,200,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,229,233,234,235,236,238,242,243,246,248,249,250,255,261,267,274,279,281,284,286,291,294,295,299,300,301,307,308,309,310,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,333,335,336,338,339,345,346,348,352,353,360,364,369,378,],[112,112,-103,112,-141,-140,-88,-90,112,-139,-99,-114,-136,112,-87,156,-142,-101,112,156,-137,-138,-93,-92,-91,-105,112,-102,-106,112,-94,156,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,156,-108,-89,-125,156,-126,-133,156,156,-129,-131,156,-121,-130,-132,-119,-120,-128,156,-127,156,-122,112,-235,112,-107,112,-104,156,112,-44,156,156,-111,-143,112,112,112,-81,112,-99,156,112,112,-109,112,156,-43,156,112,112,112,112,156,112,-187,-177,-188,-179,-182,-185,-189,-178,-186,112,-183,-184,-180,-181,156,156,156,156,156,156,-99,156,-110,112,156,112,112,-235,]),'MAP':([32,34,35,41,46,55,82,85,96,113,115,119,121,123,151,184,186,188,202,225,231,232,253,],[-57,65,-56,65,65,65,65,-58,65,65,65,-59,65,65,65,65,-36,-56,65,65,65,-35,65,]),'RETURN':([229,242,243,300,307,378,],[-235,267,-44,-43,267,-235,]),'STRUCT':([32,34,35,41,46,55,68,82,85,96,113,115,117,119,121,123,151,184,186,188,202,225,231,232,253,],[-57,-16,-56,-16,-16,-16,-24,-16,-58,-16,-16,-16,175,-59,-16,-16,-16,-16,-36,-56,-16,-16,-16,-35,-16,]),'CASE':([242,243,300,355,362,365,366,373,378,381,],[-42,-44,-43,-197,-235,-198,369,-199,-235,-200,]),'LESSTHAN_EQUAL':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,147,150,152,200,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,238,246,248,249,250,281,284,294,299,301,314,333,335,336,338,339,345,346,348,352,360,],[-103,-88,-90,-99,-114,-136,-87,162,-101,162,-137,-138,-93,-92,-91,-105,-102,-106,-94,162,162,-108,-89,162,162,-126,162,162,162,-129,-131,162,-121,-130,-132,-119,-120,-128,162,-127,162,-122,-107,-104,162,162,162,-111,-143,-99,162,-109,162,162,162,162,162,162,162,162,162,-99,162,-110,162,]),'INT':([32,34,35,41,46,55,82,85,91,96,113,115,119,121,123,151,184,186,188,202,225,231,232,253,],[-57,66,-56,66,66,66,66,-58,66,66,66,66,-59,66,66,66,66,-36,-56,66,66,66,-35,66,]),'TIMESEQUAL':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,147,150,193,194,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,246,249,250,281,283,284,294,345,346,352,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-60,-62,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-61,-111,-143,-99,328,-235,-109,-235,-99,-110,]),'MINUSEQUAL':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,147,150,193,194,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,246,249,250,281,283,284,294,345,346,352,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-60,-62,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-61,-111,-143,-99,319,-235,-109,-235,-99,-110,]),'FLOAT':([32,34,35,41,46,55,82,85,91,96,113,115,119,121,123,151,184,186,188,202,225,231,232,253,],[-57,67,-56,67,67,67,67,-58,67,67,67,67,-59,67,67,67,67,-36,-56,67,67,67,-35,67,]),'FLOAT_LIT':([64,90,93,94,95,99,100,103,109,112,126,145,148,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,224,229,233,235,242,243,255,261,267,274,279,286,291,295,300,307,308,309,310,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,353,364,369,378,],[-96,-96,-96,-141,-140,-96,-139,142,-96,-142,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-235,-96,-96,-96,-44,-96,-96,-96,-81,-96,-96,-96,-96,-43,-96,-96,-96,-96,-96,-187,-177,-188,-179,-182,-185,-189,-178,-186,-96,-183,-184,-180,-181,-96,-96,-96,-235,]),'DEFAULT':([242,243,300,355,362,365,366,373,378,381,],[-42,-44,-43,-197,-235,-198,371,-199,-235,-200,]),'BREAK':([229,242,243,300,307,378,],[-235,285,-44,-43,285,-235,]),'INT_LIT':([64,90,93,94,95,99,100,104,109,112,126,145,148,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,224,229,233,235,242,243,255,261,267,274,279,286,291,295,300,307,308,309,310,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,353,364,369,378,],[-95,-95,-95,-141,-140,-95,-139,143,-95,-142,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-235,-95,-95,-95,-44,-95,-95,-95,-81,-95,-95,-95,-95,-43,-95,-95,-95,-95,-95,-187,-177,-188,-179,-182,-185,-189,-178,-186,-95,-183,-184,-180,-181,-95,-95,-95,-235,]),'CONTINUE':([229,242,243,300,307,378,],[-235,277,-44,-43,277,-235,]),'BOOL':([32,34,35,41,46,55,82,85,91,96,113,115,119,121,123,151,184,186,188,202,225,231,232,253,],[-57,70,-56,70,70,70,70,-58,70,70,70,70,-59,70,70,70,70,-36,-56,70,70,70,-35,70,]),'PS':([270,],[308,]),'STRING_LIT':([7,13,25,27,28,29,30,47,48,64,90,93,94,95,99,100,107,109,112,126,132,145,148,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,224,229,233,235,242,243,255,261,267,274,279,286,291,295,300,307,308,309,310,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,353,364,369,378,],[-225,-235,-235,-233,-232,50,-231,-229,-235,-98,-98,-98,-141,-140,-98,-139,150,-98,-142,-98,-228,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-235,-98,-98,-98,-44,-98,-98,-98,-81,-98,-98,-98,-98,-43,-98,-98,-98,-98,-98,-187,-177,-188,-179,-182,-185,-189,-178,-186,-98,-183,-184,-180,-181,-98,-98,-98,-235,]),'NOT':([64,90,93,94,95,99,100,109,112,126,145,148,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,224,229,233,235,242,243,255,261,267,274,279,286,291,295,300,307,308,309,310,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,353,364,369,378,],[99,99,99,-141,-140,99,-139,99,-142,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-235,99,99,99,-44,99,99,99,-81,99,99,99,99,-43,99,99,99,99,99,-187,-177,-188,-179,-182,-185,-189,-178,-186,99,-183,-184,-180,-181,99,99,99,-235,]),'ANDEQUAL':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,147,150,193,194,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,246,249,250,281,283,284,294,345,346,352,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-60,-62,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-61,-111,-143,-99,326,-235,-109,-235,-99,-110,]),'DECREMENT':([92,97,98,101,105,106,110,114,137,140,141,142,143,144,146,147,150,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,249,250,281,284,294,345,346,352,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-111,-143,-99,331,-109,331,-99,-110,]),'TYPE':([5,8,9,10,11,24,32,34,35,36,41,46,55,82,85,91,96,113,115,119,121,123,151,184,186,188,202,225,229,231,232,242,243,253,300,307,378,],[-235,-220,-235,23,-223,-221,-57,72,-56,-222,72,72,72,72,-58,72,72,72,72,-59,72,72,72,72,-36,-56,72,72,-235,72,-35,23,-44,72,-43,23,-235,]),'OR':([92,97,98,101,105,106,110,111,114,135,137,140,141,142,143,144,146,147,150,152,200,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,236,238,246,248,249,250,281,284,294,299,301,314,333,335,336,338,339,345,346,348,352,360,],[-103,-88,-90,-99,-114,-136,-87,170,-101,170,-137,-138,-93,-92,-91,-105,-102,-106,-94,170,170,-108,-89,-125,170,-126,-133,-124,170,-129,-131,170,-121,-130,-132,-119,-120,-128,170,-127,-123,-122,-107,-104,170,170,170,-111,-143,-99,170,-109,170,170,170,170,170,170,170,170,170,-99,170,-110,170,]),'SCAN':([229,242,243,300,307,378,],[-235,286,-44,-43,286,-235,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'FunctionBody':([183,],[227,]),'Conversion':([64,90,93,99,109,126,145,148,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,224,233,235,242,255,261,267,279,286,291,295,307,308,309,310,315,325,353,364,369,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'ContinueStmt':([242,307,],[254,254,]),'ExpressionRep':([135,284,345,],[193,193,193,]),'ExpressionStmt':([242,307,310,364,],[256,256,256,256,]),'ScanStmt':([242,307,],[257,257,]),'Statement':([242,307,],[258,337,]),'IfStmt':([242,307,375,],[259,259,380,]),'FallThroughStmt':([242,307,],[260,260,]),'StatementRep':([229,378,],[242,242,]),'TypeToken':([34,41,46,55,82,91,96,113,115,121,123,151,184,202,225,231,253,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'AliasDecl':([23,79,],[43,43,]),'PackageNameDotOpt':([13,48,],[29,29,]),'TypeName':([34,41,46,55,82,91,96,113,115,121,123,151,184,202,225,231,253,],[59,59,59,59,59,136,59,59,59,59,59,59,59,59,59,59,59,]),'ExprCaseClause':([366,],[373,]),'ParametersList':([123,],[187,]),'ParameterDecl':([123,231,],[189,245,]),'FuncScope':([68,],[117,]),'FunctionName':([20,],[38,]),'LabeledStmt':([242,307,],[265,265,]),'KeyType':([115,],[174,]),'StatementList':([229,378,],[244,381,]),'TypeAssertion':([106,],[147,]),'ConditionOpt':([353,],[359,]),'ElementType':([96,151,225,],[139,203,239,]),'RetTypeSet':([122,],[183,]),'PointerType':([34,41,46,55,82,96,113,115,121,123,151,184,202,225,231,253,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'EndScope':([120,122,252,334,354,363,382,],[176,182,297,350,361,367,383,]),'VarSpecRep':([40,],[76,]),'VarDecl':([10,242,307,],[22,22,22,]),'PrintStmt':([242,307,],[266,266,]),'ConstSpecRep':([33,],[52,]),'Operand':([64,90,93,99,109,126,145,148,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,224,233,235,242,255,261,267,279,286,291,295,307,308,309,310,315,325,353,364,369,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'TypeSpec':([23,79,],[45,130,]),'Parameters':([75,121,],[121,177,]),'UnaryOp':([64,90,93,99,109,126,145,148,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,224,233,235,242,255,261,267,279,286,291,295,307,308,309,310,315,325,353,364,369,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'PackageName':([2,13,48,],[6,28,28,]),'SourceFile':([0,],[3,]),'ExpressionListPureOpt':([267,],[304,]),'Label':([242,264,277,285,307,],[268,303,313,313,268,]),'FunctionDecl':([10,],[15,]),'TopLevelDecl':([10,],[16,]),'ExprSwitchStmt':([242,307,],[269,269,]),'IdentifierList':([14,21,52,76,123,231,240,],[34,41,34,41,184,184,253,]),'IdentifierRep':([14,21,52,76,123,231,240,],[32,32,32,32,32,32,32,]),'Type':([34,41,46,55,82,96,113,115,121,123,151,184,202,225,231,253,],[58,78,81,88,131,138,172,173,178,185,138,230,237,138,185,298,]),'ImportDeclRep':([5,],[9,]),'GoStmt':([242,307,],[271,271,]),'DeferStmt':([242,307,],[272,272,]),'PackageClause':([0,],[1,]),'ResultOpt':([121,],[179,]),'Selector':([106,],[146,]),'IncDecStmt':([242,307,310,364,],[263,263,263,263,]),'GotoStmt':([242,307,],[273,273,]),'TopLevelDeclRep':([9,],[10,]),'C':([64,90,93,99,109,126,145,148,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,224,233,235,242,255,261,267,279,286,291,295,307,308,309,310,315,325,353,364,369,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'PrimaryExpr':([64,90,93,99,109,126,145,148,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,224,233,235,242,255,261,267,279,286,291,295,307,308,309,310,315,325,353,364,369,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'S':([64,90,93,99,109,126,145,148,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,224,233,235,242,255,261,267,279,286,291,295,307,308,309,310,315,325,353,364,369,],[107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,]),'StartSwitch':([355,],[362,]),'assign_op':([283,],[325,]),'Signature':([75,],[122,]),'Block':([183,289,343,356,379,],[228,334,354,363,382,]),'ExprCaseClauseList':([362,],[366,]),'SwitchStmt':([242,307,],[276,276,]),'VarSpec':([21,76,],[39,125,]),'Result':([121,],[181,]),'Assignment':([242,307,310,364,],[278,278,278,278,]),'ExpressionListTypeOpt':([145,],[196,]),'QualifiedIdent':([34,41,46,55,82,91,96,113,115,121,123,151,184,202,225,231,253,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'Literal':([64,90,93,99,109,126,145,148,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,224,233,235,242,255,261,267,279,286,291,295,307,308,309,310,315,325,353,364,369,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'ImportDecl':([9,],[12,]),'OperandName':([64,90,93,99,109,126,145,148,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,224,233,235,242,255,261,267,279,286,291,295,307,308,309,310,315,325,353,364,369,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'AssignOp':([283,],[317,]),'LabelOpt':([277,285,],[312,332,]),'FieldDeclRep':([226,],[240,]),'start':([0,],[4,]),'Declaration':([10,242,307,],[17,280,280,]),'Condition':([310,353,],[341,357,]),'StructType':([68,],[116,]),'ConstSpec':([14,52,],[31,86,]),'F':([64,90,93,99,109,126,145,148,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,224,233,235,242,255,261,267,279,286,291,295,307,308,309,310,315,325,353,364,369,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'epsilon':([5,9,13,25,33,40,44,48,78,121,135,145,148,226,229,235,242,267,277,284,285,307,310,345,353,362,364,367,378,],[8,11,27,47,53,77,80,27,127,180,194,195,199,241,243,199,282,305,311,194,311,282,342,194,358,365,282,374,243,]),'ConditionBlockOpt':([310,],[343,]),'ExpressionList':([90,126,145,242,267,307,310,325,364,369,],[134,191,197,283,306,283,283,349,283,377,]),'SimpleStmt':([242,307,310,364,],[287,287,340,368,]),'ImportSpecRep':([25,],[48,]),'Expression':([64,90,109,126,145,148,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,224,233,235,242,255,261,267,279,286,291,295,307,308,309,310,315,325,353,364,369,],[111,135,152,135,135,200,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,238,246,248,284,299,301,135,314,333,335,336,284,338,339,345,348,135,360,284,135,]),'ImportPath':([29,],[49,]),'ExprSwitchCase':([366,],[370,]),'ExpressionOpt':([148,235,],[198,247,]),'ST':([34,41,46,55,82,96,113,115,121,123,151,184,202,225,231,253,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'TypeExprListOpt':([34,],[69,]),'ReturnStmt':([242,307,],[275,275,]),'ConstDecl':([10,242,307,],[18,18,18,]),'Slice':([106,],[144,]),'ArrayType':([34,41,46,55,82,96,113,115,121,123,151,184,202,225,231,253,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'ForStmt':([242,307,],[288,288,]),'Function':([75,],[120,]),'ImportSpec':([13,48,],[26,84,]),'TypeLit':([34,41,46,55,82,96,113,115,121,123,151,184,202,225,231,253,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'TypeSpecRep':([44,],[79,]),'CreateScope':([38,242,274,307,314,335,375,],[75,289,310,289,347,351,379,]),'SliceType':([34,41,46,55,82,96,113,115,121,123,151,184,202,225,231,253,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'TypeDecl':([10,242,307,],[19,19,19,]),'BaseType':([55,],[89,]),'I':([64,90,93,99,109,126,145,148,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,224,233,235,242,255,261,267,279,286,291,295,307,308,309,310,315,325,353,364,369,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'IFSYM':([351,],[356,]),'UnaryExpr':([64,90,93,99,109,126,145,148,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,224,233,235,242,255,261,267,279,286,291,295,307,308,309,310,315,325,353,364,369,],[105,105,137,140,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'ArrayLength':([64,],[108,]),'MapType':([34,41,46,55,82,96,113,115,121,123,151,184,202,225,231,253,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'ForClause':([310,],[344,]),'ShortVarDecl':([242,307,310,364,],[290,290,290,290,]),'TypeDef':([23,79,],[42,42,]),'FieldDecl':([240,],[251,]),'BreakStmt':([242,307,],[292,292,]),'BasicLit':([64,90,93,99,109,126,145,148,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,224,233,235,242,255,261,267,279,286,291,295,307,308,309,310,315,325,353,364,369,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'ExpressionListOpt':([78,],[128,]),'ElseOpt':([367,],[376,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> SourceFile','start',1,'p_start','parser.py',202),
  ('Type -> TypeName','Type',1,'p_type','parser.py',211),
  ('Type -> TypeLit','Type',1,'p_type','parser.py',212),
  ('TypeName -> TypeToken','TypeName',1,'p_type_name','parser.py',216),
  ('TypeName -> QualifiedIdent','TypeName',1,'p_type_name','parser.py',217),
  ('TypeToken -> INT','TypeToken',1,'p_type_token','parser.py',230),
  ('TypeToken -> FLOAT','TypeToken',1,'p_type_token','parser.py',231),
  ('TypeToken -> BOOL','TypeToken',1,'p_type_token','parser.py',232),
  ('TypeToken -> STRING','TypeToken',1,'p_type_token','parser.py',233),
  ('TypeToken -> TYPE IDENTIFIER','TypeToken',2,'p_type_token','parser.py',234),
  ('TypeLit -> ArrayType','TypeLit',1,'p_type_lit','parser.py',270),
  ('TypeLit -> ST StructType','TypeLit',2,'p_type_lit','parser.py',271),
  ('TypeLit -> PointerType','TypeLit',1,'p_type_lit','parser.py',272),
  ('TypeLit -> MapType','TypeLit',1,'p_type_lit','parser.py',273),
  ('TypeLit -> SliceType','TypeLit',1,'p_type_lit','parser.py',274),
  ('ST -> <empty>','ST',0,'p_S_T','parser.py',281),
  ('SliceType -> LSQUARE RSQUARE ElementType','SliceType',3,'p_slice_type','parser.py',296),
  ('MapType -> MAP LSQUARE KeyType RSQUARE ElementType','MapType',5,'p_map_type','parser.py',305),
  ('KeyType -> Type','KeyType',1,'p_key_type','parser.py',312),
  ('ArrayType -> LSQUARE ArrayLength RSQUARE ElementType','ArrayType',4,'p_array_type','parser.py',319),
  ('ArrayLength -> Expression','ArrayLength',1,'p_array_length','parser.py',350),
  ('ElementType -> Type','ElementType',1,'p_element_type','parser.py',354),
  ('StructType -> FuncScope STRUCT LCURL FieldDeclRep RCURL EndScope','StructType',6,'p_struct_type','parser.py',359),
  ('FuncScope -> <empty>','FuncScope',0,'p_func_scope','parser.py',373),
  ('FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON','FieldDeclRep',3,'p_field_decl_rep','parser.py',384),
  ('FieldDeclRep -> epsilon','FieldDeclRep',1,'p_field_decl_rep','parser.py',385),
  ('FieldDecl -> IdentifierList Type','FieldDecl',2,'p_field_decl','parser.py',398),
  ('PointerType -> MULTIPLY BaseType','PointerType',2,'p_point_type','parser.py',432),
  ('BaseType -> Type','BaseType',1,'p_base_type','parser.py',439),
  ('Signature -> Parameters ResultOpt','Signature',2,'p_sign','parser.py',446),
  ('ResultOpt -> Result','ResultOpt',1,'p_result_opt','parser.py',464),
  ('ResultOpt -> epsilon','ResultOpt',1,'p_result_opt','parser.py',465),
  ('Result -> Parameters','Result',1,'p_result','parser.py',469),
  ('Result -> Type','Result',1,'p_result','parser.py',470),
  ('Parameters -> LPAREN ParametersList RPAREN','Parameters',3,'p_params','parser.py',475),
  ('Parameters -> LPAREN RPAREN','Parameters',2,'p_params','parser.py',476),
  ('ParametersList -> ParameterDecl','ParametersList',1,'p_param_list','parser.py',498),
  ('ParametersList -> ParametersList COMMA ParameterDecl','ParametersList',3,'p_param_list','parser.py',499),
  ('ParameterDecl -> IdentifierList Type','ParameterDecl',2,'p_param_decl','parser.py',509),
  ('ParameterDecl -> Type','ParameterDecl',1,'p_param_decl','parser.py',510),
  ('Block -> LCURL StatementList RCURL','Block',3,'p_block','parser.py',533),
  ('StatementList -> StatementRep','StatementList',1,'p_stat_list','parser.py',537),
  ('StatementRep -> StatementRep Statement SEMICOLON','StatementRep',3,'p_stat_rep','parser.py',541),
  ('StatementRep -> epsilon','StatementRep',1,'p_stat_rep','parser.py',542),
  ('Declaration -> ConstDecl','Declaration',1,'p_decl','parser.py',555),
  ('Declaration -> TypeDecl','Declaration',1,'p_decl','parser.py',556),
  ('Declaration -> VarDecl','Declaration',1,'p_decl','parser.py',557),
  ('TopLevelDecl -> Declaration','TopLevelDecl',1,'p_toplevel_decl','parser.py',561),
  ('TopLevelDecl -> FunctionDecl','TopLevelDecl',1,'p_toplevel_decl','parser.py',562),
  ('ConstDecl -> CONST ConstSpec','ConstDecl',2,'p_const_decl','parser.py',569),
  ('ConstDecl -> CONST LPAREN ConstSpecRep RPAREN','ConstDecl',4,'p_const_decl','parser.py',570),
  ('ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON','ConstSpecRep',3,'p_const_spec_rep','parser.py',577),
  ('ConstSpecRep -> epsilon','ConstSpecRep',1,'p_const_spec_rep','parser.py',578),
  ('ConstSpec -> IdentifierList TypeExprListOpt','ConstSpec',2,'p_const_spec','parser.py',587),
  ('TypeExprListOpt -> Type EQUALS ExpressionList','TypeExprListOpt',3,'p_type_expr_list','parser.py',609),
  ('IdentifierList -> IDENTIFIER','IdentifierList',1,'p_identifier_list','parser.py',623),
  ('IdentifierList -> IdentifierRep','IdentifierList',1,'p_identifier_list','parser.py',624),
  ('IdentifierRep -> IdentifierRep COMMA IDENTIFIER','IdentifierRep',3,'p_identifier_rep','parser.py',640),
  ('IdentifierRep -> IDENTIFIER COMMA IDENTIFIER','IdentifierRep',3,'p_identifier_rep','parser.py',641),
  ('ExpressionList -> Expression ExpressionRep','ExpressionList',2,'p_expr_list','parser.py',671),
  ('ExpressionRep -> ExpressionRep COMMA Expression','ExpressionRep',3,'p_expr_rep','parser.py',682),
  ('ExpressionRep -> epsilon','ExpressionRep',1,'p_expr_rep','parser.py',683),
  ('TypeDecl -> TYPE TypeSpec','TypeDecl',2,'p_type_decl','parser.py',701),
  ('TypeDecl -> TYPE LPAREN TypeSpecRep RPAREN','TypeDecl',4,'p_type_decl','parser.py',702),
  ('TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON','TypeSpecRep',3,'p_type_spec_rep','parser.py',709),
  ('TypeSpecRep -> epsilon','TypeSpecRep',1,'p_type_spec_rep','parser.py',710),
  ('TypeSpec -> AliasDecl','TypeSpec',1,'p_type_spec','parser.py',717),
  ('TypeSpec -> TypeDef','TypeSpec',1,'p_type_spec','parser.py',718),
  ('AliasDecl -> IDENTIFIER EQUALS Type','AliasDecl',3,'p_alias_decl','parser.py',722),
  ('TypeDef -> IDENTIFIER Type','TypeDef',2,'p_type_def','parser.py',734),
  ('VarDecl -> VAR VarSpec','VarDecl',2,'p_var_decl','parser.py',747),
  ('VarDecl -> VAR LPAREN VarSpecRep RPAREN','VarDecl',4,'p_var_decl','parser.py',748),
  ('VarSpecRep -> VarSpecRep VarSpec SEMICOLON','VarSpecRep',3,'p_var_spec_rep','parser.py',756),
  ('VarSpecRep -> epsilon','VarSpecRep',1,'p_var_spec_rep','parser.py',757),
  ('VarSpec -> IdentifierList Type ExpressionListOpt','VarSpec',3,'p_var_spec','parser.py',767),
  ('ExpressionListOpt -> EQUALS ExpressionList','ExpressionListOpt',2,'p_expr_list_opt','parser.py',853),
  ('ExpressionListOpt -> epsilon','ExpressionListOpt',1,'p_expr_list_opt','parser.py',854),
  ('ShortVarDecl -> IDENTIFIER SHORT_ASSIGNMENT Expression','ShortVarDecl',3,'p_short_var_decl','parser.py',864),
  ('FunctionDecl -> FUNC FunctionName CreateScope Function EndScope','FunctionDecl',5,'p_func_decl','parser.py',891),
  ('FunctionDecl -> FUNC FunctionName CreateScope Signature EndScope','FunctionDecl',5,'p_func_decl','parser.py',892),
  ('CreateScope -> <empty>','CreateScope',0,'p_create_scope','parser.py',909),
  ('EndScope -> <empty>','EndScope',0,'p_end_scope','parser.py',914),
  ('FunctionName -> IDENTIFIER','FunctionName',1,'p_func_name','parser.py',918),
  ('Function -> Signature RetTypeSet FunctionBody','Function',3,'p_func','parser.py',933),
  ('RetTypeSet -> <empty>','RetTypeSet',0,'p_ret_type_set','parser.py',957),
  ('FunctionBody -> Block','FunctionBody',1,'p_func_body','parser.py',969),
  ('Operand -> Literal','Operand',1,'p_operand','parser.py',976),
  ('Operand -> OperandName','Operand',1,'p_operand','parser.py',977),
  ('Operand -> LPAREN Expression RPAREN','Operand',3,'p_operand','parser.py',978),
  ('Literal -> BasicLit','Literal',1,'p_literal','parser.py',985),
  ('BasicLit -> I INT_LIT','BasicLit',2,'p_basic_lit','parser.py',990),
  ('BasicLit -> F FLOAT_LIT','BasicLit',2,'p_basic_lit','parser.py',991),
  ('BasicLit -> C IMAGINARY_LIT','BasicLit',2,'p_basic_lit','parser.py',992),
  ('BasicLit -> S STRING_LIT','BasicLit',2,'p_basic_lit','parser.py',993),
  ('I -> <empty>','I',0,'p_I','parser.py',1005),
  ('F -> <empty>','F',0,'p_F','parser.py',1009),
  ('C -> <empty>','C',0,'p_C','parser.py',1013),
  ('S -> <empty>','S',0,'p_S','parser.py',1017),
  ('OperandName -> IDENTIFIER','OperandName',1,'p_operand_name','parser.py',1021),
  ('QualifiedIdent -> IDENTIFIER DOT TypeName','QualifiedIdent',3,'p_qualified_ident','parser.py',1079),
  ('PrimaryExpr -> Operand','PrimaryExpr',1,'p_prim_expr','parser.py',1091),
  ('PrimaryExpr -> PrimaryExpr Selector','PrimaryExpr',2,'p_prim_expr','parser.py',1092),
  ('PrimaryExpr -> Conversion','PrimaryExpr',1,'p_prim_expr','parser.py',1093),
  ('PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE','PrimaryExpr',4,'p_prim_expr','parser.py',1094),
  ('PrimaryExpr -> PrimaryExpr Slice','PrimaryExpr',2,'p_prim_expr','parser.py',1095),
  ('PrimaryExpr -> PrimaryExpr TypeAssertion','PrimaryExpr',2,'p_prim_expr','parser.py',1096),
  ('PrimaryExpr -> PrimaryExpr LPAREN ExpressionListTypeOpt RPAREN','PrimaryExpr',4,'p_prim_expr','parser.py',1097),
  ('Selector -> DOT IDENTIFIER','Selector',2,'p_selector','parser.py',1229),
  ('Slice -> LSQUARE ExpressionOpt COLON ExpressionOpt RSQUARE','Slice',5,'p_slice','parser.py',1263),
  ('Slice -> LSQUARE ExpressionOpt COLON Expression COLON Expression RSQUARE','Slice',7,'p_slice','parser.py',1264),
  ('TypeAssertion -> DOT LPAREN Type RPAREN','TypeAssertion',4,'p_type_assert','parser.py',1272),
  ('ExpressionListTypeOpt -> ExpressionList','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',1277),
  ('ExpressionListTypeOpt -> epsilon','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',1278),
  ('Expression -> UnaryExpr','Expression',1,'p_expr','parser.py',1284),
  ('Expression -> Expression COMPARE_OR Expression','Expression',3,'p_expr','parser.py',1285),
  ('Expression -> Expression COMPARE_AND Expression','Expression',3,'p_expr','parser.py',1286),
  ('Expression -> Expression EQEQ Expression','Expression',3,'p_expr','parser.py',1287),
  ('Expression -> Expression NOTEQUALS Expression','Expression',3,'p_expr','parser.py',1288),
  ('Expression -> Expression LESSTHAN Expression','Expression',3,'p_expr','parser.py',1289),
  ('Expression -> Expression GREATERTHAN Expression','Expression',3,'p_expr','parser.py',1290),
  ('Expression -> Expression LESSTHAN_EQUAL Expression','Expression',3,'p_expr','parser.py',1291),
  ('Expression -> Expression GREATERTHAN_EQUAL Expression','Expression',3,'p_expr','parser.py',1292),
  ('Expression -> Expression OR Expression','Expression',3,'p_expr','parser.py',1293),
  ('Expression -> Expression XOR Expression','Expression',3,'p_expr','parser.py',1294),
  ('Expression -> Expression ANDXOR Expression','Expression',3,'p_expr','parser.py',1295),
  ('Expression -> Expression DIVIDE Expression','Expression',3,'p_expr','parser.py',1296),
  ('Expression -> Expression MODULO Expression','Expression',3,'p_expr','parser.py',1297),
  ('Expression -> Expression LSHIFT Expression','Expression',3,'p_expr','parser.py',1298),
  ('Expression -> Expression RSHIFT Expression','Expression',3,'p_expr','parser.py',1299),
  ('Expression -> Expression PLUS Expression','Expression',3,'p_expr','parser.py',1300),
  ('Expression -> Expression MINUS Expression','Expression',3,'p_expr','parser.py',1301),
  ('Expression -> Expression MULTIPLY Expression','Expression',3,'p_expr','parser.py',1302),
  ('Expression -> Expression AND Expression','Expression',3,'p_expr','parser.py',1303),
  ('ExpressionOpt -> Expression','ExpressionOpt',1,'p_expr_opt','parser.py',1350),
  ('ExpressionOpt -> epsilon','ExpressionOpt',1,'p_expr_opt','parser.py',1351),
  ('UnaryExpr -> PrimaryExpr','UnaryExpr',1,'p_unary_expr','parser.py',1355),
  ('UnaryExpr -> UnaryOp UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',1356),
  ('UnaryExpr -> NOT UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',1357),
  ('UnaryOp -> PLUS','UnaryOp',1,'p_unary_op','parser.py',1392),
  ('UnaryOp -> MINUS','UnaryOp',1,'p_unary_op','parser.py',1393),
  ('UnaryOp -> MULTIPLY','UnaryOp',1,'p_unary_op','parser.py',1394),
  ('UnaryOp -> AND','UnaryOp',1,'p_unary_op','parser.py',1395),
  ('Conversion -> TYPECAST Type LPAREN Expression RPAREN','Conversion',5,'p_conversion','parser.py',1409),
  ('Statement -> Declaration','Statement',1,'p_statement','parser.py',1417),
  ('Statement -> LabeledStmt','Statement',1,'p_statement','parser.py',1418),
  ('Statement -> SimpleStmt','Statement',1,'p_statement','parser.py',1419),
  ('Statement -> ReturnStmt','Statement',1,'p_statement','parser.py',1420),
  ('Statement -> BreakStmt','Statement',1,'p_statement','parser.py',1421),
  ('Statement -> ContinueStmt','Statement',1,'p_statement','parser.py',1422),
  ('Statement -> GotoStmt','Statement',1,'p_statement','parser.py',1423),
  ('Statement -> CreateScope Block EndScope','Statement',3,'p_statement','parser.py',1424),
  ('Statement -> IfStmt','Statement',1,'p_statement','parser.py',1425),
  ('Statement -> SwitchStmt','Statement',1,'p_statement','parser.py',1426),
  ('Statement -> ForStmt','Statement',1,'p_statement','parser.py',1427),
  ('Statement -> DeferStmt','Statement',1,'p_statement','parser.py',1428),
  ('Statement -> FallThroughStmt','Statement',1,'p_statement','parser.py',1429),
  ('Statement -> GoStmt','Statement',1,'p_statement','parser.py',1430),
  ('Statement -> PrintStmt','Statement',1,'p_statement','parser.py',1431),
  ('Statement -> ScanStmt','Statement',1,'p_statement','parser.py',1432),
  ('PrintStmt -> PRINT PD Expression','PrintStmt',3,'p_print_stmt','parser.py',1439),
  ('PrintStmt -> PRINT PS Expression','PrintStmt',3,'p_print_stmt','parser.py',1440),
  ('ScanStmt -> SCAN Expression','ScanStmt',2,'p_scan_stmt','parser.py',1453),
  ('FallThroughStmt -> FALLTHROUGH','FallThroughStmt',1,'p_fallthrough_stmt','parser.py',1460),
  ('GoStmt -> GO Expression','GoStmt',2,'p_go_stmt','parser.py',1464),
  ('DeferStmt -> DEFER Expression','DeferStmt',2,'p_defer_stmt','parser.py',1470),
  ('SimpleStmt -> epsilon','SimpleStmt',1,'p_simple_stmt','parser.py',1475),
  ('SimpleStmt -> ExpressionStmt','SimpleStmt',1,'p_simple_stmt','parser.py',1476),
  ('SimpleStmt -> IncDecStmt','SimpleStmt',1,'p_simple_stmt','parser.py',1477),
  ('SimpleStmt -> Assignment','SimpleStmt',1,'p_simple_stmt','parser.py',1478),
  ('SimpleStmt -> ShortVarDecl','SimpleStmt',1,'p_simple_stmt','parser.py',1479),
  ('LabeledStmt -> Label COLON Statement','LabeledStmt',3,'p_labeled_statements','parser.py',1484),
  ('Label -> IDENTIFIER','Label',1,'p_label','parser.py',1502),
  ('ExpressionStmt -> Expression','ExpressionStmt',1,'p_expression_stmt','parser.py',1507),
  ('IncDecStmt -> Expression INCREMENT','IncDecStmt',2,'p_inc_dec','parser.py',1513),
  ('IncDecStmt -> Expression DECREMENT','IncDecStmt',2,'p_inc_dec','parser.py',1514),
  ('Assignment -> ExpressionList assign_op ExpressionList','Assignment',3,'p_assignment','parser.py',1521),
  ('assign_op -> AssignOp','assign_op',1,'p_assign_op','parser.py',1562),
  ('AssignOp -> PLUSEQUAL','AssignOp',1,'p_AssignOp','parser.py',1566),
  ('AssignOp -> MINUSEQUAL','AssignOp',1,'p_AssignOp','parser.py',1567),
  ('AssignOp -> TIMESEQUAL','AssignOp',1,'p_AssignOp','parser.py',1568),
  ('AssignOp -> DIVIDE_EQUAL','AssignOp',1,'p_AssignOp','parser.py',1569),
  ('AssignOp -> MODEQUAL','AssignOp',1,'p_AssignOp','parser.py',1570),
  ('AssignOp -> ANDEQUAL','AssignOp',1,'p_AssignOp','parser.py',1571),
  ('AssignOp -> OREQUAL','AssignOp',1,'p_AssignOp','parser.py',1572),
  ('AssignOp -> XOREQUAL','AssignOp',1,'p_AssignOp','parser.py',1573),
  ('AssignOp -> ANDXOR_EQUAL','AssignOp',1,'p_AssignOp','parser.py',1574),
  ('AssignOp -> LSHIFT_EQUAL','AssignOp',1,'p_AssignOp','parser.py',1575),
  ('AssignOp -> RSHIFT_EQUAL','AssignOp',1,'p_AssignOp','parser.py',1576),
  ('AssignOp -> EQUALS','AssignOp',1,'p_AssignOp','parser.py',1577),
  ('IfStmt -> IF Expression CreateScope IFSYM Block EndScope ElseOpt','IfStmt',7,'p_if_statement','parser.py',1583),
  ('IFSYM -> <empty>','IFSYM',0,'p_if_sym','parser.py',1604),
  ('ElseOpt -> ELSE IfStmt','ElseOpt',2,'p_else_opt','parser.py',1610),
  ('ElseOpt -> ELSE CreateScope Block EndScope','ElseOpt',4,'p_else_opt','parser.py',1611),
  ('ElseOpt -> epsilon','ElseOpt',1,'p_else_opt','parser.py',1612),
  ('SwitchStmt -> ExprSwitchStmt','SwitchStmt',1,'p_switch_statement','parser.py',1624),
  ('ExprSwitchStmt -> SWITCH Expression CreateScope LCURL StartSwitch ExprCaseClauseList RCURL','ExprSwitchStmt',7,'p_ExprSwitchStmt','parser.py',1628),
  ('StartSwitch -> <empty>','StartSwitch',0,'p_start_switch','parser.py',1652),
  ('ExprCaseClauseList -> epsilon','ExprCaseClauseList',1,'p_ExprCaseClauseList','parser.py',1665),
  ('ExprCaseClauseList -> ExprCaseClauseList ExprCaseClause','ExprCaseClauseList',2,'p_ExprCaseClauseList','parser.py',1666),
  ('ExprCaseClause -> ExprSwitchCase COLON StatementList','ExprCaseClause',3,'p_ExprCaseClause','parser.py',1682),
  ('ExprSwitchCase -> CASE ExpressionList','ExprSwitchCase',2,'p_ExprSwitchCase','parser.py',1695),
  ('ExprSwitchCase -> DEFAULT','ExprSwitchCase',1,'p_ExprSwitchCase','parser.py',1696),
  ('ForStmt -> FOR CreateScope ConditionBlockOpt Block EndScope','ForStmt',5,'p_for','parser.py',1719),
  ('ConditionBlockOpt -> epsilon','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',1739),
  ('ConditionBlockOpt -> Condition','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',1740),
  ('ConditionBlockOpt -> ForClause','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',1741),
  ('Condition -> Expression','Condition',1,'p_condition','parser.py',1750),
  ('ForClause -> SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmt','ForClause',5,'p_forclause','parser.py',1755),
  ('ConditionOpt -> epsilon','ConditionOpt',1,'p_conditionopt','parser.py',1784),
  ('ConditionOpt -> Condition','ConditionOpt',1,'p_conditionopt','parser.py',1785),
  ('ReturnStmt -> RETURN ExpressionListPureOpt','ReturnStmt',2,'p_return','parser.py',1792),
  ('ExpressionListPureOpt -> ExpressionList','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',1841),
  ('ExpressionListPureOpt -> epsilon','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',1842),
  ('BreakStmt -> BREAK LabelOpt','BreakStmt',2,'p_break','parser.py',1847),
  ('ContinueStmt -> CONTINUE LabelOpt','ContinueStmt',2,'p_continue','parser.py',1851),
  ('LabelOpt -> Label','LabelOpt',1,'p_labelopt','parser.py',1855),
  ('LabelOpt -> epsilon','LabelOpt',1,'p_labelopt','parser.py',1856),
  ('GotoStmt -> GOTO Label','GotoStmt',2,'p_goto','parser.py',1861),
  ('SourceFile -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep','SourceFile',4,'p_source_file','parser.py',1867),
  ('ImportDeclRep -> epsilon','ImportDeclRep',1,'p_import_decl_rep','parser.py',1875),
  ('ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON','ImportDeclRep',3,'p_import_decl_rep','parser.py',1876),
  ('TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON','TopLevelDeclRep',3,'p_toplevel_decl_rep','parser.py',1885),
  ('TopLevelDeclRep -> epsilon','TopLevelDeclRep',1,'p_toplevel_decl_rep','parser.py',1886),
  ('PackageClause -> PACKAGE PackageName','PackageClause',2,'p_package_clause','parser.py',1897),
  ('PackageName -> IDENTIFIER','PackageName',1,'p_package_name','parser.py',1902),
  ('ImportDecl -> IMPORT ImportSpec','ImportDecl',2,'p_import_decl','parser.py',1913),
  ('ImportDecl -> IMPORT LPAREN ImportSpecRep RPAREN','ImportDecl',4,'p_import_decl','parser.py',1914),
  ('ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON','ImportSpecRep',3,'p_import_spec_rep','parser.py',1921),
  ('ImportSpecRep -> epsilon','ImportSpecRep',1,'p_import_spec_rep','parser.py',1922),
  ('ImportSpec -> PackageNameDotOpt ImportPath','ImportSpec',2,'p_import_spec','parser.py',1930),
  ('PackageNameDotOpt -> DOT','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',1938),
  ('PackageNameDotOpt -> PackageName','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',1939),
  ('PackageNameDotOpt -> epsilon','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',1940),
  ('ImportPath -> STRING_LIT','ImportPath',1,'p_import_path','parser.py',1948),
  ('epsilon -> <empty>','epsilon',0,'p_empty','parser.py',1957),
]
