
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftIDENTIFIERrightEQUALSNOTleftINT_LITleftFLOAT_LITleftSTRING_LITleftCOMPARE_ORleftCOMPARE_ANDleftEQEQNOTEQUALSleftORleftXORleftANDANDXORleftLESSTHANGREATERTHANLESSTHAN_EQUALGREATERTHAN_EQUALleftPLUSMINUSleftLSHIFTRSHIFTleftMULTIPLYDIVIDEMODULOleftLPARENRPARENAND ANDEQUAL ANDXOR ANDXOR_EQUAL BOOL BOOL_LIT BREAK CASE COLON COMMA COMPARE_AND COMPARE_OR CONST CONTINUE DECREMENT DEFAULT DEFER DIVIDE DIVIDE_EQUAL DOT ELSE EQEQ EQUALS FALLTHROUGH FLOAT FLOAT_LIT FOR FUNC GO GOTO GREATERTHAN GREATERTHAN_EQUAL IDENTIFIER IF IMAGINARY_LIT IMPORT INCREMENT INT INT_LIT LCURL LESSTHAN LESSTHAN_EQUAL LPAREN LSHIFT LSHIFT_EQUAL LSQUARE MALLOC MAP MINUS MINUSEQUAL MODEQUAL MODULO MULTIPLY NOT NOTEQUALS NULL OR OREQUAL PACKAGE PLUS PLUSEQUAL PRINT RCURL RETURN RPAREN RSHIFT RSHIFT_EQUAL RSQUARE SCAN SEMICOLON SHORT_ASSIGNMENT STRING STRING_LIT STRUCT SWITCH TIMESEQUAL TYPE TYPECAST VAR XOR XOREQUALstart : SourceFileType : TypeName\n\t\t\t\t\t\t| TypeLitTypeName : TypeToken\n\t\t\t\t\t\t\t\t| QualifiedIdentTypeToken : INT\n\t\t\t\t\t\t\t\t | FLOAT\n\t\t\t\t\t\t\t\t | BOOL\n\t\t\t\t\t\t\t\t | STRING\n\t\t\t\t\t\t\t\t | TYPE IDENTIFIERTypeLit : ArrayType\n\t\t\t\t\t\t\t | ST StructType\n\t\t\t\t\t\t\t | PointerType\n\t\t\t\t\t\t\t | MapType\n\t\t\t\t\t\t\t | SliceTypeST : SliceType : LSQUARE RSQUARE ElementTypeMapType : MAP LSQUARE KeyType RSQUARE ElementType KeyType : TypeArrayType : LSQUARE ArrayLength RSQUARE ElementType ArrayLength : I INT_LIT  ElementType : Type StructType : FuncScope STRUCT LCURL FieldDeclRep RCURL EndScopeFuncScope :  FieldDeclRep : FieldDeclRep FieldDecl Semi\n\t\t\t\t\t\t\t\t\t| epsilon  FieldDecl : IdentifierList TypePointerType : MULTIPLY BaseTypeBaseType : TypeSignature : Parameters ResultOptResultOpt : Result\n\t\t\t\t\t\t\t\t | epsilonResult : Parameters\n\t\t\t\t\t\t\t| TypeParameters : LPAREN ParametersList RPAREN\n\t\t\t\t\t\t\t\t\t| LPAREN RPARENParametersList : ParameterDecl\n\t\t\t\t\t\t\t\t\t\t\t| ParametersList COMMA ParameterDeclParameterDecl : IdentifierList Type\n\t\t\t\t\t\t\t\t\t\t | TypeBlock : LCURL StatementList RCURLStatementList : StatementRepStatementRep : StatementRep Statement Semi\n\t\t\t\t\t\t\t\t\t\t| epsilonDeclaration : ConstDecl\n\t\t\t\t\t\t\t\t | TypeDecl\n\t\t\t\t\t\t\t\t | VarDeclTopLevelDecl : Declaration\n\t\t\t\t\t\t\t\t\t| FunctionDeclConstDecl : CONST ConstSpec\n\t\t\t\t\t\t\t\t | CONST LPAREN ConstSpecRep RPARENConstSpecRep : ConstSpecRep ConstSpec Semi\n\t\t\t\t\t\t\t\t\t\t| epsilonConstSpec : IdentifierList TypeExprListOptTypeExprListOpt : Type EQUALS ExpressionListIdentifierList : IDENTIFIER \n\t\t\t\t\t\t\t\t\t\t\t| IdentifierRepIdentifierRep : IdentifierRep COMMA IDENTIFIER\n\t\t\t\t\t\t\t\t\t\t | IDENTIFIER COMMA IDENTIFIERExpressionList : Expression ExpressionRep\n\t\t\t\t\t\t\t\t\t\t\t\t|\tNULLExpressionRep : ExpressionRep COMMA Expression\n\t\t\t\t\t\t\t\t\t\t | epsilonTypeDecl : TYPE TypeSpec\n\t\t\t\t\t\t\t\t| TYPE LPAREN TypeSpecRep RPARENTypeSpecRep : TypeSpecRep TypeSpec Semi\n\t\t\t\t\t\t\t\t\t | epsilonTypeSpec : AliasDecl\n\t\t\t\t\t\t\t\t| TypeDefAliasDecl : IDENTIFIER EQUALS TypeTypeDef : IDENTIFIER TypeVarDecl : VAR VarSpec\n\t\t\t\t\t\t\t | VAR LPAREN VarSpecRep RPARENVarSpecRep : VarSpecRep VarSpec Semi\n\t\t\t\t\t\t\t\t\t| epsilonVarSpec : IdentifierList Type ExpressionListOptExpressionListOpt : EQUALS ExpressionList\n\t\t\t\t\t\t\t\t\t\t\t\t | epsilon\n\t\t\t\t\t\t\t\t\t\t\t\t | EQUALS MALLOC LPAREN I INT_LIT RPAREN ShortVarDecl : IDENTIFIER SHORT_ASSIGNMENT Expression FunctionDecl : FUNC FunctionName CreateScope Function EndScope\n\t\t\t\t\t\t\t\t\t| FUNC FunctionName CreateScope Signature EndScopeCreateScope : EndScope : FunctionName : IDENTIFIERFunction : Signature RetTypeSet FunctionBodyRetTypeSet : FunctionBody : BlockOperand : Literal\n\t\t\t\t\t\t\t | OperandName\n\t\t\t\t\t\t\t | LPAREN Expression RPARENLiteral : BasicLitBasicLit : I INT_LIT\n              | F FLOAT_LIT\n              | C IMAGINARY_LIT\n              | B BOOL_LIT\n              | S STRING_LITB : I : F : C : S : OperandName : IDENTIFIERQualifiedIdent : IDENTIFIER DOT TypeNamePrimaryExpr : Operand\n                 | PrimaryExpr DOT IDENTIFIER\n                 | Conversion\n                 | PrimaryExpr LSQUARE Expression RSQUARE\n                 | PrimaryExpr Slice\n                 | PrimaryExpr TypeAssertion\n                 | PrimaryExpr LPAREN ExpressionListTypeOpt RPARENSlice : LSQUARE ExpressionOpt COLON ExpressionOpt RSQUARE\n\t\t\t\t\t\t | LSQUARE ExpressionOpt COLON Expression COLON Expression RSQUARETypeAssertion : DOT LPAREN Type RPARENExpressionListTypeOpt : ExpressionList\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t | epsilonExpression : UnaryExpr\n\t\t\t\t\t\t\t\t\t| Expression COMPARE_OR Expression\n\t\t\t\t\t\t\t\t\t| Expression COMPARE_AND Expression\n\t\t\t\t\t\t\t\t\t| Expression EQEQ Expression\n\t\t\t\t\t\t\t\t\t| Expression NOTEQUALS Expression\n\t\t\t\t\t\t\t\t\t| Expression LESSTHAN Expression\n\t\t\t\t\t\t\t\t\t| Expression GREATERTHAN Expression\n\t\t\t\t\t\t\t\t\t| Expression LESSTHAN_EQUAL Expression\n\t\t\t\t\t\t\t\t\t| Expression GREATERTHAN_EQUAL Expression\n\t\t\t\t\t\t\t\t\t| Expression OR Expression\n\t\t\t\t\t\t\t\t\t| Expression XOR Expression\n\t\t\t\t\t\t\t\t\t| Expression ANDXOR Expression\n\t\t\t\t\t\t\t\t\t| Expression DIVIDE Expression\n\t\t\t\t\t\t\t\t\t| Expression MODULO Expression\n\t\t\t\t\t\t\t\t\t| Expression LSHIFT Expression\n\t\t\t\t\t\t\t\t\t| Expression RSHIFT Expression\n\t\t\t\t\t\t\t\t\t| Expression PLUS Expression\n\t\t\t\t\t\t\t\t\t| Expression MINUS Expression\n\t\t\t\t\t\t\t\t\t| Expression MULTIPLY Expression\n\t\t\t\t\t\t\t\t\t| Expression AND ExpressionExpressionOpt : Expression\n\t\t\t\t\t\t\t\t\t\t | epsilonUnaryExpr : PrimaryExpr\n\t\t\t\t\t\t\t\t | UnaryOp UnaryExpr\n\t\t\t\t\t\t\t\t | NOT UnaryExprUnaryOp : PLUS\n\t\t\t\t\t\t\t | MINUS\n\t\t\t\t\t\t\t | MULTIPLY\n\t\t\t\t\t\t\t | AND Conversion : TYPECAST Type LPAREN Expression RPARENStatement : Declaration\n\t\t\t\t\t\t\t | LabeledStmt\n\t\t\t\t\t\t\t | SimpleStmt\n\t\t\t\t\t\t\t | ReturnStmt\n\t\t\t\t\t\t\t | BreakStmt\n\t\t\t\t\t\t\t | ContinueStmt\n\t\t\t\t\t\t\t | GotoStmt\n\t\t\t\t\t\t\t | CreateScope IFSYM Block EndScope_1\n\t\t\t\t\t\t\t | IfStmt\n\t\t\t\t\t\t\t | SwitchStmt\n\t\t\t\t\t\t\t | ForStmt\n\t\t\t\t\t\t\t | DeferStmt\n\t\t\t\t\t\t\t | FallThroughStmt\n\t\t\t\t\t\t\t | GoStmt\n\t\t\t\t\t\t\t | PrintStmt\n\t\t\t\t\t\t\t | ScanStmtEndScope_1 : PrintStmt : PRINT ExpressionListScanStmt : SCAN ExpressionFallThroughStmt : FALLTHROUGHGoStmt : GO ExpressionDeferStmt : DEFER Expression SimpleStmt : epsilon\n\t\t\t\t\t\t\t\t | ExpressionStmt\n\t\t\t\t\t\t\t\t | IncDecStmt\n\t\t\t\t\t\t\t\t | Assignment\n\t\t\t\t\t\t\t\t | ShortVarDecl  LabeledStmt : Label COLON Statement  Label : IDENTIFIER  ExpressionStmt : Expression  IncDecStmt : Expression INCREMENT\n\t\t\t\t\t\t\t\t | Expression DECREMENT  Assignment : ExpressionList assign_op ExpressionList assign_op : AssignOp AssignOp : PLUSEQUAL\n\t\t\t\t\t\t\t | MINUSEQUAL\n\t\t\t\t\t\t\t | TIMESEQUAL\n\t\t\t\t\t\t\t | DIVIDE_EQUAL\n\t\t\t\t\t\t\t | MODEQUAL\n\t\t\t\t\t\t\t | ANDEQUAL\n\t\t\t\t\t\t\t | OREQUAL\n\t\t\t\t\t\t\t | XOREQUAL\n\t\t\t\t\t\t\t | ANDXOR_EQUAL\n\t\t\t\t\t\t\t | LSHIFT_EQUAL\n\t\t\t\t\t\t\t | RSHIFT_EQUAL\n\t\t\t\t\t\t\t | EQUALS  IfStmt : IF Expression CreateScope IFSYM Block EndScope_1 ElseOpt IFSYM :  ElseOpt : ELSE IfStmt\n\t\t\t\t\t\t\t| ELSE CreateScope IFSYM Block EndScope_1\n\t\t\t\t\t\t\t| epsilon  SwitchStmt : ExprSwitchStmtExprSwitchStmt : SWITCH Expression CCreateScope LCURL StartSwitch ExprCaseClauseList RCURL EndScope_1StartSwitch : ExprCaseClauseList : epsilon\n\t\t\t\t\t\t\t\t | ExprCaseClauseList ExprCaseClause\n\t\tExprCaseClause : ExprSwitchCase COLON StatementList ExprSwitchCase : CASE ExpressionList\n\t\t\t\t\t\t\t\t | DEFAULT \n\t\tForStmt : FOR CCreateScope ConditionBlockOpt Block EndScope_1CCreateScope : ConditionBlockOpt : epsilon\n\t\t\t\t\t\t | Condition\n\t\t\t\t\t\t | ForClauseCondition : Expression ForClause : SimpleStmt Semi ConditionOpt Semi SimpleStmtConditionOpt : epsilon\n\t\t\t\t\t| Condition ReturnStmt : RETURN ExpressionListPureOptExpressionListPureOpt : ExpressionList\n\t\t\t\t\t\t | epsilonBreakStmt : BREAK LabelOptContinueStmt : CONTINUE LabelOptLabelOpt : Label\n\t\t\t\t| epsilon GotoStmt : GOTO Label SourceFile : PackageClause Semi ImportDeclRep TopLevelDeclRepImportDeclRep : epsilon\n\t\t\t\t\t | ImportDeclRep ImportDecl SemiTopLevelDeclRep : TopLevelDeclRep TopLevelDecl Semi\n\t\t\t\t\t\t\t\t\t\t | epsilonPackageClause : PACKAGE PackageNamePackageName : IDENTIFIERImportDecl : IMPORT ImportSpec\n\t\t\t\t\t| IMPORT LPAREN ImportSpecRep RPAREN  ImportSpecRep : ImportSpecRep ImportSpec Semi\n\t\t\t\t\t\t| epsilon  ImportSpec : PackageNameDotOpt ImportPath  PackageNameDotOpt : DOT\n\t\t\t\t\t\t\t\t\t\t\t\t| PackageName\n\t\t\t\t\t\t\t\t\t\t\t\t| epsilon ImportPath : STRING_LIT Semi : SEMICOLONepsilon : '
    
_lr_action_items = {'LSQUARE':([33,35,36,42,47,56,66,83,86,93,96,100,102,104,116,120,121,124,130,133,135,138,143,155,157,159,167,168,169,170,171,173,176,201,207,208,216,217,218,248,250,256,284,300,301,342,346,363,],[-57,65,-56,65,65,65,96,65,-58,65,65,-59,65,65,-107,-90,-92,-103,174,-105,-89,65,65,65,-36,-56,-95,-96,-94,-93,-109,-110,-97,65,65,-35,65,-106,-91,-111,-108,65,-103,-114,-146,-112,-103,-113,]),'ANDXOR':([116,120,121,124,129,130,133,135,136,165,166,167,168,169,170,171,173,176,177,215,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,253,284,287,299,300,301,305,307,319,338,340,342,346,351,353,357,363,367,],[-107,-90,-92,-103,-117,-139,-105,-89,178,-140,-141,-95,-96,-94,-93,-109,-110,-97,178,178,-106,-91,-128,178,-132,178,178,-122,-131,-135,-130,-134,-125,-133,178,-129,-123,-136,-124,178,178,-111,-108,178,178,-103,178,178,-114,-146,178,178,178,178,178,-112,-103,178,178,178,-113,178,]),'DIVIDE':([116,120,121,124,129,130,133,135,136,165,166,167,168,169,170,171,173,176,177,215,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,253,284,287,299,300,301,305,307,319,338,340,342,346,351,353,357,363,367,],[-107,-90,-92,-103,-117,-139,-105,-89,192,-140,-141,-95,-96,-94,-93,-109,-110,-97,192,192,-106,-91,192,192,192,192,192,192,192,-135,-130,192,192,192,192,-129,192,192,192,192,192,-111,-108,192,192,-103,192,192,-114,-146,192,192,192,192,192,-112,-103,192,192,192,-113,192,]),'CONST':([5,6,9,10,11,12,25,37,205,243,244,306,313,385,],[-239,-240,-224,-240,15,-227,-225,-226,-240,15,-44,-43,15,-240,]),'LPAREN':([5,14,15,22,24,38,39,55,57,58,60,62,63,64,67,68,71,72,74,76,89,90,91,97,99,102,107,115,116,117,119,120,121,122,123,124,130,133,134,135,137,139,140,141,157,162,167,168,169,170,171,172,173,174,175,176,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,199,200,205,208,217,218,221,239,240,243,244,248,249,250,255,258,264,270,273,277,282,284,289,294,300,301,303,306,313,315,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,342,343,346,358,363,371,376,385,],[-239,26,34,41,45,-85,-83,-11,-3,-4,-2,-15,-9,-14,-6,-7,-8,-13,-5,104,-29,-28,134,-12,-10,104,134,134,-107,-144,-143,-90,-92,134,-142,-103,172,-105,134,-89,-145,-104,-22,-17,-36,209,-95,-96,-94,-93,-109,134,-110,134,216,-97,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,239,-20,-240,-35,-106,-91,134,134,-18,134,-44,-111,134,-108,-84,134,134,134,134,-207,134,-103,134,134,-114,-146,-23,-43,134,134,134,-190,-180,-191,-182,-185,-188,-192,-181,-189,134,-186,-187,-183,-184,-112,134,-103,134,-113,134,134,-240,]),'SCAN':([5,205,243,244,306,313,385,],[-239,-240,289,-44,-43,289,-240,]),'DEFAULT':([5,243,244,306,360,369,372,373,380,385,389,],[-239,-42,-44,-43,-200,-240,-201,378,-202,-240,-203,]),'MODEQUAL':([116,118,120,121,124,129,130,133,135,165,166,167,168,169,170,171,173,176,180,193,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,284,286,287,300,301,342,346,351,363,],[-107,-61,-90,-92,-103,-117,-139,-105,-89,-140,-141,-95,-96,-94,-93,-109,-110,-97,-60,-63,-106,-91,-128,-121,-132,-118,-120,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,-119,-126,-111,-108,-62,-103,325,-240,-114,-146,-112,-103,-240,-113,]),'XOREQUAL':([116,118,120,121,124,129,130,133,135,165,166,167,168,169,170,171,173,176,180,193,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,284,286,287,300,301,342,346,351,363,],[-107,-61,-90,-92,-103,-117,-139,-105,-89,-140,-141,-95,-96,-94,-93,-109,-110,-97,-60,-63,-106,-91,-128,-121,-132,-118,-120,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,-119,-126,-111,-108,-62,-103,326,-240,-114,-146,-112,-103,-240,-113,]),'PRINT':([5,205,243,244,306,313,385,],[-239,-240,273,-44,-43,273,-240,]),'LESSTHAN':([116,120,121,124,129,130,133,135,136,165,166,167,168,169,170,171,173,176,177,215,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,253,284,287,299,300,301,305,307,319,338,340,342,346,351,353,357,363,367,],[-107,-90,-92,-103,-117,-139,-105,-89,184,-140,-141,-95,-96,-94,-93,-109,-110,-97,184,184,-106,-91,184,184,-132,184,184,-122,-131,-135,-130,-134,-125,-133,184,-129,-123,184,-124,184,184,-111,-108,184,184,-103,184,184,-114,-146,184,184,184,184,184,-112,-103,184,184,184,-113,184,]),'COLON':([116,118,120,121,124,129,130,133,135,136,165,166,167,168,169,170,171,173,174,176,180,193,213,214,215,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,271,284,299,300,301,342,363,377,378,384,],[-107,-61,-90,-92,-103,-117,-139,-105,-89,-240,-140,-141,-95,-96,-94,-93,-109,-110,-240,-97,-60,-63,249,-138,-137,-106,-91,-128,-121,-132,-118,-120,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,-119,-126,-111,-108,-62,313,-175,343,-114,-146,-112,-113,385,-205,-204,]),'NOTEQUALS':([116,120,121,124,129,130,133,135,136,165,166,167,168,169,170,171,173,176,177,215,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,253,284,287,299,300,301,305,307,319,338,340,342,346,351,353,357,363,367,],[-107,-90,-92,-103,-117,-139,-105,-89,179,-140,-141,-95,-96,-94,-93,-109,-110,-97,179,179,-106,-91,-128,-121,-132,179,-120,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,179,-126,-111,-108,179,179,-103,179,179,-114,-146,179,179,179,179,179,-112,-103,179,179,179,-113,179,]),'LSHIFT':([116,120,121,124,129,130,133,135,136,165,166,167,168,169,170,171,173,176,177,215,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,253,284,287,299,300,301,305,307,319,338,340,342,346,351,353,357,363,367,],[-107,-90,-92,-103,-117,-139,-105,-89,185,-140,-141,-95,-96,-94,-93,-109,-110,-97,185,185,-106,-91,185,185,-132,185,185,185,-131,-135,-130,185,185,185,185,-129,185,185,185,185,185,-111,-108,185,185,-103,185,185,-114,-146,185,185,185,185,185,-112,-103,185,185,185,-113,185,]),'MULTIPLY':([5,33,35,36,42,47,56,83,86,91,93,96,100,102,104,107,115,116,117,119,120,121,122,123,124,129,130,133,134,135,136,137,138,143,155,157,159,165,166,167,168,169,170,171,172,173,174,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,201,205,207,208,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,243,244,248,249,250,252,253,256,258,264,270,273,277,282,284,287,289,294,299,300,301,305,306,307,313,315,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,338,340,342,343,346,351,353,357,358,363,367,371,376,385,],[-239,-57,56,-56,56,56,56,56,-58,117,56,56,-59,56,56,117,117,-107,-144,-143,-90,-92,117,-142,-103,-117,-139,-105,117,-89,186,-145,56,56,56,-36,-56,-140,-141,-95,-96,-94,-93,-109,117,-110,117,-97,186,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,56,-240,56,-35,186,56,-106,-91,186,186,117,186,186,186,186,186,-135,-130,186,186,186,186,-129,186,186,186,186,186,117,117,-44,-111,117,-108,186,186,56,117,117,117,117,-207,117,-103,186,117,117,186,-114,-146,186,-43,186,117,117,186,117,-190,-180,-191,-182,-185,-188,-192,-181,-189,117,-186,-187,-183,-184,186,186,-112,117,-103,186,186,186,117,-113,186,117,117,-240,]),'RETURN':([5,205,243,244,306,313,385,],[-239,-240,270,-44,-43,270,-240,]),'NULL':([5,91,107,172,205,243,244,270,273,277,306,313,315,321,322,323,324,325,326,327,328,329,330,331,332,333,334,371,376,385,],[-239,118,118,118,-240,118,-44,118,118,-207,-43,118,118,-190,-180,-191,-182,-185,-188,-192,-181,-189,118,-186,-187,-183,-184,118,118,-240,]),'MINUS':([5,91,107,115,116,117,119,120,121,122,123,124,129,130,133,134,135,136,137,165,166,167,168,169,170,171,172,173,174,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,205,215,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,243,244,248,249,250,252,253,258,264,270,273,277,282,284,287,289,294,299,300,301,305,306,307,313,315,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,338,340,342,343,346,351,353,357,358,363,367,371,376,385,],[-239,119,119,119,-107,-144,-143,-90,-92,119,-142,-103,-117,-139,-105,119,-89,188,-145,-140,-141,-95,-96,-94,-93,-109,119,-110,119,-97,188,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,-240,188,-106,-91,188,188,119,-132,188,188,188,-131,-135,-130,-134,188,-133,188,-129,188,188,188,188,188,119,119,-44,-111,119,-108,188,188,119,119,119,119,-207,119,-103,188,119,119,188,-114,-146,188,-43,188,119,119,188,119,-190,-180,-191,-182,-185,-188,-192,-181,-189,119,-186,-187,-183,-184,188,188,-112,119,-103,188,188,188,119,-113,188,119,119,-240,]),'DOT':([5,14,26,48,49,61,113,116,120,121,124,130,133,135,159,167,168,169,170,171,173,176,217,218,248,250,284,300,301,342,346,363,],[-239,31,-240,-233,31,92,-232,-107,-90,-92,-103,175,-105,-89,92,-95,-96,-94,-93,-109,-110,-97,-106,-91,-111,-108,-103,-114,-146,-112,-103,-113,]),'LCURL':([5,55,57,58,60,62,63,64,67,68,71,72,74,89,90,97,99,102,103,116,118,120,121,124,129,130,133,135,136,139,140,141,146,148,149,150,151,152,154,157,165,166,167,168,169,170,171,173,176,180,193,200,205,208,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,240,243,244,248,250,252,255,259,265,266,277,285,287,292,293,300,301,303,306,313,315,319,335,336,339,340,342,346,347,348,349,350,351,352,353,354,356,362,363,371,375,382,385,387,390,],[-239,-11,-3,-4,-2,-15,-9,-14,-6,-7,-8,-13,-5,-29,-28,-12,-10,-240,-87,-107,-61,-90,-92,-103,-117,-139,-105,-89,-240,-104,-22,-17,202,-33,-34,-30,-32,-31,205,-36,-140,-141,-95,-96,-94,-93,-109,-110,-97,-60,-63,-20,-240,-35,-106,-91,-128,-121,-132,-118,-120,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,-119,-126,-18,-83,-44,-111,-108,-62,-84,-170,-172,-171,-207,-169,-176,-194,-173,-114,-146,-23,-43,-83,-240,-207,-177,-178,205,-83,-112,-103,-209,-208,205,-210,-211,360,-80,-179,-194,205,-113,-240,-212,-83,-240,-194,205,]),'CASE':([5,243,244,306,360,369,372,373,380,385,389,],[-239,-42,-44,-43,-200,-240,-201,376,-202,-240,-203,]),'DEFER':([5,205,243,244,306,313,385,],[-239,-240,264,-44,-43,264,-240,]),'RPAREN':([5,26,34,41,45,48,49,53,54,55,57,58,60,62,63,64,67,68,71,72,74,77,78,80,81,89,90,97,99,104,113,114,116,118,120,121,124,129,130,133,135,136,139,140,141,156,158,160,161,164,165,166,167,168,169,170,171,172,173,176,177,180,193,200,206,210,211,212,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,240,246,248,250,251,252,253,255,297,300,301,303,342,363,],[-239,-240,-240,-240,-240,-233,84,88,-53,-11,-3,-4,-2,-15,-9,-14,-6,-7,-8,-13,-5,105,-75,110,-67,-29,-28,-12,-10,157,-232,-52,-107,-61,-90,-92,-103,-117,-139,-105,-89,-240,-104,-22,-17,-40,208,-37,-74,-66,-140,-141,-95,-96,-94,-93,-109,-240,-110,-97,218,-60,-63,-20,-39,-116,248,-115,-106,-91,-128,-121,-132,-118,-120,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,-119,-126,-18,-38,-111,-108,300,-62,301,-84,341,-114,-146,-23,-112,-113,]),'SEMICOLON':([1,5,7,8,13,16,17,18,19,20,23,27,32,40,43,44,46,50,51,55,57,58,60,62,63,64,67,68,70,71,72,74,79,82,84,85,87,88,89,90,97,99,101,102,103,105,106,108,109,110,111,112,116,118,120,121,124,129,130,132,133,135,136,139,140,141,147,148,149,150,151,152,153,157,163,165,166,167,168,169,170,171,173,176,180,193,200,203,204,205,208,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,240,243,244,248,250,252,254,255,257,259,260,261,262,263,265,266,268,269,270,272,274,275,276,277,278,279,280,281,283,284,285,287,288,290,291,293,295,296,300,301,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,335,336,337,338,341,342,344,345,346,348,351,353,354,355,358,359,361,363,364,365,366,367,368,370,374,379,381,383,385,386,388,391,392,],[5,-239,-228,-229,5,-49,5,-48,-45,-46,-47,-230,-50,-72,-69,-68,-64,-234,-238,-11,-3,-4,-2,-15,-9,-14,-6,-7,-54,-8,-13,-5,-240,-71,-231,5,5,-51,-29,-28,-12,-10,-84,-240,-84,-73,5,-78,-76,-65,5,-70,-107,-61,-90,-92,-103,-117,-139,-55,-105,-89,-240,-104,-22,-17,-81,-33,-34,-30,-32,-31,-82,-36,-77,-140,-141,-95,-96,-94,-93,-109,-110,-97,-60,-63,-20,-86,-88,-240,-35,-106,-91,-128,-121,-132,-118,-120,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,-119,-126,-18,-240,-44,-111,-108,-62,5,-84,-152,-170,-162,5,-155,-159,-172,-171,-148,-161,-240,-198,-160,-158,-153,-207,-150,-156,-240,-166,-147,-103,-169,-176,-240,-149,-157,-173,-151,-41,-114,-146,-23,-27,-167,-43,-168,-175,-222,-215,-217,-216,-240,-164,-240,-221,-219,-220,-177,-178,-218,-165,-79,-112,-174,5,-103,-169,-176,-80,-179,-163,-240,-163,-154,-113,-214,-213,5,-211,-206,-163,-240,-163,-197,-193,-240,-199,-195,-163,-196,]),'FALLTHROUGH':([5,205,243,244,306,313,385,],[-239,-240,281,-44,-43,281,-240,]),'STRUCT':([33,35,36,42,47,56,69,83,86,93,96,98,100,102,104,138,143,155,157,159,201,207,208,216,256,],[-57,-16,-56,-16,-16,-16,-24,-16,-58,-16,-16,146,-59,-16,-16,-16,-16,-16,-36,-56,-16,-16,-35,-16,-16,]),'GREATERTHAN_EQUAL':([116,120,121,124,129,130,133,135,136,165,166,167,168,169,170,171,173,176,177,215,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,253,284,287,299,300,301,305,307,319,338,340,342,346,351,353,357,363,367,],[-107,-90,-92,-103,-117,-139,-105,-89,189,-140,-141,-95,-96,-94,-93,-109,-110,-97,189,189,-106,-91,189,189,-132,189,189,-122,-131,-135,-130,-134,-125,-133,189,-129,-123,189,-124,189,189,-111,-108,189,189,-103,189,189,-114,-146,189,189,189,189,189,-112,-103,189,189,189,-113,189,]),'RCURL':([5,202,205,241,242,243,244,245,302,306,360,369,372,373,380,385,389,],[-239,-240,-240,255,-26,-42,-44,296,-25,-43,-200,-240,-201,379,-202,-240,-203,]),'RSHIFT_EQUAL':([116,118,120,121,124,129,130,133,135,165,166,167,168,169,170,171,173,176,180,193,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,284,286,287,300,301,342,346,351,363,],[-107,-61,-90,-92,-103,-117,-139,-105,-89,-140,-141,-95,-96,-94,-93,-109,-110,-97,-60,-63,-106,-91,-128,-121,-132,-118,-120,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,-119,-126,-111,-108,-62,-103,323,-240,-114,-146,-112,-103,-240,-113,]),'EQEQ':([116,120,121,124,129,130,133,135,136,165,166,167,168,169,170,171,173,176,177,215,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,253,284,287,299,300,301,305,307,319,338,340,342,346,351,353,357,363,367,],[-107,-90,-92,-103,-117,-139,-105,-89,183,-140,-141,-95,-96,-94,-93,-109,-110,-97,183,183,-106,-91,-128,-121,-132,183,-120,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,183,-126,-111,-108,183,183,-103,183,183,-114,-146,183,183,183,183,183,-112,-103,183,183,183,-113,183,]),'SWITCH':([5,205,243,244,306,313,385,],[-239,-240,282,-44,-43,282,-240,]),'ANDXOR_EQUAL':([116,118,120,121,124,129,130,133,135,165,166,167,168,169,170,171,173,176,180,193,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,284,286,287,300,301,342,346,351,363,],[-107,-61,-90,-92,-103,-117,-139,-105,-89,-140,-141,-95,-96,-94,-93,-109,-110,-97,-60,-63,-106,-91,-128,-121,-132,-118,-120,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,-119,-126,-111,-108,-62,-103,329,-240,-114,-146,-112,-103,-240,-113,]),'PLUS':([5,91,107,115,116,117,119,120,121,122,123,124,129,130,133,134,135,136,137,165,166,167,168,169,170,171,172,173,174,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,205,215,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,243,244,248,249,250,252,253,258,264,270,273,277,282,284,287,289,294,299,300,301,305,306,307,313,315,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,338,340,342,343,346,351,353,357,358,363,367,371,376,385,],[-239,123,123,123,-107,-144,-143,-90,-92,123,-142,-103,-117,-139,-105,123,-89,190,-145,-140,-141,-95,-96,-94,-93,-109,123,-110,123,-97,190,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,-240,190,-106,-91,190,190,123,-132,190,190,190,-131,-135,-130,-134,190,-133,190,-129,190,190,190,190,190,123,123,-44,-111,123,-108,190,190,123,123,123,123,-207,123,-103,190,123,123,190,-114,-146,190,-43,190,123,123,190,123,-190,-180,-191,-182,-185,-188,-192,-181,-189,123,-186,-187,-183,-184,190,190,-112,123,-103,190,190,190,123,-113,190,123,123,-240,]),'DIVIDE_EQUAL':([116,118,120,121,124,129,130,133,135,165,166,167,168,169,170,171,173,176,180,193,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,284,286,287,300,301,342,346,351,363,],[-107,-61,-90,-92,-103,-117,-139,-105,-89,-140,-141,-95,-96,-94,-93,-109,-110,-97,-60,-63,-106,-91,-128,-121,-132,-118,-120,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,-119,-126,-111,-108,-62,-103,334,-240,-114,-146,-112,-103,-240,-113,]),'INCREMENT':([116,120,121,124,129,130,133,135,165,166,167,168,169,170,171,173,176,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,284,287,300,301,342,346,351,363,],[-107,-90,-92,-103,-117,-139,-105,-89,-140,-141,-95,-96,-94,-93,-109,-110,-97,-106,-91,-128,-121,-132,-118,-120,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,-119,-126,-111,-108,-103,335,-114,-146,-112,-103,335,-113,]),'IMPORT':([5,6,9,10,25,],[-239,-240,-224,14,-225,]),'STRING':([33,35,36,42,47,56,83,86,92,93,96,100,102,104,138,143,155,157,159,201,207,208,216,256,],[-57,63,-56,63,63,63,63,-58,63,63,63,-59,63,63,63,63,63,-36,-56,63,63,-35,63,63,]),'IDENTIFIER':([2,5,14,15,21,22,24,26,33,34,35,36,41,42,45,47,48,49,52,53,54,56,73,75,77,78,80,81,83,86,91,92,93,96,100,102,104,107,113,114,115,117,119,122,123,134,137,138,143,155,157,159,161,164,172,174,175,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,201,202,205,207,208,216,221,239,241,242,243,244,249,256,258,264,267,270,273,277,280,282,288,289,294,302,306,313,315,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,343,358,371,376,385,],[8,-239,8,36,38,36,47,-240,-57,-240,61,-56,-240,61,-240,61,-233,8,86,36,-53,61,99,100,36,-75,47,-67,61,-58,124,61,61,61,-59,61,159,124,-232,-52,124,-144,-143,124,-142,124,-145,61,61,61,-36,-56,-74,-66,124,124,217,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,61,-240,-240,159,-35,61,124,124,36,-26,284,-44,124,61,124,124,308,124,124,-207,308,124,308,124,124,-25,-43,284,346,124,-190,-180,-191,-182,-185,-188,-192,-181,-189,124,-186,-187,-183,-184,124,124,346,124,-240,]),'SHORT_ASSIGNMENT':([284,346,],[320,320,]),'$end':([3,4,5,6,9,10,11,12,25,37,],[-1,0,-239,-240,-224,-240,-223,-227,-225,-226,]),'AND':([5,91,107,115,116,117,119,120,121,122,123,124,129,130,133,134,135,136,137,165,166,167,168,169,170,171,172,173,174,176,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,205,215,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,243,244,248,249,250,252,253,258,264,270,273,277,282,284,287,289,294,299,300,301,305,306,307,313,315,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,338,340,342,343,346,351,353,357,358,363,367,371,376,385,],[-239,137,137,137,-107,-144,-143,-90,-92,137,-142,-103,-117,-139,-105,137,-89,195,-145,-140,-141,-95,-96,-94,-93,-109,137,-110,137,-97,195,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,-240,195,-106,-91,-128,195,137,-132,195,195,-122,-131,-135,-130,-134,-125,-133,195,-129,-123,-136,-124,195,195,137,137,-44,-111,137,-108,195,195,137,137,137,137,-207,137,-103,195,137,137,195,-114,-146,195,-43,195,137,137,195,137,-190,-180,-191,-182,-185,-188,-192,-181,-189,137,-186,-187,-183,-184,195,195,-112,137,-103,195,195,195,137,-113,195,137,137,-240,]),'MALLOC':([107,],[162,]),'MODULO':([116,120,121,124,129,130,133,135,136,165,166,167,168,169,170,171,173,176,177,215,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,253,284,287,299,300,301,305,307,319,338,340,342,346,351,353,357,363,367,],[-107,-90,-92,-103,-117,-139,-105,-89,187,-140,-141,-95,-96,-94,-93,-109,-110,-97,187,187,-106,-91,187,187,187,187,187,187,187,-135,-130,187,187,187,187,-129,187,187,187,187,187,-111,-108,187,187,-103,187,187,-114,-146,187,187,187,187,187,-112,-103,187,187,187,-113,187,]),'GOTO':([5,205,243,244,306,313,385,],[-239,-240,267,-44,-43,267,-240,]),'FOR':([5,205,243,244,306,313,385,],[-239,-240,277,-44,-43,277,-240,]),'PACKAGE':([0,],[2,]),'COMPARE_AND':([116,120,121,124,129,130,133,135,136,165,166,167,168,169,170,171,173,176,177,215,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,253,284,287,299,300,301,305,307,319,338,340,342,346,351,353,357,363,367,],[-107,-90,-92,-103,-117,-139,-105,-89,197,-140,-141,-95,-96,-94,-93,-109,-110,-97,197,197,-106,-91,-128,-121,-132,197,-120,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,-119,-126,-111,-108,197,197,-103,197,197,-114,-146,197,197,197,197,197,-112,-103,197,197,197,-113,197,]),'LSHIFT_EQUAL':([116,118,120,121,124,129,130,133,135,165,166,167,168,169,170,171,173,176,180,193,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,284,286,287,300,301,342,346,351,363,],[-107,-61,-90,-92,-103,-117,-139,-105,-89,-140,-141,-95,-96,-94,-93,-109,-110,-97,-60,-63,-106,-91,-128,-121,-132,-118,-120,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,-119,-126,-111,-108,-62,-103,321,-240,-114,-146,-112,-103,-240,-113,]),'RSQUARE':([55,57,58,60,62,63,64,65,67,68,71,72,74,89,90,95,97,99,116,120,121,124,129,130,133,135,139,140,141,142,144,145,165,166,167,168,169,170,171,173,176,200,214,215,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,240,248,249,250,255,298,299,300,301,303,342,357,363,],[-11,-3,-4,-2,-15,-9,-14,93,-6,-7,-8,-13,-5,-29,-28,143,-12,-10,-107,-90,-92,-103,-117,-139,-105,-89,-104,-22,-17,-21,-19,201,-140,-141,-95,-96,-94,-93,-109,-110,-97,-20,-138,250,-106,-91,-128,-121,-132,-118,-120,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,-119,-126,-18,-111,-240,-108,-84,342,-137,-114,-146,-23,-112,363,-113,]),'XOR':([116,120,121,124,129,130,133,135,136,165,166,167,168,169,170,171,173,176,177,215,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,253,284,287,299,300,301,305,307,319,338,340,342,346,351,353,357,363,367,],[-107,-90,-92,-103,-117,-139,-105,-89,191,-140,-141,-95,-96,-94,-93,-109,-110,-97,191,191,-106,-91,-128,191,-132,191,191,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,191,191,-111,-108,191,191,-103,191,191,-114,-146,191,191,191,191,191,-112,-103,191,191,191,-113,191,]),'EQUALS':([47,55,57,58,59,60,62,63,64,67,68,71,72,74,79,89,90,97,99,116,118,120,121,124,129,130,133,135,139,140,141,165,166,167,168,169,170,171,173,176,180,193,200,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,240,248,250,252,255,284,286,287,300,301,303,342,346,351,363,],[83,-11,-3,-4,91,-2,-15,-9,-14,-6,-7,-8,-13,-5,107,-29,-28,-12,-10,-107,-61,-90,-92,-103,-117,-139,-105,-89,-104,-22,-17,-140,-141,-95,-96,-94,-93,-109,-110,-97,-60,-63,-20,-106,-91,-128,-121,-132,-118,-120,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,-119,-126,-18,-111,-108,-62,-84,-103,327,-240,-114,-146,-23,-112,-103,-240,-113,]),'ELSE':([296,370,374,],[-41,-163,382,]),'PLUSEQUAL':([116,118,120,121,124,129,130,133,135,165,166,167,168,169,170,171,173,176,180,193,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,284,286,287,300,301,342,346,351,363,],[-107,-61,-90,-92,-103,-117,-139,-105,-89,-140,-141,-95,-96,-94,-93,-109,-110,-97,-60,-63,-106,-91,-128,-121,-132,-118,-120,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,-119,-126,-111,-108,-62,-103,328,-240,-114,-146,-112,-103,-240,-113,]),'GREATERTHAN':([116,120,121,124,129,130,133,135,136,165,166,167,168,169,170,171,173,176,177,215,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,253,284,287,299,300,301,305,307,319,338,340,342,346,351,353,357,363,367,],[-107,-90,-92,-103,-117,-139,-105,-89,194,-140,-141,-95,-96,-94,-93,-109,-110,-97,194,194,-106,-91,194,194,-132,194,194,-122,-131,-135,-130,-134,-125,-133,194,-129,-123,194,-124,194,194,-111,-108,194,194,-103,194,194,-114,-146,194,194,194,194,194,-112,-103,194,194,194,-113,194,]),'FUNC':([5,6,9,10,11,12,25,37,],[-239,-240,-224,-240,21,-227,-225,-226,]),'GO':([5,205,243,244,306,313,385,],[-239,-240,258,-44,-43,258,-240,]),'VAR':([5,6,9,10,11,12,25,37,205,243,244,306,313,385,],[-239,-240,-224,-240,22,-227,-225,-226,-240,22,-44,-43,22,-240,]),'OREQUAL':([116,118,120,121,124,129,130,133,135,165,166,167,168,169,170,171,173,176,180,193,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,284,286,287,300,301,342,346,351,363,],[-107,-61,-90,-92,-103,-117,-139,-105,-89,-140,-141,-95,-96,-94,-93,-109,-110,-97,-60,-63,-106,-91,-128,-121,-132,-118,-120,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,-119,-126,-111,-108,-62,-103,332,-240,-114,-146,-112,-103,-240,-113,]),'IF':([5,205,243,244,306,313,382,385,],[-239,-240,294,-44,-43,294,294,-240,]),'IMAGINARY_LIT':([5,91,107,115,117,119,122,123,125,134,137,172,174,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,205,221,239,243,244,249,258,264,270,273,277,282,289,294,306,313,315,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,343,358,371,376,385,],[-239,-101,-101,-101,-144,-143,-101,-142,167,-101,-145,-101,-101,-101,-101,-101,-101,-101,-101,-101,-101,-101,-101,-101,-101,-101,-101,-101,-101,-101,-101,-101,-240,-101,-101,-101,-44,-101,-101,-101,-101,-101,-207,-101,-101,-101,-43,-101,-101,-101,-190,-180,-191,-182,-185,-188,-192,-181,-189,-101,-186,-187,-183,-184,-101,-101,-101,-101,-240,]),'MAP':([33,35,36,42,47,56,83,86,93,96,100,102,104,138,143,155,157,159,201,207,208,216,256,],[-57,66,-56,66,66,66,66,-58,66,66,-59,66,66,66,66,66,-36,-56,66,66,-35,66,66,]),'BOOL_LIT':([5,91,107,115,117,119,122,123,126,134,137,172,174,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,205,221,239,243,244,249,258,264,270,273,277,282,289,294,306,313,315,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,343,358,371,376,385,],[-239,-98,-98,-98,-144,-143,-98,-142,168,-98,-145,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-240,-98,-98,-98,-44,-98,-98,-98,-98,-98,-207,-98,-98,-98,-43,-98,-98,-98,-190,-180,-191,-182,-185,-188,-192,-181,-189,-98,-186,-187,-183,-184,-98,-98,-98,-98,-240,]),'TYPECAST':([5,91,107,115,117,119,122,123,134,137,172,174,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,205,221,239,243,244,249,258,264,270,273,277,282,289,294,306,313,315,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,343,358,371,376,385,],[-239,138,138,138,-144,-143,138,-142,138,-145,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,-240,138,138,138,-44,138,138,138,138,138,-207,138,138,138,-43,138,138,138,-190,-180,-191,-182,-185,-188,-192,-181,-189,138,-186,-187,-183,-184,138,138,138,138,-240,]),'RSHIFT':([116,120,121,124,129,130,133,135,136,165,166,167,168,169,170,171,173,176,177,215,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,253,284,287,299,300,301,305,307,319,338,340,342,346,351,353,357,363,367,],[-107,-90,-92,-103,-117,-139,-105,-89,181,-140,-141,-95,-96,-94,-93,-109,-110,-97,181,181,-106,-91,181,181,-132,181,181,181,-131,-135,-130,181,181,181,181,-129,181,181,181,181,181,-111,-108,181,181,-103,181,181,-114,-146,181,181,181,181,181,-112,-103,181,181,181,-113,181,]),'LESSTHAN_EQUAL':([116,120,121,124,129,130,133,135,136,165,166,167,168,169,170,171,173,176,177,215,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,253,284,287,299,300,301,305,307,319,338,340,342,346,351,353,357,363,367,],[-107,-90,-92,-103,-117,-139,-105,-89,196,-140,-141,-95,-96,-94,-93,-109,-110,-97,196,196,-106,-91,196,196,-132,196,196,-122,-131,-135,-130,-134,-125,-133,196,-129,-123,196,-124,196,196,-111,-108,196,196,-103,196,196,-114,-146,196,196,196,196,196,-112,-103,196,196,196,-113,196,]),'INT':([33,35,36,42,47,56,83,86,92,93,96,100,102,104,138,143,155,157,159,201,207,208,216,256,],[-57,67,-56,67,67,67,67,-58,67,67,67,-59,67,67,67,67,67,-36,-56,67,67,-35,67,67,]),'TIMESEQUAL':([116,118,120,121,124,129,130,133,135,165,166,167,168,169,170,171,173,176,180,193,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,284,286,287,300,301,342,346,351,363,],[-107,-61,-90,-92,-103,-117,-139,-105,-89,-140,-141,-95,-96,-94,-93,-109,-110,-97,-60,-63,-106,-91,-128,-121,-132,-118,-120,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,-119,-126,-111,-108,-62,-103,333,-240,-114,-146,-112,-103,-240,-113,]),'MINUSEQUAL':([116,118,120,121,124,129,130,133,135,165,166,167,168,169,170,171,173,176,180,193,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,284,286,287,300,301,342,346,351,363,],[-107,-61,-90,-92,-103,-117,-139,-105,-89,-140,-141,-95,-96,-94,-93,-109,-110,-97,-60,-63,-106,-91,-128,-121,-132,-118,-120,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,-119,-126,-111,-108,-62,-103,324,-240,-114,-146,-112,-103,-240,-113,]),'FLOAT':([33,35,36,42,47,56,83,86,92,93,96,100,102,104,138,143,155,157,159,201,207,208,216,256,],[-57,68,-56,68,68,68,68,-58,68,68,68,-59,68,68,68,68,68,-36,-56,68,68,-35,68,68,]),'FLOAT_LIT':([5,91,107,115,117,119,122,123,127,134,137,172,174,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,205,221,239,243,244,249,258,264,270,273,277,282,289,294,306,313,315,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,343,358,371,376,385,],[-239,-100,-100,-100,-144,-143,-100,-142,169,-100,-145,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-100,-240,-100,-100,-100,-44,-100,-100,-100,-100,-100,-207,-100,-100,-100,-43,-100,-100,-100,-190,-180,-191,-182,-185,-188,-192,-181,-189,-100,-186,-187,-183,-184,-100,-100,-100,-100,-240,]),'BREAK':([5,205,243,244,306,313,385,],[-239,-240,288,-44,-43,288,-240,]),'COMPARE_OR':([116,120,121,124,129,130,133,135,136,165,166,167,168,169,170,171,173,176,177,215,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,253,284,287,299,300,301,305,307,319,338,340,342,346,351,353,357,363,367,],[-107,-90,-92,-103,-117,-139,-105,-89,182,-140,-141,-95,-96,-94,-93,-109,-110,-97,182,182,-106,-91,-128,-121,-132,-118,-120,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,-119,-126,-111,-108,182,182,-103,182,182,-114,-146,182,182,182,182,182,-112,-103,182,182,182,-113,182,]),'INT_LIT':([5,65,91,94,107,115,117,119,122,123,128,134,137,172,174,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,205,209,221,239,243,244,247,249,258,264,270,273,277,282,289,294,306,313,315,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,343,358,371,376,385,],[-239,-99,-99,142,-99,-99,-144,-143,-99,-142,170,-99,-145,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-240,-99,-99,-99,-99,-44,297,-99,-99,-99,-99,-99,-207,-99,-99,-99,-43,-99,-99,-99,-190,-180,-191,-182,-185,-188,-192,-181,-189,-99,-186,-187,-183,-184,-99,-99,-99,-99,-240,]),'CONTINUE':([5,205,243,244,306,313,385,],[-239,-240,280,-44,-43,280,-240,]),'BOOL':([33,35,36,42,47,56,83,86,92,93,96,100,102,104,138,143,155,157,159,201,207,208,216,256,],[-57,71,-56,71,71,71,71,-58,71,71,71,-59,71,71,71,71,71,-36,-56,71,71,-35,71,71,]),'STRING_LIT':([5,8,14,26,28,29,30,31,48,49,91,107,113,115,117,119,122,123,131,134,137,172,174,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,205,221,239,243,244,249,258,264,270,273,277,282,289,294,306,313,315,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,343,358,371,376,385,],[-239,-229,-240,-240,-237,-236,51,-235,-233,-240,-102,-102,-232,-102,-144,-143,-102,-142,176,-102,-145,-102,-102,-102,-102,-102,-102,-102,-102,-102,-102,-102,-102,-102,-102,-102,-102,-102,-102,-102,-102,-102,-240,-102,-102,-102,-44,-102,-102,-102,-102,-102,-207,-102,-102,-102,-43,-102,-102,-102,-190,-180,-191,-182,-185,-188,-192,-181,-189,-102,-186,-187,-183,-184,-102,-102,-102,-102,-240,]),'NOT':([5,91,107,115,117,119,122,123,134,137,172,174,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,205,221,239,243,244,249,258,264,270,273,277,282,289,294,306,313,315,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,343,358,371,376,385,],[-239,122,122,122,-144,-143,122,-142,122,-145,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,-240,122,122,122,-44,122,122,122,122,122,-207,122,122,122,-43,122,122,122,-190,-180,-191,-182,-185,-188,-192,-181,-189,122,-186,-187,-183,-184,122,122,122,122,-240,]),'ANDEQUAL':([116,118,120,121,124,129,130,133,135,165,166,167,168,169,170,171,173,176,180,193,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,284,286,287,300,301,342,346,351,363,],[-107,-61,-90,-92,-103,-117,-139,-105,-89,-140,-141,-95,-96,-94,-93,-109,-110,-97,-60,-63,-106,-91,-128,-121,-132,-118,-120,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,-119,-126,-111,-108,-62,-103,331,-240,-114,-146,-112,-103,-240,-113,]),'DECREMENT':([116,120,121,124,129,130,133,135,165,166,167,168,169,170,171,173,176,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,284,287,300,301,342,346,351,363,],[-107,-90,-92,-103,-117,-139,-105,-89,-140,-141,-95,-96,-94,-93,-109,-110,-97,-106,-91,-128,-121,-132,-118,-120,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,-119,-126,-111,-108,-103,336,-114,-146,-112,-103,336,-113,]),'COMMA':([33,36,55,57,58,60,62,63,64,67,68,71,72,74,86,89,90,97,99,100,116,120,121,124,129,130,133,135,136,139,140,141,156,158,159,160,165,166,167,168,169,170,171,173,176,180,193,200,206,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,240,246,248,250,252,255,284,287,300,301,303,342,346,351,363,],[52,75,-11,-3,-4,-2,-15,-9,-14,-6,-7,-8,-13,-5,-58,-29,-28,-12,-10,-59,-107,-90,-92,-103,-117,-139,-105,-89,-240,-104,-22,-17,-40,207,75,-37,-140,-141,-95,-96,-94,-93,-109,-110,-97,221,-63,-20,-39,-106,-91,-128,-121,-132,-118,-120,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,-119,-126,-18,-38,-111,-108,-62,-84,-103,-240,-114,-146,-23,-112,-103,-240,-113,]),'TYPE':([5,6,9,10,11,12,25,33,35,36,37,42,47,56,83,86,92,93,96,100,102,104,138,143,155,157,159,201,205,207,208,216,243,244,256,306,313,385,],[-239,-240,-224,-240,24,-227,-225,-57,73,-56,-226,73,73,73,73,-58,73,73,73,-59,73,73,73,73,73,-36,-56,73,-240,73,-35,73,24,-44,73,-43,24,-240,]),'OR':([116,120,121,124,129,130,133,135,136,165,166,167,168,169,170,171,173,176,177,215,217,218,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,248,250,252,253,284,287,299,300,301,305,307,319,338,340,342,346,351,353,357,363,367,],[-107,-90,-92,-103,-117,-139,-105,-89,198,-140,-141,-95,-96,-94,-93,-109,-110,-97,198,198,-106,-91,-128,198,-132,198,198,-122,-131,-135,-130,-134,-125,-133,-127,-129,-123,-136,-124,198,-126,-111,-108,198,198,-103,198,198,-114,-146,198,198,198,198,198,-112,-103,198,198,198,-113,198,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'FunctionBody':([154,],[203,]),'Conversion':([91,107,115,122,134,172,174,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,221,239,243,249,258,264,270,273,282,289,294,313,315,320,330,343,358,371,376,],[116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,]),'ContinueStmt':([243,313,],[257,257,]),'ExpressionRep':([136,287,351,],[180,180,180,]),'ExpressionStmt':([243,313,315,371,],[259,259,259,259,]),'ScanStmt':([243,313,],[260,260,]),'Statement':([243,313,],[261,344,]),'IfStmt':([243,313,382,],[262,262,388,]),'FallThroughStmt':([243,313,],[263,263,]),'StatementRep':([205,385,],[243,243,]),'TypeToken':([35,42,47,56,83,92,93,96,102,104,138,143,155,201,207,216,256,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'AliasDecl':([24,80,],[44,44,]),'PackageNameDotOpt':([14,49,],[30,30,]),'TypeName':([35,42,47,56,83,92,93,96,102,104,138,143,155,201,207,216,256,],[60,60,60,60,60,139,60,60,60,60,60,60,60,60,60,60,60,]),'ExprCaseClause':([373,],[380,]),'ParametersList':([104,],[158,]),'ParameterDecl':([104,207,],[160,246,]),'FuncScope':([69,],[98,]),'FunctionName':([21,],[39,]),'LabeledStmt':([243,313,],[268,268,]),'KeyType':([96,],[145,]),'StatementList':([205,385,],[245,389,]),'TypeAssertion':([130,],[173,]),'ConditionOpt':([358,],[366,]),'EndScope_1':([355,359,370,379,391,],[361,368,374,386,392,]),'ElementType':([93,143,201,],[141,200,240,]),'RetTypeSet':([103,],[154,]),'PointerType':([35,42,47,56,83,93,96,102,104,138,143,155,201,207,216,256,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'EndScope':([101,103,255,],[147,153,303,]),'VarSpecRep':([41,],[77,]),'VarDecl':([11,243,313,],[23,23,23,]),'PrintStmt':([243,313,],[269,269,]),'ConstSpecRep':([34,],[53,]),'Operand':([91,107,115,122,134,172,174,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,221,239,243,249,258,264,270,273,282,289,294,313,315,320,330,343,358,371,376,],[133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,]),'TypeSpec':([24,80,],[46,111,]),'CCreateScope':([277,319,],[315,352,]),'Parameters':([76,102,],[102,148,]),'UnaryOp':([91,107,115,122,134,172,174,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,221,239,243,249,258,264,270,273,282,289,294,313,315,320,330,343,358,371,376,],[115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,]),'PackageName':([2,14,49,],[7,29,29,]),'SourceFile':([0,],[3,]),'ExpressionListPureOpt':([270,],[310,]),'Label':([243,267,280,288,313,],[271,309,318,318,271,]),'FunctionDecl':([11,],[16,]),'TopLevelDecl':([11,],[17,]),'ExprSwitchStmt':([243,313,],[272,272,]),'IdentifierList':([15,22,53,77,104,207,241,],[35,42,35,42,155,155,256,]),'IdentifierRep':([15,22,53,77,104,207,241,],[33,33,33,33,33,33,33,]),'Type':([35,42,47,56,83,93,96,102,104,138,143,155,201,207,216,256,],[59,79,82,89,112,140,144,149,156,199,140,206,140,156,251,304,]),'ImportDeclRep':([6,],[10,]),'GoStmt':([243,313,],[274,274,]),'DeferStmt':([243,313,],[275,275,]),'PackageClause':([0,],[1,]),'ResultOpt':([102,],[150,]),'IncDecStmt':([243,313,315,371,],[266,266,266,266,]),'GotoStmt':([243,313,],[276,276,]),'TopLevelDeclRep':([10,],[11,]),'C':([91,107,115,122,134,172,174,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,221,239,243,249,258,264,270,273,282,289,294,313,315,320,330,343,358,371,376,],[125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,]),'Semi':([1,13,17,85,87,106,111,254,261,345,366,],[6,25,37,113,114,161,164,302,306,358,371,]),'PrimaryExpr':([91,107,115,122,134,172,174,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,221,239,243,249,258,264,270,273,282,289,294,313,315,320,330,343,358,371,376,],[130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,]),'S':([91,107,115,122,134,172,174,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,221,239,243,249,258,264,270,273,282,289,294,313,315,320,330,343,358,371,376,],[131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,]),'StartSwitch':([360,],[369,]),'assign_op':([286,],[330,]),'Signature':([76,],[103,]),'Block':([154,339,349,362,390,],[204,355,359,370,391,]),'ExprCaseClauseList':([369,],[373,]),'SwitchStmt':([243,313,],[279,279,]),'VarSpec':([22,77,],[40,106,]),'Result':([102,],[152,]),'Assignment':([243,313,315,371,],[265,265,265,265,]),'ExpressionListTypeOpt':([172,],[211,]),'QualifiedIdent':([35,42,47,56,83,92,93,96,102,104,138,143,155,201,207,216,256,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'Literal':([91,107,115,122,134,172,174,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,221,239,243,249,258,264,270,273,282,289,294,313,315,320,330,343,358,371,376,],[135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,]),'ImportDecl':([10,],[13,]),'OperandName':([91,107,115,122,134,172,174,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,221,239,243,249,258,264,270,273,282,289,294,313,315,320,330,343,358,371,376,],[120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,]),'AssignOp':([286,],[322,]),'LabelOpt':([280,288,],[317,337,]),'FieldDeclRep':([202,],[241,]),'start':([0,],[4,]),'Declaration':([11,243,313,],[18,283,283,]),'Condition':([315,358,],[347,364,]),'StructType':([69,],[97,]),'B':([91,107,115,122,134,172,174,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,221,239,243,249,258,264,270,273,282,289,294,313,315,320,330,343,358,371,376,],[126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,]),'ConstSpec':([15,53,],[32,87,]),'F':([91,107,115,122,134,172,174,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,221,239,243,249,258,264,270,273,282,289,294,313,315,320,330,343,358,371,376,],[127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,]),'epsilon':([6,10,14,26,34,41,45,49,79,102,136,172,174,202,205,243,249,270,280,287,288,313,315,351,358,369,371,374,385,],[9,12,28,48,54,78,81,28,108,151,193,210,214,242,244,285,214,311,316,193,316,285,348,193,365,372,285,381,244,]),'ConditionBlockOpt':([315,],[349,]),'ExpressionList':([91,107,172,243,270,273,313,315,330,371,376,],[132,163,212,286,312,314,286,286,354,286,384,]),'SimpleStmt':([243,313,315,371,],[290,290,345,375,]),'ImportSpecRep':([26,],[49,]),'Expression':([91,107,134,172,174,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,221,239,243,249,258,264,270,273,282,289,294,313,315,320,330,343,358,371,376,],[136,136,177,136,215,219,220,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,252,253,287,299,305,307,136,136,319,338,340,287,351,353,136,357,367,287,136,]),'ImportPath':([30,],[50,]),'ExprSwitchCase':([373,],[377,]),'ExpressionOpt':([174,249,],[213,298,]),'ST':([35,42,47,56,83,93,96,102,104,138,143,155,201,207,216,256,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'TypeExprListOpt':([35,],[70,]),'ReturnStmt':([243,313,],[278,278,]),'ConstDecl':([11,243,313,],[19,19,19,]),'Slice':([130,],[171,]),'ArrayType':([35,42,47,56,83,93,96,102,104,138,143,155,201,207,216,256,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'ForStmt':([243,313,],[291,291,]),'Function':([76,],[101,]),'ImportSpec':([14,49,],[27,85,]),'TypeLit':([35,42,47,56,83,93,96,102,104,138,143,155,201,207,216,256,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'TypeSpecRep':([45,],[80,]),'CreateScope':([39,243,313,340,382,],[76,292,292,356,387,]),'SliceType':([35,42,47,56,83,93,96,102,104,138,143,155,201,207,216,256,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'TypeDecl':([11,243,313,],[20,20,20,]),'BaseType':([56,],[90,]),'I':([65,91,107,115,122,134,172,174,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,209,221,239,243,249,258,264,270,273,282,289,294,313,315,320,330,343,358,371,376,],[94,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,247,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,]),'IFSYM':([292,356,387,],[339,362,390,]),'UnaryExpr':([91,107,115,122,134,172,174,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,221,239,243,249,258,264,270,273,282,289,294,313,315,320,330,343,358,371,376,],[129,129,165,166,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,]),'ArrayLength':([65,],[95,]),'MapType':([35,42,47,56,83,93,96,102,104,138,143,155,201,207,216,256,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'ForClause':([315,],[350,]),'ShortVarDecl':([243,313,315,371,],[293,293,293,293,]),'TypeDef':([24,80,],[43,43,]),'FieldDecl':([241,],[254,]),'BreakStmt':([243,313,],[295,295,]),'BasicLit':([91,107,115,122,134,172,174,178,179,181,182,183,184,185,186,187,188,189,190,191,192,194,195,196,197,198,221,239,243,249,258,264,270,273,282,289,294,313,315,320,330,343,358,371,376,],[121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'ExpressionListOpt':([79,],[109,]),'ElseOpt':([374,],[383,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> SourceFile','start',1,'p_start','parser.py',242),
  ('Type -> TypeName','Type',1,'p_type','parser.py',251),
  ('Type -> TypeLit','Type',1,'p_type','parser.py',252),
  ('TypeName -> TypeToken','TypeName',1,'p_type_name','parser.py',256),
  ('TypeName -> QualifiedIdent','TypeName',1,'p_type_name','parser.py',257),
  ('TypeToken -> INT','TypeToken',1,'p_type_token','parser.py',267),
  ('TypeToken -> FLOAT','TypeToken',1,'p_type_token','parser.py',268),
  ('TypeToken -> BOOL','TypeToken',1,'p_type_token','parser.py',269),
  ('TypeToken -> STRING','TypeToken',1,'p_type_token','parser.py',270),
  ('TypeToken -> TYPE IDENTIFIER','TypeToken',2,'p_type_token','parser.py',271),
  ('TypeLit -> ArrayType','TypeLit',1,'p_type_lit','parser.py',307),
  ('TypeLit -> ST StructType','TypeLit',2,'p_type_lit','parser.py',308),
  ('TypeLit -> PointerType','TypeLit',1,'p_type_lit','parser.py',309),
  ('TypeLit -> MapType','TypeLit',1,'p_type_lit','parser.py',310),
  ('TypeLit -> SliceType','TypeLit',1,'p_type_lit','parser.py',311),
  ('ST -> <empty>','ST',0,'p_S_T','parser.py',318),
  ('SliceType -> LSQUARE RSQUARE ElementType','SliceType',3,'p_slice_type','parser.py',333),
  ('MapType -> MAP LSQUARE KeyType RSQUARE ElementType','MapType',5,'p_map_type','parser.py',342),
  ('KeyType -> Type','KeyType',1,'p_key_type','parser.py',349),
  ('ArrayType -> LSQUARE ArrayLength RSQUARE ElementType','ArrayType',4,'p_array_type','parser.py',356),
  ('ArrayLength -> I INT_LIT','ArrayLength',2,'p_array_length','parser.py',382),
  ('ElementType -> Type','ElementType',1,'p_element_type','parser.py',388),
  ('StructType -> FuncScope STRUCT LCURL FieldDeclRep RCURL EndScope','StructType',6,'p_struct_type','parser.py',393),
  ('FuncScope -> <empty>','FuncScope',0,'p_func_scope','parser.py',401),
  ('FieldDeclRep -> FieldDeclRep FieldDecl Semi','FieldDeclRep',3,'p_field_decl_rep','parser.py',409),
  ('FieldDeclRep -> epsilon','FieldDeclRep',1,'p_field_decl_rep','parser.py',410),
  ('FieldDecl -> IdentifierList Type','FieldDecl',2,'p_field_decl','parser.py',423),
  ('PointerType -> MULTIPLY BaseType','PointerType',2,'p_point_type','parser.py',444),
  ('BaseType -> Type','BaseType',1,'p_base_type','parser.py',452),
  ('Signature -> Parameters ResultOpt','Signature',2,'p_sign','parser.py',459),
  ('ResultOpt -> Result','ResultOpt',1,'p_result_opt','parser.py',485),
  ('ResultOpt -> epsilon','ResultOpt',1,'p_result_opt','parser.py',486),
  ('Result -> Parameters','Result',1,'p_result','parser.py',490),
  ('Result -> Type','Result',1,'p_result','parser.py',491),
  ('Parameters -> LPAREN ParametersList RPAREN','Parameters',3,'p_params','parser.py',497),
  ('Parameters -> LPAREN RPAREN','Parameters',2,'p_params','parser.py',498),
  ('ParametersList -> ParameterDecl','ParametersList',1,'p_param_list','parser.py',521),
  ('ParametersList -> ParametersList COMMA ParameterDecl','ParametersList',3,'p_param_list','parser.py',522),
  ('ParameterDecl -> IdentifierList Type','ParameterDecl',2,'p_param_decl','parser.py',534),
  ('ParameterDecl -> Type','ParameterDecl',1,'p_param_decl','parser.py',535),
  ('Block -> LCURL StatementList RCURL','Block',3,'p_block','parser.py',569),
  ('StatementList -> StatementRep','StatementList',1,'p_stat_list','parser.py',573),
  ('StatementRep -> StatementRep Statement Semi','StatementRep',3,'p_stat_rep','parser.py',577),
  ('StatementRep -> epsilon','StatementRep',1,'p_stat_rep','parser.py',578),
  ('Declaration -> ConstDecl','Declaration',1,'p_decl','parser.py',591),
  ('Declaration -> TypeDecl','Declaration',1,'p_decl','parser.py',592),
  ('Declaration -> VarDecl','Declaration',1,'p_decl','parser.py',593),
  ('TopLevelDecl -> Declaration','TopLevelDecl',1,'p_toplevel_decl','parser.py',597),
  ('TopLevelDecl -> FunctionDecl','TopLevelDecl',1,'p_toplevel_decl','parser.py',598),
  ('ConstDecl -> CONST ConstSpec','ConstDecl',2,'p_const_decl','parser.py',605),
  ('ConstDecl -> CONST LPAREN ConstSpecRep RPAREN','ConstDecl',4,'p_const_decl','parser.py',606),
  ('ConstSpecRep -> ConstSpecRep ConstSpec Semi','ConstSpecRep',3,'p_const_spec_rep','parser.py',613),
  ('ConstSpecRep -> epsilon','ConstSpecRep',1,'p_const_spec_rep','parser.py',614),
  ('ConstSpec -> IdentifierList TypeExprListOpt','ConstSpec',2,'p_const_spec','parser.py',623),
  ('TypeExprListOpt -> Type EQUALS ExpressionList','TypeExprListOpt',3,'p_type_expr_list','parser.py',645),
  ('IdentifierList -> IDENTIFIER','IdentifierList',1,'p_identifier_list','parser.py',659),
  ('IdentifierList -> IdentifierRep','IdentifierList',1,'p_identifier_list','parser.py',660),
  ('IdentifierRep -> IdentifierRep COMMA IDENTIFIER','IdentifierRep',3,'p_identifier_rep','parser.py',677),
  ('IdentifierRep -> IDENTIFIER COMMA IDENTIFIER','IdentifierRep',3,'p_identifier_rep','parser.py',678),
  ('ExpressionList -> Expression ExpressionRep','ExpressionList',2,'p_expr_list','parser.py',709),
  ('ExpressionList -> NULL','ExpressionList',1,'p_expr_list','parser.py',710),
  ('ExpressionRep -> ExpressionRep COMMA Expression','ExpressionRep',3,'p_expr_rep','parser.py',727),
  ('ExpressionRep -> epsilon','ExpressionRep',1,'p_expr_rep','parser.py',728),
  ('TypeDecl -> TYPE TypeSpec','TypeDecl',2,'p_type_decl','parser.py',749),
  ('TypeDecl -> TYPE LPAREN TypeSpecRep RPAREN','TypeDecl',4,'p_type_decl','parser.py',750),
  ('TypeSpecRep -> TypeSpecRep TypeSpec Semi','TypeSpecRep',3,'p_type_spec_rep','parser.py',757),
  ('TypeSpecRep -> epsilon','TypeSpecRep',1,'p_type_spec_rep','parser.py',758),
  ('TypeSpec -> AliasDecl','TypeSpec',1,'p_type_spec','parser.py',765),
  ('TypeSpec -> TypeDef','TypeSpec',1,'p_type_spec','parser.py',766),
  ('AliasDecl -> IDENTIFIER EQUALS Type','AliasDecl',3,'p_alias_decl','parser.py',770),
  ('TypeDef -> IDENTIFIER Type','TypeDef',2,'p_type_def','parser.py',782),
  ('VarDecl -> VAR VarSpec','VarDecl',2,'p_var_decl','parser.py',795),
  ('VarDecl -> VAR LPAREN VarSpecRep RPAREN','VarDecl',4,'p_var_decl','parser.py',796),
  ('VarSpecRep -> VarSpecRep VarSpec Semi','VarSpecRep',3,'p_var_spec_rep','parser.py',803),
  ('VarSpecRep -> epsilon','VarSpecRep',1,'p_var_spec_rep','parser.py',804),
  ('VarSpec -> IdentifierList Type ExpressionListOpt','VarSpec',3,'p_var_spec','parser.py',814),
  ('ExpressionListOpt -> EQUALS ExpressionList','ExpressionListOpt',2,'p_expr_list_opt','parser.py',889),
  ('ExpressionListOpt -> epsilon','ExpressionListOpt',1,'p_expr_list_opt','parser.py',890),
  ('ExpressionListOpt -> EQUALS MALLOC LPAREN I INT_LIT RPAREN','ExpressionListOpt',6,'p_expr_list_opt','parser.py',891),
  ('ShortVarDecl -> IDENTIFIER SHORT_ASSIGNMENT Expression','ShortVarDecl',3,'p_short_var_decl','parser.py',905),
  ('FunctionDecl -> FUNC FunctionName CreateScope Function EndScope','FunctionDecl',5,'p_func_decl','parser.py',936),
  ('FunctionDecl -> FUNC FunctionName CreateScope Signature EndScope','FunctionDecl',5,'p_func_decl','parser.py',937),
  ('CreateScope -> <empty>','CreateScope',0,'p_create_scope','parser.py',959),
  ('EndScope -> <empty>','EndScope',0,'p_end_scope','parser.py',963),
  ('FunctionName -> IDENTIFIER','FunctionName',1,'p_func_name','parser.py',967),
  ('Function -> Signature RetTypeSet FunctionBody','Function',3,'p_func','parser.py',979),
  ('RetTypeSet -> <empty>','RetTypeSet',0,'p_ret_type_set','parser.py',998),
  ('FunctionBody -> Block','FunctionBody',1,'p_func_body','parser.py',1012),
  ('Operand -> Literal','Operand',1,'p_operand','parser.py',1024),
  ('Operand -> OperandName','Operand',1,'p_operand','parser.py',1025),
  ('Operand -> LPAREN Expression RPAREN','Operand',3,'p_operand','parser.py',1026),
  ('Literal -> BasicLit','Literal',1,'p_literal','parser.py',1033),
  ('BasicLit -> I INT_LIT','BasicLit',2,'p_basic_lit','parser.py',1038),
  ('BasicLit -> F FLOAT_LIT','BasicLit',2,'p_basic_lit','parser.py',1039),
  ('BasicLit -> C IMAGINARY_LIT','BasicLit',2,'p_basic_lit','parser.py',1040),
  ('BasicLit -> B BOOL_LIT','BasicLit',2,'p_basic_lit','parser.py',1041),
  ('BasicLit -> S STRING_LIT','BasicLit',2,'p_basic_lit','parser.py',1042),
  ('B -> <empty>','B',0,'p_B','parser.py',1062),
  ('I -> <empty>','I',0,'p_I','parser.py',1068),
  ('F -> <empty>','F',0,'p_F','parser.py',1074),
  ('C -> <empty>','C',0,'p_C','parser.py',1080),
  ('S -> <empty>','S',0,'p_S','parser.py',1086),
  ('OperandName -> IDENTIFIER','OperandName',1,'p_operand_name','parser.py',1092),
  ('QualifiedIdent -> IDENTIFIER DOT TypeName','QualifiedIdent',3,'p_qualified_ident','parser.py',1138),
  ('PrimaryExpr -> Operand','PrimaryExpr',1,'p_prim_expr','parser.py',1150),
  ('PrimaryExpr -> PrimaryExpr DOT IDENTIFIER','PrimaryExpr',3,'p_prim_expr','parser.py',1151),
  ('PrimaryExpr -> Conversion','PrimaryExpr',1,'p_prim_expr','parser.py',1152),
  ('PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE','PrimaryExpr',4,'p_prim_expr','parser.py',1153),
  ('PrimaryExpr -> PrimaryExpr Slice','PrimaryExpr',2,'p_prim_expr','parser.py',1154),
  ('PrimaryExpr -> PrimaryExpr TypeAssertion','PrimaryExpr',2,'p_prim_expr','parser.py',1155),
  ('PrimaryExpr -> PrimaryExpr LPAREN ExpressionListTypeOpt RPAREN','PrimaryExpr',4,'p_prim_expr','parser.py',1156),
  ('Slice -> LSQUARE ExpressionOpt COLON ExpressionOpt RSQUARE','Slice',5,'p_slice','parser.py',1398),
  ('Slice -> LSQUARE ExpressionOpt COLON Expression COLON Expression RSQUARE','Slice',7,'p_slice','parser.py',1399),
  ('TypeAssertion -> DOT LPAREN Type RPAREN','TypeAssertion',4,'p_type_assert','parser.py',1407),
  ('ExpressionListTypeOpt -> ExpressionList','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',1412),
  ('ExpressionListTypeOpt -> epsilon','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',1413),
  ('Expression -> UnaryExpr','Expression',1,'p_expr','parser.py',1417),
  ('Expression -> Expression COMPARE_OR Expression','Expression',3,'p_expr','parser.py',1418),
  ('Expression -> Expression COMPARE_AND Expression','Expression',3,'p_expr','parser.py',1419),
  ('Expression -> Expression EQEQ Expression','Expression',3,'p_expr','parser.py',1420),
  ('Expression -> Expression NOTEQUALS Expression','Expression',3,'p_expr','parser.py',1421),
  ('Expression -> Expression LESSTHAN Expression','Expression',3,'p_expr','parser.py',1422),
  ('Expression -> Expression GREATERTHAN Expression','Expression',3,'p_expr','parser.py',1423),
  ('Expression -> Expression LESSTHAN_EQUAL Expression','Expression',3,'p_expr','parser.py',1424),
  ('Expression -> Expression GREATERTHAN_EQUAL Expression','Expression',3,'p_expr','parser.py',1425),
  ('Expression -> Expression OR Expression','Expression',3,'p_expr','parser.py',1426),
  ('Expression -> Expression XOR Expression','Expression',3,'p_expr','parser.py',1427),
  ('Expression -> Expression ANDXOR Expression','Expression',3,'p_expr','parser.py',1428),
  ('Expression -> Expression DIVIDE Expression','Expression',3,'p_expr','parser.py',1429),
  ('Expression -> Expression MODULO Expression','Expression',3,'p_expr','parser.py',1430),
  ('Expression -> Expression LSHIFT Expression','Expression',3,'p_expr','parser.py',1431),
  ('Expression -> Expression RSHIFT Expression','Expression',3,'p_expr','parser.py',1432),
  ('Expression -> Expression PLUS Expression','Expression',3,'p_expr','parser.py',1433),
  ('Expression -> Expression MINUS Expression','Expression',3,'p_expr','parser.py',1434),
  ('Expression -> Expression MULTIPLY Expression','Expression',3,'p_expr','parser.py',1435),
  ('Expression -> Expression AND Expression','Expression',3,'p_expr','parser.py',1436),
  ('ExpressionOpt -> Expression','ExpressionOpt',1,'p_expr_opt','parser.py',1544),
  ('ExpressionOpt -> epsilon','ExpressionOpt',1,'p_expr_opt','parser.py',1545),
  ('UnaryExpr -> PrimaryExpr','UnaryExpr',1,'p_unary_expr','parser.py',1549),
  ('UnaryExpr -> UnaryOp UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',1550),
  ('UnaryExpr -> NOT UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',1551),
  ('UnaryOp -> PLUS','UnaryOp',1,'p_unary_op','parser.py',1601),
  ('UnaryOp -> MINUS','UnaryOp',1,'p_unary_op','parser.py',1602),
  ('UnaryOp -> MULTIPLY','UnaryOp',1,'p_unary_op','parser.py',1603),
  ('UnaryOp -> AND','UnaryOp',1,'p_unary_op','parser.py',1604),
  ('Conversion -> TYPECAST Type LPAREN Expression RPAREN','Conversion',5,'p_conversion','parser.py',1618),
  ('Statement -> Declaration','Statement',1,'p_statement','parser.py',1626),
  ('Statement -> LabeledStmt','Statement',1,'p_statement','parser.py',1627),
  ('Statement -> SimpleStmt','Statement',1,'p_statement','parser.py',1628),
  ('Statement -> ReturnStmt','Statement',1,'p_statement','parser.py',1629),
  ('Statement -> BreakStmt','Statement',1,'p_statement','parser.py',1630),
  ('Statement -> ContinueStmt','Statement',1,'p_statement','parser.py',1631),
  ('Statement -> GotoStmt','Statement',1,'p_statement','parser.py',1632),
  ('Statement -> CreateScope IFSYM Block EndScope_1','Statement',4,'p_statement','parser.py',1633),
  ('Statement -> IfStmt','Statement',1,'p_statement','parser.py',1634),
  ('Statement -> SwitchStmt','Statement',1,'p_statement','parser.py',1635),
  ('Statement -> ForStmt','Statement',1,'p_statement','parser.py',1636),
  ('Statement -> DeferStmt','Statement',1,'p_statement','parser.py',1637),
  ('Statement -> FallThroughStmt','Statement',1,'p_statement','parser.py',1638),
  ('Statement -> GoStmt','Statement',1,'p_statement','parser.py',1639),
  ('Statement -> PrintStmt','Statement',1,'p_statement','parser.py',1640),
  ('Statement -> ScanStmt','Statement',1,'p_statement','parser.py',1641),
  ('EndScope_1 -> <empty>','EndScope_1',0,'p_end_scope_new','parser.py',1648),
  ('PrintStmt -> PRINT ExpressionList','PrintStmt',2,'p_print_stmt','parser.py',1655),
  ('ScanStmt -> SCAN Expression','ScanStmt',2,'p_scan_stmt','parser.py',1680),
  ('FallThroughStmt -> FALLTHROUGH','FallThroughStmt',1,'p_fallthrough_stmt','parser.py',1704),
  ('GoStmt -> GO Expression','GoStmt',2,'p_go_stmt','parser.py',1708),
  ('DeferStmt -> DEFER Expression','DeferStmt',2,'p_defer_stmt','parser.py',1714),
  ('SimpleStmt -> epsilon','SimpleStmt',1,'p_simple_stmt','parser.py',1719),
  ('SimpleStmt -> ExpressionStmt','SimpleStmt',1,'p_simple_stmt','parser.py',1720),
  ('SimpleStmt -> IncDecStmt','SimpleStmt',1,'p_simple_stmt','parser.py',1721),
  ('SimpleStmt -> Assignment','SimpleStmt',1,'p_simple_stmt','parser.py',1722),
  ('SimpleStmt -> ShortVarDecl','SimpleStmt',1,'p_simple_stmt','parser.py',1723),
  ('LabeledStmt -> Label COLON Statement','LabeledStmt',3,'p_labeled_statements','parser.py',1728),
  ('Label -> IDENTIFIER','Label',1,'p_label','parser.py',1746),
  ('ExpressionStmt -> Expression','ExpressionStmt',1,'p_expression_stmt','parser.py',1751),
  ('IncDecStmt -> Expression INCREMENT','IncDecStmt',2,'p_inc_dec','parser.py',1757),
  ('IncDecStmt -> Expression DECREMENT','IncDecStmt',2,'p_inc_dec','parser.py',1758),
  ('Assignment -> ExpressionList assign_op ExpressionList','Assignment',3,'p_assignment','parser.py',1765),
  ('assign_op -> AssignOp','assign_op',1,'p_assign_op','parser.py',1809),
  ('AssignOp -> PLUSEQUAL','AssignOp',1,'p_AssignOp','parser.py',1813),
  ('AssignOp -> MINUSEQUAL','AssignOp',1,'p_AssignOp','parser.py',1814),
  ('AssignOp -> TIMESEQUAL','AssignOp',1,'p_AssignOp','parser.py',1815),
  ('AssignOp -> DIVIDE_EQUAL','AssignOp',1,'p_AssignOp','parser.py',1816),
  ('AssignOp -> MODEQUAL','AssignOp',1,'p_AssignOp','parser.py',1817),
  ('AssignOp -> ANDEQUAL','AssignOp',1,'p_AssignOp','parser.py',1818),
  ('AssignOp -> OREQUAL','AssignOp',1,'p_AssignOp','parser.py',1819),
  ('AssignOp -> XOREQUAL','AssignOp',1,'p_AssignOp','parser.py',1820),
  ('AssignOp -> ANDXOR_EQUAL','AssignOp',1,'p_AssignOp','parser.py',1821),
  ('AssignOp -> LSHIFT_EQUAL','AssignOp',1,'p_AssignOp','parser.py',1822),
  ('AssignOp -> RSHIFT_EQUAL','AssignOp',1,'p_AssignOp','parser.py',1823),
  ('AssignOp -> EQUALS','AssignOp',1,'p_AssignOp','parser.py',1824),
  ('IfStmt -> IF Expression CreateScope IFSYM Block EndScope_1 ElseOpt','IfStmt',7,'p_if_statement','parser.py',1830),
  ('IFSYM -> <empty>','IFSYM',0,'p_if_sym','parser.py',1847),
  ('ElseOpt -> ELSE IfStmt','ElseOpt',2,'p_else_opt','parser.py',1853),
  ('ElseOpt -> ELSE CreateScope IFSYM Block EndScope_1','ElseOpt',5,'p_else_opt','parser.py',1854),
  ('ElseOpt -> epsilon','ElseOpt',1,'p_else_opt','parser.py',1855),
  ('SwitchStmt -> ExprSwitchStmt','SwitchStmt',1,'p_switch_statement','parser.py',1867),
  ('ExprSwitchStmt -> SWITCH Expression CCreateScope LCURL StartSwitch ExprCaseClauseList RCURL EndScope_1','ExprSwitchStmt',8,'p_ExprSwitchStmt','parser.py',1871),
  ('StartSwitch -> <empty>','StartSwitch',0,'p_start_switch','parser.py',1902),
  ('ExprCaseClauseList -> epsilon','ExprCaseClauseList',1,'p_ExprCaseClauseList','parser.py',1918),
  ('ExprCaseClauseList -> ExprCaseClauseList ExprCaseClause','ExprCaseClauseList',2,'p_ExprCaseClauseList','parser.py',1919),
  ('ExprCaseClause -> ExprSwitchCase COLON StatementList','ExprCaseClause',3,'p_ExprCaseClause','parser.py',1935),
  ('ExprSwitchCase -> CASE ExpressionList','ExprSwitchCase',2,'p_ExprSwitchCase','parser.py',1958),
  ('ExprSwitchCase -> DEFAULT','ExprSwitchCase',1,'p_ExprSwitchCase','parser.py',1959),
  ('ForStmt -> FOR CCreateScope ConditionBlockOpt Block EndScope_1','ForStmt',5,'p_for','parser.py',1983),
  ('CCreateScope -> <empty>','CCreateScope',0,'p_c_create_scope','parser.py',1996),
  ('ConditionBlockOpt -> epsilon','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',2001),
  ('ConditionBlockOpt -> Condition','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',2002),
  ('ConditionBlockOpt -> ForClause','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',2003),
  ('Condition -> Expression','Condition',1,'p_condition','parser.py',2014),
  ('ForClause -> SimpleStmt Semi ConditionOpt Semi SimpleStmt','ForClause',5,'p_forclause','parser.py',2019),
  ('ConditionOpt -> epsilon','ConditionOpt',1,'p_conditionopt','parser.py',2038),
  ('ConditionOpt -> Condition','ConditionOpt',1,'p_conditionopt','parser.py',2039),
  ('ReturnStmt -> RETURN ExpressionListPureOpt','ReturnStmt',2,'p_return','parser.py',2046),
  ('ExpressionListPureOpt -> ExpressionList','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',2084),
  ('ExpressionListPureOpt -> epsilon','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',2085),
  ('BreakStmt -> BREAK LabelOpt','BreakStmt',2,'p_break','parser.py',2090),
  ('ContinueStmt -> CONTINUE LabelOpt','ContinueStmt',2,'p_continue','parser.py',2094),
  ('LabelOpt -> Label','LabelOpt',1,'p_labelopt','parser.py',2098),
  ('LabelOpt -> epsilon','LabelOpt',1,'p_labelopt','parser.py',2099),
  ('GotoStmt -> GOTO Label','GotoStmt',2,'p_goto','parser.py',2104),
  ('SourceFile -> PackageClause Semi ImportDeclRep TopLevelDeclRep','SourceFile',4,'p_source_file','parser.py',2110),
  ('ImportDeclRep -> epsilon','ImportDeclRep',1,'p_import_decl_rep','parser.py',2118),
  ('ImportDeclRep -> ImportDeclRep ImportDecl Semi','ImportDeclRep',3,'p_import_decl_rep','parser.py',2119),
  ('TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl Semi','TopLevelDeclRep',3,'p_toplevel_decl_rep','parser.py',2128),
  ('TopLevelDeclRep -> epsilon','TopLevelDeclRep',1,'p_toplevel_decl_rep','parser.py',2129),
  ('PackageClause -> PACKAGE PackageName','PackageClause',2,'p_package_clause','parser.py',2140),
  ('PackageName -> IDENTIFIER','PackageName',1,'p_package_name','parser.py',2145),
  ('ImportDecl -> IMPORT ImportSpec','ImportDecl',2,'p_import_decl','parser.py',2156),
  ('ImportDecl -> IMPORT LPAREN ImportSpecRep RPAREN','ImportDecl',4,'p_import_decl','parser.py',2157),
  ('ImportSpecRep -> ImportSpecRep ImportSpec Semi','ImportSpecRep',3,'p_import_spec_rep','parser.py',2164),
  ('ImportSpecRep -> epsilon','ImportSpecRep',1,'p_import_spec_rep','parser.py',2165),
  ('ImportSpec -> PackageNameDotOpt ImportPath','ImportSpec',2,'p_import_spec','parser.py',2173),
  ('PackageNameDotOpt -> DOT','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',2181),
  ('PackageNameDotOpt -> PackageName','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',2182),
  ('PackageNameDotOpt -> epsilon','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',2183),
  ('ImportPath -> STRING_LIT','ImportPath',1,'p_import_path','parser.py',2191),
  ('Semi -> SEMICOLON','Semi',1,'p_SemiColon','parser.py',2199),
  ('epsilon -> <empty>','epsilon',0,'p_empty','parser.py',2212),
]
