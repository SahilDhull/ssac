
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftIDENTIFIERrightEQUALSNOTleftINT_LITleftFLOAT_LITleftSTRING_LITleftCOMPARE_ORleftCOMPARE_ANDleftEQEQNOTEQUALSleftORleftXORleftANDANDXORleftLESSTHANGREATERTHANLESSTHAN_EQUALGREATERTHAN_EQUALleftPLUSMINUSleftLSHIFTRSHIFTleftMULTIPLYDIVIDEMODULOleftLPARENRPARENAND ANDEQUAL ANDXOR ANDXOR_EQUAL BOOL BREAK CASE COLON COMMA COMPARE_AND COMPARE_OR CONST CONTINUE DECREMENT DEFAULT DEFER DIVIDE DIVIDE_EQUAL DOT ELSE EQEQ EQUALS FALLTHROUGH FLOAT FLOAT_LIT FOR FUNC GO GOTO GREATERTHAN GREATERTHAN_EQUAL IDENTIFIER IF IMAGINARY_LIT IMPORT INCREMENT INT INT_LIT LCURL LESSTHAN LESSTHAN_EQUAL LPAREN LSHIFT LSHIFT_EQUAL LSQUARE MALLOC MAP MINUS MINUSEQUAL MODEQUAL MODULO MULTIPLY NOT NOTEQUALS OR OREQUAL PACKAGE PD PLUS PLUSEQUAL PRINT PS RCURL RETURN RPAREN RSHIFT RSHIFT_EQUAL RSQUARE SCAN SEMICOLON SHORT_ASSIGNMENT STRING STRING_LIT STRUCT SWITCH TIMESEQUAL TYPE TYPECAST VAR XOR XOREQUALstart : SourceFileType : TypeName\n            | TypeLitTypeName : TypeToken\n                | QualifiedIdentTypeToken : INT\n                 | FLOAT\n                 | BOOL\n                 | STRING\n                 | TYPE IDENTIFIERTypeLit : ArrayType\n               | ST StructType\n               | PointerType\n               | MapType\n               | SliceTypeST : SliceType : LSQUARE RSQUARE ElementTypeMapType : MAP LSQUARE KeyType RSQUARE ElementType KeyType : TypeArrayType : LSQUARE ArrayLength RSQUARE ElementType ArrayLength : I INT_LIT  ElementType : Type StructType : FuncScope STRUCT LCURL FieldDeclRep RCURL EndScopeFuncScope :  FieldDeclRep : FieldDeclRep FieldDecl SEMICOLON\n                  | epsilon  FieldDecl : IdentifierList TypePointerType : MULTIPLY BaseTypeBaseType : TypeSignature : Parameters ResultOptResultOpt : Result\n                 | epsilonResult : Parameters\n              | TypeParameters : LPAREN ParametersList RPAREN\n                  | LPAREN RPARENParametersList : ParameterDecl\n                      | ParametersList COMMA ParameterDeclParameterDecl : IdentifierList Type\n                     | TypeBlock : LCURL StatementList RCURLStatementList : StatementRepStatementRep : StatementRep Statement SEMICOLON\n                    | epsilonDeclaration : ConstDecl\n                 | TypeDecl\n                 | VarDeclTopLevelDecl : Declaration\n                  | FunctionDeclConstDecl : CONST ConstSpec\n                 | CONST LPAREN ConstSpecRep RPARENConstSpecRep : ConstSpecRep ConstSpec SEMICOLON\n                    | epsilonConstSpec : IdentifierList TypeExprListOptTypeExprListOpt : Type EQUALS ExpressionListIdentifierList : IDENTIFIER \n                      | IdentifierRepIdentifierRep : IdentifierRep COMMA IDENTIFIER\n                     | IDENTIFIER COMMA IDENTIFIERExpressionList : Expression ExpressionRepExpressionRep : ExpressionRep COMMA Expression\n                     | epsilonTypeDecl : TYPE TypeSpec\n                | TYPE LPAREN TypeSpecRep RPARENTypeSpecRep : TypeSpecRep TypeSpec SEMICOLON\n                   | epsilonTypeSpec : AliasDecl\n                | TypeDefAliasDecl : IDENTIFIER EQUALS TypeTypeDef : IDENTIFIER TypeVarDecl : VAR VarSpec\n               | VAR LPAREN VarSpecRep RPARENVarSpecRep : VarSpecRep VarSpec SEMICOLON\n                  | epsilonVarSpec : IdentifierList Type ExpressionListOptExpressionListOpt : EQUALS ExpressionList\n                         | epsilon\n                         | EQUALS MALLOC LPAREN I INT_LIT RPAREN ShortVarDecl : IDENTIFIER SHORT_ASSIGNMENT Expression FunctionDecl : FUNC FunctionName CreateScope Function EndScope\n                  | FUNC FunctionName CreateScope Signature EndScopeCreateScope : EndScope : FunctionName : IDENTIFIERFunction : Signature RetTypeSet FunctionBodyRetTypeSet : FunctionBody : BlockOperand : Literal\n               | OperandName\n               | LPAREN Expression RPARENLiteral : BasicLitBasicLit : I INT_LIT\n              | F FLOAT_LIT\n              | C IMAGINARY_LIT\n              | S STRING_LITI : F : C : S : OperandName : IDENTIFIERQualifiedIdent : IDENTIFIER DOT TypeNamePrimaryExpr : Operand\n                 | PrimaryExpr DOT IDENTIFIER\n                 | Conversion\n                 | PrimaryExpr LSQUARE Expression RSQUARE\n                 | PrimaryExpr Slice\n                 | PrimaryExpr TypeAssertion\n                 | PrimaryExpr LPAREN ExpressionListTypeOpt RPARENSlice : LSQUARE ExpressionOpt COLON ExpressionOpt RSQUARE\n             | LSQUARE ExpressionOpt COLON Expression COLON Expression RSQUARETypeAssertion : DOT LPAREN Type RPARENExpressionListTypeOpt : ExpressionList\n                             | epsilonExpression : UnaryExpr\n                  | Expression COMPARE_OR Expression\n                  | Expression COMPARE_AND Expression\n                  | Expression EQEQ Expression\n                  | Expression NOTEQUALS Expression\n                  | Expression LESSTHAN Expression\n                  | Expression GREATERTHAN Expression\n                  | Expression LESSTHAN_EQUAL Expression\n                  | Expression GREATERTHAN_EQUAL Expression\n                  | Expression OR Expression\n                  | Expression XOR Expression\n                  | Expression ANDXOR Expression\n                  | Expression DIVIDE Expression\n                  | Expression MODULO Expression\n                  | Expression LSHIFT Expression\n                  | Expression RSHIFT Expression\n                  | Expression PLUS Expression\n                  | Expression MINUS Expression\n                  | Expression MULTIPLY Expression\n                  | Expression AND ExpressionExpressionOpt : Expression\n                     | epsilonUnaryExpr : PrimaryExpr\n                 | UnaryOp UnaryExpr\n                 | NOT UnaryExprUnaryOp : PLUS\n               | MINUS\n               | MULTIPLY\n               | AND Conversion : TYPECAST Type LPAREN Expression RPARENStatement : Declaration\n               | LabeledStmt\n               | SimpleStmt\n               | ReturnStmt\n               | BreakStmt\n               | ContinueStmt\n               | GotoStmt\n               | CreateScope IFSYM Block EndScope_1\n               | IfStmt\n               | SwitchStmt\n               | ForStmt\n               | DeferStmt\n               | FallThroughStmt\n               | GoStmt\n               | PrintStmt\n               | ScanStmtEndScope_1 : PrintStmt : PRINT PD Expression\n               | PRINT PS ExpressionScanStmt : SCAN ExpressionFallThroughStmt : FALLTHROUGHGoStmt : GO ExpressionDeferStmt : DEFER Expression SimpleStmt : epsilon\n                 | ExpressionStmt\n                 | IncDecStmt\n                 | Assignment\n                 | ShortVarDecl  LabeledStmt : Label COLON Statement  Label : IDENTIFIER  ExpressionStmt : Expression  IncDecStmt : Expression INCREMENT\n                 | Expression DECREMENT  Assignment : ExpressionList assign_op ExpressionList assign_op : AssignOp AssignOp : PLUSEQUAL\n               | MINUSEQUAL\n               | TIMESEQUAL\n               | DIVIDE_EQUAL\n               | MODEQUAL\n               | ANDEQUAL\n               | OREQUAL\n               | XOREQUAL\n               | ANDXOR_EQUAL\n               | LSHIFT_EQUAL\n               | RSHIFT_EQUAL\n               | EQUALS  IfStmt : IF Expression CreateScope IFSYM Block EndScope_1 ElseOpt IFSYM :  ElseOpt : ELSE IfStmt\n              | ELSE CreateScope IFSYM Block EndScope_1\n              | epsilon  SwitchStmt : ExprSwitchStmtExprSwitchStmt : SWITCH Expression CreateScope LCURL StartSwitch ExprCaseClauseList RCURL EndScope_1StartSwitch : ExprCaseClauseList : epsilon\n                 | ExprCaseClauseList ExprCaseClause\n    ExprCaseClause : ExprSwitchCase COLON StatementList ExprSwitchCase : CASE ExpressionList\n                 | DEFAULT \n    ForStmt : FOR CreateScope ConditionBlockOpt Block EndScope_1ConditionBlockOpt : epsilon\n             | Condition\n             | ForClauseCondition : Expression ForClause : SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmtConditionOpt : epsilon\n          | Condition ReturnStmt : RETURN ExpressionListPureOptExpressionListPureOpt : ExpressionList\n             | epsilonBreakStmt : BREAK LabelOptContinueStmt : CONTINUE LabelOptLabelOpt : Label\n        | epsilon GotoStmt : GOTO Label SourceFile : PackageClause SEMICOLON ImportDeclRep TopLevelDeclRepImportDeclRep : epsilon\n           | ImportDeclRep ImportDecl SEMICOLONTopLevelDeclRep : TopLevelDeclRep TopLevelDecl SEMICOLON\n                     | epsilonPackageClause : PACKAGE PackageNamePackageName : IDENTIFIERImportDecl : IMPORT ImportSpec\n          | IMPORT LPAREN ImportSpecRep RPAREN  ImportSpecRep : ImportSpecRep ImportSpec SEMICOLON\n            | epsilon  ImportSpec : PackageNameDotOpt ImportPath  PackageNameDotOpt : DOT\n                        | PackageName\n                        | epsilon ImportPath : STRING_LIT epsilon : '
    
_lr_action_items = {end':([3,4,5,8,9,10,11,24,36,],[-1,0,-236,-221,-236,-220,-224,-222,-223,]),'IMAGINARY_LIT':([90,106,114,116,117,120,121,123,131,134,168,170,174,175,177,178,179,180,181,182,183,184,185,186,187,188,190,191,192,193,194,201,217,235,239,240,245,254,260,266,273,278,285,290,302,309,310,311,312,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,340,357,370,375,384,],[-98,-98,-98,-141,-140,-98,-139,164,-98,-142,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-236,-98,-98,-98,-44,-98,-98,-98,-98,-82,-98,-98,-98,-43,-98,-98,-98,-98,-98,-188,-178,-189,-180,-183,-186,-190,-179,-187,-98,-184,-185,-181,-182,-98,-98,-98,-98,-236,]),'MALLOC':([106,],[159,]),'PD':([269,],[311,]),'MODULO':([115,118,119,122,126,127,130,132,133,162,163,164,165,166,167,169,172,173,211,213,214,215,216,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,244,246,248,249,280,283,295,296,297,301,303,316,335,337,339,342,343,349,350,352,356,362,366,],[-104,-89,-91,-100,-114,-136,-102,-88,183,-137,-138,-94,-93,-92,-106,-107,-95,183,183,-103,-90,183,183,183,183,183,183,183,-132,-127,183,183,183,183,-126,183,183,183,183,183,-108,-105,183,183,-100,183,183,-111,-143,183,183,183,183,183,-109,183,183,183,-100,183,183,-110,183,]),'STRING':([32,34,35,41,46,55,82,85,91,92,95,99,101,103,135,140,152,154,156,197,203,204,212,252,],[-57,62,-56,62,62,62,62,-58,62,62,62,-59,62,62,62,62,62,-36,-56,62,62,-35,62,62,]),'FOR':([201,239,240,302,309,384,],[-236,273,-44,-43,273,-236,]),'PACKAGE':([0,],[2,]),'COMPARE_AND':([115,118,119,122,126,127,130,132,133,162,163,164,165,166,167,169,172,173,211,213,214,215,216,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,244,246,248,249,280,283,295,296,297,301,303,316,335,337,339,342,343,349,350,352,356,362,366,],[-104,-89,-91,-100,-114,-136,-102,-88,193,-137,-138,-94,-93,-92,-106,-107,-95,193,193,-103,-90,-125,-118,-129,193,-117,-119,-128,-132,-127,-131,-122,-130,-124,-126,-120,-133,-121,-116,-123,-108,-105,193,193,-100,193,193,-111,-143,193,193,193,193,193,-109,193,193,193,-100,193,193,-110,193,]),'LSHIFT_EQUAL':([115,118,119,122,126,127,130,132,162,163,164,165,166,167,169,172,176,189,213,214,215,216,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,244,246,248,280,282,283,296,297,339,349,350,362,],[-104,-89,-91,-100,-114,-136,-102,-88,-137,-138,-94,-93,-92,-106,-107,-95,-60,-62,-103,-90,-125,-118,-129,-115,-117,-119,-128,-132,-127,-131,-122,-130,-124,-126,-120,-133,-121,-116,-123,-108,-105,-61,-100,318,-236,-111,-143,-109,-236,-100,-110,]),'XOR':([115,118,119,122,126,127,130,132,133,162,163,164,165,166,167,169,172,173,211,213,214,215,216,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,244,246,248,249,280,283,295,296,297,301,303,316,335,337,339,342,343,349,350,352,356,362,366,],[-104,-89,-91,-100,-114,-136,-102,-88,187,-137,-138,-94,-93,-92,-106,-107,-95,187,187,-103,-90,-125,187,-129,187,187,-119,-128,-132,-127,-131,-122,-130,-124,-126,-120,-133,-121,187,187,-108,-105,187,187,-100,187,187,-111,-143,187,187,187,187,187,-109,187,187,187,-100,187,187,-110,187,]),'EQUALS':([46,54,56,57,58,59,61,62,63,66,67,70,71,73,78,88,89,96,98,115,118,119,122,126,127,130,132,136,137,138,162,163,164,165,166,167,169,172,176,189,196,213,214,215,216,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,236,244,246,248,251,280,282,283,296,297,299,339,349,350,362,],[82,-11,-3,-4,90,-2,-15,-9,-14,-6,-7,-8,-13,-5,106,-29,-28,-12,-10,-104,-89,-91,-100,-114,-136,-102,-88,-101,-22,-17,-137,-138,-94,-93,-92,-106,-107,-95,-60,-62,-20,-103,-90,-125,-118,-129,-115,-117,-119,-128,-132,-127,-131,-122,-130,-124,-126,-120,-133,-121,-116,-123,-18,-108,-105,-61,-83,-100,324,-236,-111,-143,-23,-109,-236,-100,-110,]),'ELSE':([292,369,373,],[-41,-160,381,]),'PLUSEQUAL':([115,118,119,122,126,127,130,132,162,163,164,165,166,167,169,172,176,189,213,214,215,216,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,244,246,248,280,282,283,296,297,339,349,350,362,],[-104,-89,-91,-100,-114,-136,-102,-88,-137,-138,-94,-93,-92,-106,-107,-95,-60,-62,-103,-90,-125,-118,-129,-115,-117,-119,-128,-132,-127,-131,-122,-130,-124,-126,-120,-133,-121,-116,-123,-108,-105,-61,-100,325,-236,-111,-143,-109,-236,-100,-110,]),'GREATERTHAN':([115,118,119,122,126,127,130,132,133,162,163,164,165,166,167,169,172,173,211,213,214,215,216,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,244,246,248,249,280,283,295,296,297,301,303,316,335,337,339,342,343,349,350,352,356,362,366,],[-104,-89,-91,-100,-114,-136,-102,-88,190,-137,-138,-94,-93,-92,-106,-107,-95,190,190,-103,-90,190,190,-129,190,190,-119,-128,-132,-127,-131,-122,-130,190,-126,-120,190,-121,190,190,-108,-105,190,190,-100,190,190,-111,-143,190,190,190,190,190,-109,190,190,190,-100,190,190,-110,190,]),'LSQUARE':([32,34,35,41,46,55,65,82,85,92,95,99,101,103,115,118,119,122,127,130,132,135,140,152,154,156,164,165,166,167,169,172,197,203,204,212,213,214,244,246,252,280,296,297,339,350,362,],[-57,64,-56,64,64,64,95,64,-58,64,64,-59,64,64,-104,-89,-91,-100,170,-102,-88,64,64,64,-36,-56,-94,-93,-92,-106,-107,-95,64,64,-35,64,-103,-90,-108,-105,64,-100,-111,-143,-109,-100,-110,]),'VAR':([5,8,9,10,11,24,36,201,239,240,302,309,384,],[-236,-221,-236,21,-224,-222,-223,-236,21,-44,-43,21,-236,]),'OREQUAL':([115,118,119,122,126,127,130,132,162,163,164,165,166,167,169,172,176,189,213,214,215,216,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,244,246,248,280,282,283,296,297,339,349,350,362,],[-104,-89,-91,-100,-114,-136,-102,-88,-137,-138,-94,-93,-92,-106,-107,-95,-60,-62,-103,-90,-125,-118,-129,-115,-117,-119,-128,-132,-127,-131,-122,-130,-124,-126,-120,-133,-121,-116,-123,-108,-105,-61,-100,329,-236,-111,-143,-109,-236,-100,-110,]),'TYPECAST':([90,106,114,116,117,120,121,131,134,168,170,174,175,177,178,179,180,181,182,183,184,185,186,187,188,190,191,192,193,194,201,217,235,239,240,245,254,260,266,273,278,285,290,302,309,310,311,312,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,340,357,370,375,384,],[135,135,135,-141,-140,135,-139,135,-142,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,-236,135,135,135,-44,135,135,135,135,-82,135,135,135,-43,135,135,135,135,135,-188,-178,-189,-180,-183,-186,-190,-179,-187,135,-184,-185,-181,-182,135,135,135,135,-236,]),'AND':([90,106,114,115,116,117,118,119,120,121,122,126,127,130,131,132,133,134,162,163,164,165,166,167,168,169,170,172,173,174,175,177,178,179,180,181,182,183,184,185,186,187,188,190,191,192,193,194,201,211,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,239,240,244,245,246,248,249,254,260,266,273,278,280,283,285,290,295,296,297,301,302,303,309,310,311,312,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,335,337,339,340,342,343,349,350,352,356,357,362,366,370,375,384,],[134,134,134,-104,-141,-140,-89,-91,134,-139,-100,-114,-136,-102,134,-88,191,-142,-137,-138,-94,-93,-92,-106,134,-107,134,-95,191,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,-236,191,-103,-90,-125,191,134,-129,191,191,-119,-128,-132,-127,-131,-122,-130,191,-126,-120,-133,-121,191,191,134,134,-44,-108,134,-105,191,191,134,134,134,-82,134,-100,191,134,134,191,-111,-143,191,-43,191,134,134,134,134,191,134,-188,-178,-189,-180,-183,-186,-190,-179,-187,134,-184,-185,-181,-182,191,191,-109,134,191,191,191,-100,191,191,134,-110,191,134,134,-236,]),'MAP':([32,34,35,41,46,55,82,85,92,95,99,101,103,135,140,152,154,156,197,203,204,212,252,],[-57,65,-56,65,65,65,65,-58,65,65,-59,65,65,65,65,65,-36,-56,65,65,-35,65,65,]),'RETURN':([201,239,240,302,309,384,],[-236,266,-44,-43,266,-236,]),'STRUCT':([32,34,35,41,46,55,68,82,85,92,95,97,99,101,103,135,140,152,154,156,197,203,204,212,252,],[-57,-16,-56,-16,-16,-16,-24,-16,-58,-16,-16,143,-59,-16,-16,-16,-16,-16,-36,-56,-16,-16,-35,-16,-16,]),'CASE':([239,240,302,359,368,371,372,379,384,388,],[-42,-44,-43,-198,-236,-199,375,-200,-236,-201,]),'LESSTHAN_EQUAL':([115,118,119,122,126,127,130,132,133,162,163,164,165,166,167,169,172,173,211,213,214,215,216,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,244,246,248,249,280,283,295,296,297,301,303,316,335,337,339,342,343,349,350,352,356,362,366,],[-104,-89,-91,-100,-114,-136,-102,-88,192,-137,-138,-94,-93,-92,-106,-107,-95,192,192,-103,-90,192,192,-129,192,192,-119,-128,-132,-127,-131,-122,-130,192,-126,-120,192,-121,192,192,-108,-105,192,192,-100,192,192,-111,-143,192,192,192,192,192,-109,192,192,192,-100,192,192,-110,192,]),'INT':([32,34,35,41,46,55,82,85,91,92,95,99,101,103,135,140,152,154,156,197,203,204,212,252,],[-57,66,-56,66,66,66,66,-58,66,66,66,-59,66,66,66,66,66,-36,-56,66,66,-35,66,66,]),'TIMESEQUAL':([115,118,119,122,126,127,130,132,162,163,164,165,166,167,169,172,176,189,213,214,215,216,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,244,246,248,280,282,283,296,297,339,349,350,362,],[-104,-89,-91,-100,-114,-136,-102,-88,-137,-138,-94,-93,-92,-106,-107,-95,-60,-62,-103,-90,-125,-118,-129,-115,-117,-119,-128,-132,-127,-131,-122,-130,-124,-126,-120,-133,-121,-116,-123,-108,-105,-61,-100,330,-236,-111,-143,-109,-236,-100,-110,]),'MINUSEQUAL':([115,118,119,122,126,127,130,132,162,163,164,165,166,167,169,172,176,189,213,214,215,216,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,244,246,248,280,282,283,296,297,339,349,350,362,],[-104,-89,-91,-100,-114,-136,-102,-88,-137,-138,-94,-93,-92,-106,-107,-95,-60,-62,-103,-90,-125,-118,-129,-115,-117,-119,-128,-132,-127,-131,-122,-130,-124,-126,-120,-133,-121,-116,-123,-108,-105,-61,-100,321,-236,-111,-143,-109,-236,-100,-110,]),'FLOAT':([32,34,35,41,46,55,82,85,91,92,95,99,101,103,135,140,152,154,156,197,203,204,212,252,],[-57,67,-56,67,67,67,67,-58,67,67,67,-59,67,67,67,67,67,-36,-56,67,67,-35,67,67,]),'FLOAT_LIT':([90,106,114,116,117,120,121,124,131,134,168,170,174,175,177,178,179,180,181,182,183,184,185,186,187,188,190,191,192,193,194,201,217,235,239,240,245,254,260,266,273,278,285,290,302,309,310,311,312,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,340,357,370,375,384,],[-97,-97,-97,-141,-140,-97,-139,165,-97,-142,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-236,-97,-97,-97,-44,-97,-97,-97,-97,-82,-97,-97,-97,-43,-97,-97,-97,-97,-97,-188,-178,-189,-180,-183,-186,-190,-179,-187,-97,-184,-185,-181,-182,-97,-97,-97,-97,-236,]),'DEFAULT':([239,240,302,359,368,371,372,379,384,388,],[-42,-44,-43,-198,-236,-199,377,-200,-236,-201,]),'BREAK':([201,239,240,302,309,384,],[-236,284,-44,-43,284,-236,]),'INT_LIT':([64,90,93,106,114,116,117,120,121,125,131,134,168,170,174,175,177,178,179,180,181,182,183,184,185,186,187,188,190,191,192,193,194,201,205,217,235,239,240,243,245,254,260,266,273,278,285,290,302,309,310,311,312,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,340,357,370,375,384,],[-96,-96,139,-96,-96,-141,-140,-96,-139,166,-96,-142,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-236,-96,-96,-96,-96,-44,293,-96,-96,-96,-96,-82,-96,-96,-96,-43,-96,-96,-96,-96,-96,-188,-178,-189,-180,-183,-186,-190,-179,-187,-96,-184,-185,-181,-182,-96,-96,-96,-96,-236,]),'CONTINUE':([201,239,240,302,309,384,],[-236,276,-44,-43,276,-236,]),'BOOL':([32,34,35,41,46,55,82,85,91,92,95,99,101,103,135,140,152,154,156,197,203,204,212,252,],[-57,70,-56,70,70,70,70,-58,70,70,70,-59,70,70,70,70,70,-36,-56,70,70,-35,70,70,]),'PS':([269,],[310,]),'STRING_LIT':([7,13,25,27,28,29,30,47,48,90,106,112,114,116,117,120,121,128,131,134,168,170,174,175,177,178,179,180,181,182,183,184,185,186,187,188,190,191,192,193,194,201,217,235,239,240,245,254,260,266,273,278,285,290,302,309,310,311,312,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,340,357,370,375,384,],[-226,-236,-236,-234,-233,50,-232,-230,-236,-99,-99,-229,-99,-141,-140,-99,-139,172,-99,-142,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-99,-236,-99,-99,-99,-44,-99,-99,-99,-99,-82,-99,-99,-99,-43,-99,-99,-99,-99,-99,-188,-178,-189,-180,-183,-186,-190,-179,-187,-99,-184,-185,-181,-182,-99,-99,-99,-99,-236,]),'NOT':([90,106,114,116,117,120,121,131,134,168,170,174,175,177,178,179,180,181,182,183,184,185,186,187,188,190,191,192,193,194,201,217,235,239,240,245,254,260,266,273,278,285,290,302,309,310,311,312,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,340,357,370,375,384,],[120,120,120,-141,-140,120,-139,120,-142,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,-236,120,120,120,-44,120,120,120,120,-82,120,120,120,-43,120,120,120,120,120,-188,-178,-189,-180,-183,-186,-190,-179,-187,120,-184,-185,-181,-182,120,120,120,120,-236,]),'ANDEQUAL':([115,118,119,122,126,127,130,132,162,163,164,165,166,167,169,172,176,189,213,214,215,216,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,244,246,248,280,282,283,296,297,339,349,350,362,],[-104,-89,-91,-100,-114,-136,-102,-88,-137,-138,-94,-93,-92,-106,-107,-95,-60,-62,-103,-90,-125,-118,-129,-115,-117,-119,-128,-132,-127,-131,-122,-130,-124,-126,-120,-133,-121,-116,-123,-108,-105,-61,-100,328,-236,-111,-143,-109,-236,-100,-110,]),'DECREMENT':([115,118,119,122,126,127,130,132,162,163,164,165,166,167,169,172,213,214,215,216,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,244,246,280,283,296,297,339,349,350,362,],[-104,-89,-91,-100,-114,-136,-102,-88,-137,-138,-94,-93,-92,-106,-107,-95,-103,-90,-125,-118,-129,-115,-117,-119,-128,-132,-127,-131,-122,-130,-124,-126,-120,-133,-121,-116,-123,-108,-105,-100,333,-111,-143,-109,333,-100,-110,]),'TYPE':([5,8,9,10,11,24,32,34,35,36,41,46,55,82,85,91,92,95,99,101,103,135,140,152,154,156,197,201,203,204,212,239,240,252,302,309,384,],[-236,-221,-236,23,-224,-222,-57,72,-56,-223,72,72,72,72,-58,72,72,72,-59,72,72,72,72,72,-36,-56,72,-236,72,-35,72,23,-44,72,-43,23,-236,]),'OR':([115,118,119,122,126,127,130,132,133,162,163,164,165,166,167,169,172,173,211,213,214,215,216,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,244,246,248,249,280,283,295,296,297,301,303,316,335,337,339,342,343,349,350,352,356,362,366,],[-104,-89,-91,-100,-114,-136,-102,-88,194,-137,-138,-94,-93,-92,-106,-107,-95,194,194,-103,-90,-125,194,-129,194,194,-119,-128,-132,-127,-131,-122,-130,-124,-126,-120,-133,-121,194,-123,-108,-105,194,194,-100,194,194,-111,-143,194,194,194,194,194,-109,194,194,194,-100,194,194,-110,194,]),'SCAN':([201,239,240,302,309,384,],[-236,285,-44,-43,285,-236,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'FunctionBody':([151,],[199,]),'Conversion':([90,106,114,120,131,168,170,174,175,177,178,179,180,181,182,183,184,185,186,187,188,190,191,192,193,194,217,235,239,245,254,260,266,278,285,290,309,310,311,312,317,327,340,357,370,375,],[115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,]),'ContinueStmt':([239,309,],[253,253,]),'ExpressionRep':([133,283,349,],[176,176,176,]),'ExpressionStmt':([239,309,312,370,],[255,255,255,255,]),'ScanStmt':([239,309,],[256,256,]),'Statement':([239,309,],[257,341,]),'IfStmt':([239,309,381,],[258,258,387,]),'FallThroughStmt':([239,309,],[259,259,]),'StatementRep':([201,384,],[239,239,]),'TypeToken':([34,41,46,55,82,91,92,95,101,103,135,140,152,197,203,212,252,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'AliasDecl':([23,79,],[43,43,]),'PackageNameDotOpt':([13,48,],[29,29,]),'TypeName':([34,41,46,55,82,91,92,95,101,103,135,140,152,197,203,212,252,],[59,59,59,59,59,136,59,59,59,59,59,59,59,59,59,59,59,]),'ExprCaseClause':([372,],[379,]),'ParametersList':([103,],[155,]),'ParameterDecl':([103,203,],[157,242,]),'FuncScope':([68,],[97,]),'FunctionName':([20,],[38,]),'LabeledStmt':([239,309,],[264,264,]),'KeyType':([95,],[142,]),'StatementList':([201,384,],[241,388,]),'TypeAssertion':([127,],[169,]),'ConditionOpt':([357,],[365,]),'EndScope_1':([354,358,369,378,390,],[360,367,373,385,391,]),'ElementType':([92,140,197,],[138,196,236,]),'RetTypeSet':([102,],[151,]),'PointerType':([34,41,46,55,82,92,95,101,103,135,140,152,197,203,212,252,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'EndScope':([100,102,251,],[144,150,299,]),'VarSpecRep':([40,],[76,]),'VarDecl':([10,239,309,],[22,22,22,]),'PrintStmt':([239,309,],[265,265,]),'ConstSpecRep':([33,],[52,]),'Operand':([90,106,114,120,131,168,170,174,175,177,178,179,180,181,182,183,184,185,186,187,188,190,191,192,193,194,217,235,239,245,254,260,266,278,285,290,309,310,311,312,317,327,340,357,370,375,],[130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,]),'TypeSpec':([23,79,],[45,110,]),'Parameters':([75,101,],[101,145,]),'UnaryOp':([90,106,114,120,131,168,170,174,175,177,178,179,180,181,182,183,184,185,186,187,188,190,191,192,193,194,217,235,239,245,254,260,266,278,285,290,309,310,311,312,317,327,340,357,370,375,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'PackageName':([2,13,48,],[6,28,28,]),'SourceFile':([0,],[3,]),'ExpressionListPureOpt':([266,],[306,]),'Label':([239,263,276,284,309,],[267,305,315,315,267,]),'FunctionDecl':([10,],[15,]),'TopLevelDecl':([10,],[16,]),'ExprSwitchStmt':([239,309,],[268,268,]),'IdentifierList':([14,21,52,76,103,203,237,],[34,41,34,41,152,152,252,]),'IdentifierRep':([14,21,52,76,103,203,237,],[32,32,32,32,32,32,32,]),'Type':([34,41,46,55,82,92,95,101,103,135,140,152,197,203,212,252,],[58,78,81,88,111,137,141,146,153,195,137,202,137,153,247,300,]),'ImportDeclRep':([5,],[9,]),'GoStmt':([239,309,],[270,270,]),'DeferStmt':([239,309,],[271,271,]),'PackageClause':([0,],[1,]),'ResultOpt':([101,],[147,]),'IncDecStmt':([239,309,312,370,],[262,262,262,262,]),'GotoStmt':([239,309,],[272,272,]),'TopLevelDeclRep':([9,],[10,]),'C':([90,106,114,120,131,168,170,174,175,177,178,179,180,181,182,183,184,185,186,187,188,190,191,192,193,194,217,235,239,245,254,260,266,278,285,290,309,310,311,312,317,327,340,357,370,375,],[123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,]),'PrimaryExpr':([90,106,114,120,131,168,170,174,175,177,178,179,180,181,182,183,184,185,186,187,188,190,191,192,193,194,217,235,239,245,254,260,266,278,285,290,309,310,311,312,317,327,340,357,370,375,],[127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,]),'S':([90,106,114,120,131,168,170,174,175,177,178,179,180,181,182,183,184,185,186,187,188,190,191,192,193,194,217,235,239,245,254,260,266,278,285,290,309,310,311,312,317,327,340,357,370,375,],[128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,]),'StartSwitch':([359,],[368,]),'assign_op':([282,],[327,]),'Signature':([75,],[102,]),'Block':([151,336,347,361,389,],[200,354,358,369,390,]),'ExprCaseClauseList':([368,],[372,]),'SwitchStmt':([239,309,],[275,275,]),'VarSpec':([21,76,],[39,105,]),'Result':([101,],[149,]),'Assignment':([239,309,312,370,],[277,277,277,277,]),'ExpressionListTypeOpt':([168,],[207,]),'QualifiedIdent':([34,41,46,55,82,91,92,95,101,103,135,140,152,197,203,212,252,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'Literal':([90,106,114,120,131,168,170,174,175,177,178,179,180,181,182,183,184,185,186,187,188,190,191,192,193,194,217,235,239,245,254,260,266,278,285,290,309,310,311,312,317,327,340,357,370,375,],[132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,]),'ImportDecl':([9,],[12,]),'OperandName':([90,106,114,120,131,168,170,174,175,177,178,179,180,181,182,183,184,185,186,187,188,190,191,192,193,194,217,235,239,245,254,260,266,278,285,290,309,310,311,312,317,327,340,357,370,375,],[118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,]),'AssignOp':([282,],[319,]),'LabelOpt':([276,284,],[314,334,]),'FieldDeclRep':([198,],[237,]),'start':([0,],[4,]),'Declaration':([10,239,309,],[17,279,279,]),'Condition':([312,357,],[345,363,]),'StructType':([68,],[96,]),'ConstSpec':([14,52,],[31,86,]),'F':([90,106,114,120,131,168,170,174,175,177,178,179,180,181,182,183,184,185,186,187,188,190,191,192,193,194,217,235,239,245,254,260,266,278,285,290,309,310,311,312,317,327,340,357,370,375,],[124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,]),'epsilon':([5,9,13,25,33,40,44,48,78,101,133,168,170,198,201,239,245,266,276,283,284,309,312,349,357,368,370,373,384,],[8,11,27,47,53,77,80,27,107,148,189,206,210,238,240,281,210,307,313,189,313,281,346,189,364,371,281,380,240,]),'ConditionBlockOpt':([312,],[347,]),'ExpressionList':([90,106,168,239,266,309,312,327,370,375,],[129,160,208,282,308,282,282,353,282,383,]),'SimpleStmt':([239,309,312,370,],[286,286,344,374,]),'ImportSpecRep':([25,],[48,]),'Expression':([90,106,131,168,170,174,175,177,178,179,180,181,182,183,184,185,186,187,188,190,191,192,193,194,217,235,239,245,254,260,266,278,285,290,309,310,311,312,317,327,340,357,370,375,],[133,133,173,133,211,215,216,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,248,249,283,295,301,303,133,316,335,337,283,342,343,349,352,133,356,366,283,133,]),'ImportPath':([29,],[49,]),'ExprSwitchCase':([372,],[376,]),'ExpressionOpt':([170,245,],[209,294,]),'ST':([34,41,46,55,82,92,95,101,103,135,140,152,197,203,212,252,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'TypeExprListOpt':([34,],[69,]),'ReturnStmt':([239,309,],[274,274,]),'ConstDecl':([10,239,309,],[18,18,18,]),'Slice':([127,],[167,]),'ArrayType':([34,41,46,55,82,92,95,101,103,135,140,152,197,203,212,252,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'ForStmt':([239,309,],[287,287,]),'Function':([75,],[100,]),'ImportSpec':([13,48,],[26,84,]),'TypeLit':([34,41,46,55,82,92,95,101,103,135,140,152,197,203,212,252,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'TypeSpecRep':([44,],[79,]),'CreateScope':([38,239,273,309,316,337,381,],[75,288,312,288,351,355,386,]),'SliceType':([34,41,46,55,82,92,95,101,103,135,140,152,197,203,212,252,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'TypeDecl':([10,239,309,],[19,19,19,]),'BaseType':([55,],[89,]),'I':([64,90,106,114,120,131,168,170,174,175,177,178,179,180,181,182,183,184,185,186,187,188,190,191,192,193,194,205,217,235,239,245,254,260,266,278,285,290,309,310,311,312,317,327,340,357,370,375,],[93,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,243,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,]),'IFSYM':([288,355,386,],[336,361,389,]),'UnaryExpr':([90,106,114,120,131,168,170,174,175,177,178,179,180,181,182,183,184,185,186,187,188,190,191,192,193,194,217,235,239,245,254,260,266,278,285,290,309,310,311,312,317,327,340,357,370,375,],[126,126,162,163,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,]),'ArrayLength':([64,],[94,]),'MapType':([34,41,46,55,82,92,95,101,103,135,140,152,197,203,212,252,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'ForClause':([312,],[348,]),'ShortVarDecl':([239,309,312,370,],[289,289,289,289,]),'TypeDef':([23,79,],[42,42,]),'FieldDecl':([237,],[250,]),'BreakStmt':([239,309,],[291,291,]),'BasicLit':([90,106,114,120,131,168,170,174,175,177,178,179,180,181,182,183,184,185,186,187,188,190,191,192,193,194,217,235,239,245,254,260,266,278,285,290,309,310,311,312,317,327,340,357,370,375,],[119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,]),'ExpressionListOpt':([78,],[108,]),'ElseOpt':([373,],[382,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> SourceFile','start',1,'p_start','parser.py',213),
  ('Type -> TypeName','Type',1,'p_type','parser.py',222),
  ('Type -> TypeLit','Type',1,'p_type','parser.py',223),
  ('TypeName -> TypeToken','TypeName',1,'p_type_name','parser.py',227),
  ('TypeName -> QualifiedIdent','TypeName',1,'p_type_name','parser.py',228),
  ('TypeToken -> INT','TypeToken',1,'p_type_token','parser.py',241),
  ('TypeToken -> FLOAT','TypeToken',1,'p_type_token','parser.py',242),
  ('TypeToken -> BOOL','TypeToken',1,'p_type_token','parser.py',243),
  ('TypeToken -> STRING','TypeToken',1,'p_type_token','parser.py',244),
  ('TypeToken -> TYPE IDENTIFIER','TypeToken',2,'p_type_token','parser.py',245),
  ('TypeLit -> ArrayType','TypeLit',1,'p_type_lit','parser.py',281),
  ('TypeLit -> ST StructType','TypeLit',2,'p_type_lit','parser.py',282),
  ('TypeLit -> PointerType','TypeLit',1,'p_type_lit','parser.py',283),
  ('TypeLit -> MapType','TypeLit',1,'p_type_lit','parser.py',284),
  ('TypeLit -> SliceType','TypeLit',1,'p_type_lit','parser.py',285),
  ('ST -> <empty>','ST',0,'p_S_T','parser.py',292),
  ('SliceType -> LSQUARE RSQUARE ElementType','SliceType',3,'p_slice_type','parser.py',307),
  ('MapType -> MAP LSQUARE KeyType RSQUARE ElementType','MapType',5,'p_map_type','parser.py',316),
  ('KeyType -> Type','KeyType',1,'p_key_type','parser.py',323),
  ('ArrayType -> LSQUARE ArrayLength RSQUARE ElementType','ArrayType',4,'p_array_type','parser.py',330),
  ('ArrayLength -> I INT_LIT','ArrayLength',2,'p_array_length','parser.py',353),
  ('ElementType -> Type','ElementType',1,'p_element_type','parser.py',359),
  ('StructType -> FuncScope STRUCT LCURL FieldDeclRep RCURL EndScope','StructType',6,'p_struct_type','parser.py',364),
  ('FuncScope -> <empty>','FuncScope',0,'p_func_scope','parser.py',378),
  ('FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON','FieldDeclRep',3,'p_field_decl_rep','parser.py',387),
  ('FieldDeclRep -> epsilon','FieldDeclRep',1,'p_field_decl_rep','parser.py',388),
  ('FieldDecl -> IdentifierList Type','FieldDecl',2,'p_field_decl','parser.py',401),
  ('PointerType -> MULTIPLY BaseType','PointerType',2,'p_point_type','parser.py',436),
  ('BaseType -> Type','BaseType',1,'p_base_type','parser.py',444),
  ('Signature -> Parameters ResultOpt','Signature',2,'p_sign','parser.py',451),
  ('ResultOpt -> Result','ResultOpt',1,'p_result_opt','parser.py',476),
  ('ResultOpt -> epsilon','ResultOpt',1,'p_result_opt','parser.py',477),
  ('Result -> Parameters','Result',1,'p_result','parser.py',481),
  ('Result -> Type','Result',1,'p_result','parser.py',482),
  ('Parameters -> LPAREN ParametersList RPAREN','Parameters',3,'p_params','parser.py',488),
  ('Parameters -> LPAREN RPAREN','Parameters',2,'p_params','parser.py',489),
  ('ParametersList -> ParameterDecl','ParametersList',1,'p_param_list','parser.py',512),
  ('ParametersList -> ParametersList COMMA ParameterDecl','ParametersList',3,'p_param_list','parser.py',513),
  ('ParameterDecl -> IdentifierList Type','ParameterDecl',2,'p_param_decl','parser.py',525),
  ('ParameterDecl -> Type','ParameterDecl',1,'p_param_decl','parser.py',526),
  ('Block -> LCURL StatementList RCURL','Block',3,'p_block','parser.py',560),
  ('StatementList -> StatementRep','StatementList',1,'p_stat_list','parser.py',564),
  ('StatementRep -> StatementRep Statement SEMICOLON','StatementRep',3,'p_stat_rep','parser.py',568),
  ('StatementRep -> epsilon','StatementRep',1,'p_stat_rep','parser.py',569),
  ('Declaration -> ConstDecl','Declaration',1,'p_decl','parser.py',582),
  ('Declaration -> TypeDecl','Declaration',1,'p_decl','parser.py',583),
  ('Declaration -> VarDecl','Declaration',1,'p_decl','parser.py',584),
  ('TopLevelDecl -> Declaration','TopLevelDecl',1,'p_toplevel_decl','parser.py',588),
  ('TopLevelDecl -> FunctionDecl','TopLevelDecl',1,'p_toplevel_decl','parser.py',589),
  ('ConstDecl -> CONST ConstSpec','ConstDecl',2,'p_const_decl','parser.py',596),
  ('ConstDecl -> CONST LPAREN ConstSpecRep RPAREN','ConstDecl',4,'p_const_decl','parser.py',597),
  ('ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON','ConstSpecRep',3,'p_const_spec_rep','parser.py',604),
  ('ConstSpecRep -> epsilon','ConstSpecRep',1,'p_const_spec_rep','parser.py',605),
  ('ConstSpec -> IdentifierList TypeExprListOpt','ConstSpec',2,'p_const_spec','parser.py',614),
  ('TypeExprListOpt -> Type EQUALS ExpressionList','TypeExprListOpt',3,'p_type_expr_list','parser.py',636),
  ('IdentifierList -> IDENTIFIER','IdentifierList',1,'p_identifier_list','parser.py',650),
  ('IdentifierList -> IdentifierRep','IdentifierList',1,'p_identifier_list','parser.py',651),
  ('IdentifierRep -> IdentifierRep COMMA IDENTIFIER','IdentifierRep',3,'p_identifier_rep','parser.py',667),
  ('IdentifierRep -> IDENTIFIER COMMA IDENTIFIER','IdentifierRep',3,'p_identifier_rep','parser.py',668),
  ('ExpressionList -> Expression ExpressionRep','ExpressionList',2,'p_expr_list','parser.py',698),
  ('ExpressionRep -> ExpressionRep COMMA Expression','ExpressionRep',3,'p_expr_rep','parser.py',711),
  ('ExpressionRep -> epsilon','ExpressionRep',1,'p_expr_rep','parser.py',712),
  ('TypeDecl -> TYPE TypeSpec','TypeDecl',2,'p_type_decl','parser.py',733),
  ('TypeDecl -> TYPE LPAREN TypeSpecRep RPAREN','TypeDecl',4,'p_type_decl','parser.py',734),
  ('TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON','TypeSpecRep',3,'p_type_spec_rep','parser.py',741),
  ('TypeSpecRep -> epsilon','TypeSpecRep',1,'p_type_spec_rep','parser.py',742),
  ('TypeSpec -> AliasDecl','TypeSpec',1,'p_type_spec','parser.py',749),
  ('TypeSpec -> TypeDef','TypeSpec',1,'p_type_spec','parser.py',750),
  ('AliasDecl -> IDENTIFIER EQUALS Type','AliasDecl',3,'p_alias_decl','parser.py',754),
  ('TypeDef -> IDENTIFIER Type','TypeDef',2,'p_type_def','parser.py',766),
  ('VarDecl -> VAR VarSpec','VarDecl',2,'p_var_decl','parser.py',779),
  ('VarDecl -> VAR LPAREN VarSpecRep RPAREN','VarDecl',4,'p_var_decl','parser.py',780),
  ('VarSpecRep -> VarSpecRep VarSpec SEMICOLON','VarSpecRep',3,'p_var_spec_rep','parser.py',788),
  ('VarSpecRep -> epsilon','VarSpecRep',1,'p_var_spec_rep','parser.py',789),
  ('VarSpec -> IdentifierList Type ExpressionListOpt','VarSpec',3,'p_var_spec','parser.py',799),
  ('ExpressionListOpt -> EQUALS ExpressionList','ExpressionListOpt',2,'p_expr_list_opt','parser.py',867),
  ('ExpressionListOpt -> epsilon','ExpressionListOpt',1,'p_expr_list_opt','parser.py',868),
  ('ExpressionListOpt -> EQUALS MALLOC LPAREN I INT_LIT RPAREN','ExpressionListOpt',6,'p_expr_list_opt','parser.py',869),
  ('ShortVarDecl -> IDENTIFIER SHORT_ASSIGNMENT Expression','ShortVarDecl',3,'p_short_var_decl','parser.py',882),
  ('FunctionDecl -> FUNC FunctionName CreateScope Function EndScope','FunctionDecl',5,'p_func_decl','parser.py',903),
  ('FunctionDecl -> FUNC FunctionName CreateScope Signature EndScope','FunctionDecl',5,'p_func_decl','parser.py',904),
  ('CreateScope -> <empty>','CreateScope',0,'p_create_scope','parser.py',923),
  ('EndScope -> <empty>','EndScope',0,'p_end_scope','parser.py',927),
  ('FunctionName -> IDENTIFIER','FunctionName',1,'p_func_name','parser.py',931),
  ('Function -> Signature RetTypeSet FunctionBody','Function',3,'p_func','parser.py',943),
  ('RetTypeSet -> <empty>','RetTypeSet',0,'p_ret_type_set','parser.py',962),
  ('FunctionBody -> Block','FunctionBody',1,'p_func_body','parser.py',976),
  ('Operand -> Literal','Operand',1,'p_operand','parser.py',983),
  ('Operand -> OperandName','Operand',1,'p_operand','parser.py',984),
  ('Operand -> LPAREN Expression RPAREN','Operand',3,'p_operand','parser.py',985),
  ('Literal -> BasicLit','Literal',1,'p_literal','parser.py',992),
  ('BasicLit -> I INT_LIT','BasicLit',2,'p_basic_lit','parser.py',997),
  ('BasicLit -> F FLOAT_LIT','BasicLit',2,'p_basic_lit','parser.py',998),
  ('BasicLit -> C IMAGINARY_LIT','BasicLit',2,'p_basic_lit','parser.py',999),
  ('BasicLit -> S STRING_LIT','BasicLit',2,'p_basic_lit','parser.py',1000),
  ('I -> <empty>','I',0,'p_I','parser.py',1008),
  ('F -> <empty>','F',0,'p_F','parser.py',1014),
  ('C -> <empty>','C',0,'p_C','parser.py',1020),
  ('S -> <empty>','S',0,'p_S','parser.py',1026),
  ('OperandName -> IDENTIFIER','OperandName',1,'p_operand_name','parser.py',1032),
  ('QualifiedIdent -> IDENTIFIER DOT TypeName','QualifiedIdent',3,'p_qualified_ident','parser.py',1082),
  ('PrimaryExpr -> Operand','PrimaryExpr',1,'p_prim_expr','parser.py',1094),
  ('PrimaryExpr -> PrimaryExpr DOT IDENTIFIER','PrimaryExpr',3,'p_prim_expr','parser.py',1095),
  ('PrimaryExpr -> Conversion','PrimaryExpr',1,'p_prim_expr','parser.py',1096),
  ('PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE','PrimaryExpr',4,'p_prim_expr','parser.py',1097),
  ('PrimaryExpr -> PrimaryExpr Slice','PrimaryExpr',2,'p_prim_expr','parser.py',1098),
  ('PrimaryExpr -> PrimaryExpr TypeAssertion','PrimaryExpr',2,'p_prim_expr','parser.py',1099),
  ('PrimaryExpr -> PrimaryExpr LPAREN ExpressionListTypeOpt RPAREN','PrimaryExpr',4,'p_prim_expr','parser.py',1100),
  ('Slice -> LSQUARE ExpressionOpt COLON ExpressionOpt RSQUARE','Slice',5,'p_slice','parser.py',1274),
  ('Slice -> LSQUARE ExpressionOpt COLON Expression COLON Expression RSQUARE','Slice',7,'p_slice','parser.py',1275),
  ('TypeAssertion -> DOT LPAREN Type RPAREN','TypeAssertion',4,'p_type_assert','parser.py',1283),
  ('ExpressionListTypeOpt -> ExpressionList','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',1288),
  ('ExpressionListTypeOpt -> epsilon','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',1289),
  ('Expression -> UnaryExpr','Expression',1,'p_expr','parser.py',1293),
  ('Expression -> Expression COMPARE_OR Expression','Expression',3,'p_expr','parser.py',1294),
  ('Expression -> Expression COMPARE_AND Expression','Expression',3,'p_expr','parser.py',1295),
  ('Expression -> Expression EQEQ Expression','Expression',3,'p_expr','parser.py',1296),
  ('Expression -> Expression NOTEQUALS Expression','Expression',3,'p_expr','parser.py',1297),
  ('Expression -> Expression LESSTHAN Expression','Expression',3,'p_expr','parser.py',1298),
  ('Expression -> Expression GREATERTHAN Expression','Expression',3,'p_expr','parser.py',1299),
  ('Expression -> Expression LESSTHAN_EQUAL Expression','Expression',3,'p_expr','parser.py',1300),
  ('Expression -> Expression GREATERTHAN_EQUAL Expression','Expression',3,'p_expr','parser.py',1301),
  ('Expression -> Expression OR Expression','Expression',3,'p_expr','parser.py',1302),
  ('Expression -> Expression XOR Expression','Expression',3,'p_expr','parser.py',1303),
  ('Expression -> Expression ANDXOR Expression','Expression',3,'p_expr','parser.py',1304),
  ('Expression -> Expression DIVIDE Expression','Expression',3,'p_expr','parser.py',1305),
  ('Expression -> Expression MODULO Expression','Expression',3,'p_expr','parser.py',1306),
  ('Expression -> Expression LSHIFT Expression','Expression',3,'p_expr','parser.py',1307),
  ('Expression -> Expression RSHIFT Expression','Expression',3,'p_expr','parser.py',1308),
  ('Expression -> Expression PLUS Expression','Expression',3,'p_expr','parser.py',1309),
  ('Expression -> Expression MINUS Expression','Expression',3,'p_expr','parser.py',1310),
  ('Expression -> Expression MULTIPLY Expression','Expression',3,'p_expr','parser.py',1311),
  ('Expression -> Expression AND Expression','Expression',3,'p_expr','parser.py',1312),
  ('ExpressionOpt -> Expression','ExpressionOpt',1,'p_expr_opt','parser.py',1378),
  ('ExpressionOpt -> epsilon','ExpressionOpt',1,'p_expr_opt','parser.py',1379),
  ('UnaryExpr -> PrimaryExpr','UnaryExpr',1,'p_unary_expr','parser.py',1383),
  ('UnaryExpr -> UnaryOp UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',1384),
  ('UnaryExpr -> NOT UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',1385),
  ('UnaryOp -> PLUS','UnaryOp',1,'p_unary_op','parser.py',1417),
  ('UnaryOp -> MINUS','UnaryOp',1,'p_unary_op','parser.py',1418),
  ('UnaryOp -> MULTIPLY','UnaryOp',1,'p_unary_op','parser.py',1419),
  ('UnaryOp -> AND','UnaryOp',1,'p_unary_op','parser.py',1420),
  ('Conversion -> TYPECAST Type LPAREN Expression RPAREN','Conversion',5,'p_conversion','parser.py',1434),
  ('Statement -> Declaration','Statement',1,'p_statement','parser.py',1442),
  ('Statement -> LabeledStmt','Statement',1,'p_statement','parser.py',1443),
  ('Statement -> SimpleStmt','Statement',1,'p_statement','parser.py',1444),
  ('Statement -> ReturnStmt','Statement',1,'p_statement','parser.py',1445),
  ('Statement -> BreakStmt','Statement',1,'p_statement','parser.py',1446),
  ('Statement -> ContinueStmt','Statement',1,'p_statement','parser.py',1447),
  ('Statement -> GotoStmt','Statement',1,'p_statement','parser.py',1448),
  ('Statement -> CreateScope IFSYM Block EndScope_1','Statement',4,'p_statement','parser.py',1449),
  ('Statement -> IfStmt','Statement',1,'p_statement','parser.py',1450),
  ('Statement -> SwitchStmt','Statement',1,'p_statement','parser.py',1451),
  ('Statement -> ForStmt','Statement',1,'p_statement','parser.py',1452),
  ('Statement -> DeferStmt','Statement',1,'p_statement','parser.py',1453),
  ('Statement -> FallThroughStmt','Statement',1,'p_statement','parser.py',1454),
  ('Statement -> GoStmt','Statement',1,'p_statement','parser.py',1455),
  ('Statement -> PrintStmt','Statement',1,'p_statement','parser.py',1456),
  ('Statement -> ScanStmt','Statement',1,'p_statement','parser.py',1457),
  ('EndScope_1 -> <empty>','EndScope_1',0,'p_end_scope_new','parser.py',1464),
  ('PrintStmt -> PRINT PD Expression','PrintStmt',3,'p_print_stmt','parser.py',1472),
  ('PrintStmt -> PRINT PS Expression','PrintStmt',3,'p_print_stmt','parser.py',1473),
  ('ScanStmt -> SCAN Expression','ScanStmt',2,'p_scan_stmt','parser.py',1486),
  ('FallThroughStmt -> FALLTHROUGH','FallThroughStmt',1,'p_fallthrough_stmt','parser.py',1493),
  ('GoStmt -> GO Expression','GoStmt',2,'p_go_stmt','parser.py',1497),
  ('DeferStmt -> DEFER Expression','DeferStmt',2,'p_defer_stmt','parser.py',1503),
  ('SimpleStmt -> epsilon','SimpleStmt',1,'p_simple_stmt','parser.py',1508),
  ('SimpleStmt -> ExpressionStmt','SimpleStmt',1,'p_simple_stmt','parser.py',1509),
  ('SimpleStmt -> IncDecStmt','SimpleStmt',1,'p_simple_stmt','parser.py',1510),
  ('SimpleStmt -> Assignment','SimpleStmt',1,'p_simple_stmt','parser.py',1511),
  ('SimpleStmt -> ShortVarDecl','SimpleStmt',1,'p_simple_stmt','parser.py',1512),
  ('LabeledStmt -> Label COLON Statement','LabeledStmt',3,'p_labeled_statements','parser.py',1517),
  ('Label -> IDENTIFIER','Label',1,'p_label','parser.py',1535),
  ('ExpressionStmt -> Expression','ExpressionStmt',1,'p_expression_stmt','parser.py',1540),
  ('IncDecStmt -> Expression INCREMENT','IncDecStmt',2,'p_inc_dec','parser.py',1546),
  ('IncDecStmt -> Expression DECREMENT','IncDecStmt',2,'p_inc_dec','parser.py',1547),
  ('Assignment -> ExpressionList assign_op ExpressionList','Assignment',3,'p_assignment','parser.py',1554),
  ('assign_op -> AssignOp','assign_op',1,'p_assign_op','parser.py',1591),
  ('AssignOp -> PLUSEQUAL','AssignOp',1,'p_AssignOp','parser.py',1595),
  ('AssignOp -> MINUSEQUAL','AssignOp',1,'p_AssignOp','parser.py',1596),
  ('AssignOp -> TIMESEQUAL','AssignOp',1,'p_AssignOp','parser.py',1597),
  ('AssignOp -> DIVIDE_EQUAL','AssignOp',1,'p_AssignOp','parser.py',1598),
  ('AssignOp -> MODEQUAL','AssignOp',1,'p_AssignOp','parser.py',1599),
  ('AssignOp -> ANDEQUAL','AssignOp',1,'p_AssignOp','parser.py',1600),
  ('AssignOp -> OREQUAL','AssignOp',1,'p_AssignOp','parser.py',1601),
  ('AssignOp -> XOREQUAL','AssignOp',1,'p_AssignOp','parser.py',1602),
  ('AssignOp -> ANDXOR_EQUAL','AssignOp',1,'p_AssignOp','parser.py',1603),
  ('AssignOp -> LSHIFT_EQUAL','AssignOp',1,'p_AssignOp','parser.py',1604),
  ('AssignOp -> RSHIFT_EQUAL','AssignOp',1,'p_AssignOp','parser.py',1605),
  ('AssignOp -> EQUALS','AssignOp',1,'p_AssignOp','parser.py',1606),
  ('IfStmt -> IF Expression CreateScope IFSYM Block EndScope_1 ElseOpt','IfStmt',7,'p_if_statement','parser.py',1612),
  ('IFSYM -> <empty>','IFSYM',0,'p_if_sym','parser.py',1633),
  ('ElseOpt -> ELSE IfStmt','ElseOpt',2,'p_else_opt','parser.py',1639),
  ('ElseOpt -> ELSE CreateScope IFSYM Block EndScope_1','ElseOpt',5,'p_else_opt','parser.py',1640),
  ('ElseOpt -> epsilon','ElseOpt',1,'p_else_opt','parser.py',1641),
  ('SwitchStmt -> ExprSwitchStmt','SwitchStmt',1,'p_switch_statement','parser.py',1653),
  ('ExprSwitchStmt -> SWITCH Expression CreateScope LCURL StartSwitch ExprCaseClauseList RCURL EndScope_1','ExprSwitchStmt',8,'p_ExprSwitchStmt','parser.py',1657),
  ('StartSwitch -> <empty>','StartSwitch',0,'p_start_switch','parser.py',1687),
  ('ExprCaseClauseList -> epsilon','ExprCaseClauseList',1,'p_ExprCaseClauseList','parser.py',1703),
  ('ExprCaseClauseList -> ExprCaseClauseList ExprCaseClause','ExprCaseClauseList',2,'p_ExprCaseClauseList','parser.py',1704),
  ('ExprCaseClause -> ExprSwitchCase COLON StatementList','ExprCaseClause',3,'p_ExprCaseClause','parser.py',1720),
  ('ExprSwitchCase -> CASE ExpressionList','ExprSwitchCase',2,'p_ExprSwitchCase','parser.py',1743),
  ('ExprSwitchCase -> DEFAULT','ExprSwitchCase',1,'p_ExprSwitchCase','parser.py',1744),
  ('ForStmt -> FOR CreateScope ConditionBlockOpt Block EndScope_1','ForStmt',5,'p_for','parser.py',1768),
  ('ConditionBlockOpt -> epsilon','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',1779),
  ('ConditionBlockOpt -> Condition','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',1780),
  ('ConditionBlockOpt -> ForClause','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',1781),
  ('Condition -> Expression','Condition',1,'p_condition','parser.py',1788),
  ('ForClause -> SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmt','ForClause',5,'p_forclause','parser.py',1793),
  ('ConditionOpt -> epsilon','ConditionOpt',1,'p_conditionopt','parser.py',1814),
  ('ConditionOpt -> Condition','ConditionOpt',1,'p_conditionopt','parser.py',1815),
  ('ReturnStmt -> RETURN ExpressionListPureOpt','ReturnStmt',2,'p_return','parser.py',1822),
  ('ExpressionListPureOpt -> ExpressionList','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',1871),
  ('ExpressionListPureOpt -> epsilon','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',1872),
  ('BreakStmt -> BREAK LabelOpt','BreakStmt',2,'p_break','parser.py',1877),
  ('ContinueStmt -> CONTINUE LabelOpt','ContinueStmt',2,'p_continue','parser.py',1881),
  ('LabelOpt -> Label','LabelOpt',1,'p_labelopt','parser.py',1885),
  ('LabelOpt -> epsilon','LabelOpt',1,'p_labelopt','parser.py',1886),
  ('GotoStmt -> GOTO Label','GotoStmt',2,'p_goto','parser.py',1891),
  ('SourceFile -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep','SourceFile',4,'p_source_file','parser.py',1897),
  ('ImportDeclRep -> epsilon','ImportDeclRep',1,'p_import_decl_rep','parser.py',1905),
  ('ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON','ImportDeclRep',3,'p_import_decl_rep','parser.py',1906),
  ('TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON','TopLevelDeclRep',3,'p_toplevel_decl_rep','parser.py',1915),
  ('TopLevelDeclRep -> epsilon','TopLevelDeclRep',1,'p_toplevel_decl_rep','parser.py',1916),
  ('PackageClause -> PACKAGE PackageName','PackageClause',2,'p_package_clause','parser.py',1927),
  ('PackageName -> IDENTIFIER','PackageName',1,'p_package_name','parser.py',1932),
  ('ImportDecl -> IMPORT ImportSpec','ImportDecl',2,'p_import_decl','parser.py',1943),
  ('ImportDecl -> IMPORT LPAREN ImportSpecRep RPAREN','ImportDecl',4,'p_import_decl','parser.py',1944),
  ('ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON','ImportSpecRep',3,'p_import_spec_rep','parser.py',1951),
  ('ImportSpecRep -> epsilon','ImportSpecRep',1,'p_import_spec_rep','parser.py',1952),
  ('ImportSpec -> PackageNameDotOpt ImportPath','ImportSpec',2,'p_import_spec','parser.py',1960),
  ('PackageNameDotOpt -> DOT','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',1968),
  ('PackageNameDotOpt -> PackageName','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',1969),
  ('PackageNameDotOpt -> epsilon','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',1970),
  ('ImportPath -> STRING_LIT','ImportPath',1,'p_import_path','parser.py',1978),
  ('epsilon -> <empty>','epsilon',0,'p_empty','parser.py',1987),
]
