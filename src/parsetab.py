
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftIDENTIFIERrightEQUALSNOTleftINT_LITleftFLOAT_LITleftSTRING_LITleftCOMPARE_ORleftCOMPARE_ANDleftEQEQNOTEQUALSleftORleftXORleftANDANDXORleftLESSTHANGREATERTHANLESSTHAN_EQUALGREATERTHAN_EQUALleftPLUSMINUSleftLSHIFTRSHIFTleftMULTIPLYDIVIDEMODULOleftLPARENRPARENAND ANDEQUAL ANDXOR ANDXOR_EQUAL BOOL BREAK CASE COLON COMMA COMPARE_AND COMPARE_OR CONST CONTINUE DECREMENT DEFAULT DEFER DIVIDE DIVIDE_EQUAL DOT ELSE EQEQ EQUALS FALLTHROUGH FLOAT FLOAT_LIT FOR FUNC GO GOTO GREATERTHAN GREATERTHAN_EQUAL IDENTIFIER IF IMAGINARY_LIT IMPORT INCREMENT INT INT_LIT LCURL LESSTHAN LESSTHAN_EQUAL LPAREN LSHIFT LSHIFT_EQUAL LSQUARE MAP MINUS MINUSEQUAL MODEQUAL MODULO MULTIPLY NOT NOTEQUALS OR OREQUAL PACKAGE PD PLUS PLUSEQUAL PRINT PS RCURL RETURN RPAREN RSHIFT RSHIFT_EQUAL RSQUARE SCAN SEMICOLON SHORT_ASSIGNMENT STRING STRING_LIT STRUCT SWITCH TIMESEQUAL TYPE TYPECAST VAR XOR XOREQUALstart : SourceFileType : TypeName\n            | TypeLitTypeName : TypeToken\n                | QualifiedIdentTypeToken : INT\n                 | FLOAT\n                 | BOOL\n                 | STRING\n                 | TYPE IDENTIFIERTypeLit : ArrayType\n               | StructType\n               | PointerType\n               | MapType\n               | SliceTypeSliceType : LSQUARE RSQUARE ElementTypeMapType : MAP LSQUARE KeyType RSQUARE ElementType KeyType : TypeArrayType : LSQUARE ArrayLength RSQUARE ElementType ArrayLength : Expression  ElementType : Type StructType : FuncScope STRUCT LCURL FieldDeclRep RCURLFuncScope :  FieldDeclRep : FieldDeclRep FieldDecl SEMICOLON\n                  | epsilon  FieldDecl : IdentifierList TypePointerType : MULTIPLY BaseTypeBaseType : TypeSignature : Parameters ResultOptResultOpt : Result\n                 | epsilonResult : Parameters\n              | TypeParameters : LPAREN ParametersList RPAREN\n                  | LPAREN RPARENParametersList : ParameterDecl\n                      | ParametersList COMMA ParameterDeclParameterDecl : IdentifierList Type\n                     | TypeBlock : LCURL StatementList RCURLStatementList : StatementRepStatementRep : StatementRep Statement SEMICOLON\n                    | epsilonDeclaration : ConstDecl\n                 | TypeDecl\n                 | VarDeclTopLevelDecl : Declaration\n                  | FunctionDeclConstDecl : CONST ConstSpec\n                 | CONST LPAREN ConstSpecRep RPARENConstSpecRep : ConstSpecRep ConstSpec SEMICOLON\n                    | epsilonConstSpec : IdentifierList TypeExprListOptTypeExprListOpt : Type EQUALS ExpressionList\n                       | epsilonIdentifierList : IDENTIFIER \n                      | IdentifierRepIdentifierRep : IdentifierRep COMMA IDENTIFIER\n                     | IDENTIFIER COMMA IDENTIFIERExpressionList : Expression ExpressionRepExpressionRep : ExpressionRep COMMA Expression\n                     | epsilonTypeDecl : TYPE TypeSpec\n                | TYPE LPAREN TypeSpecRep RPARENTypeSpecRep : TypeSpecRep TypeSpec SEMICOLON\n                   | epsilonTypeSpec : AliasDecl\n                | TypeDefAliasDecl : IDENTIFIER EQUALS TypeTypeDef : IDENTIFIER TypeVarDecl : VAR VarSpec\n               | VAR LPAREN VarSpecRep RPARENVarSpecRep : VarSpecRep VarSpec SEMICOLON\n                  | epsilonVarSpec : IdentifierList Type ExpressionListOptExpressionListOpt : EQUALS ExpressionList\n                         | epsilon ShortVarDecl : IDENTIFIER SHORT_ASSIGNMENT Expression FunctionDecl : FUNC FunctionName CreateScope Function EndScope\n                  | FUNC FunctionName CreateScope Signature EndScopeCreateScope : EndScope : FunctionName : IDENTIFIERFunction : Signature RetTypeSet FunctionBodyRetTypeSet : FunctionBody : BlockOperand : Literal\n               | OperandName\n               | LPAREN Expression RPARENLiteral : BasicLitBasicLit : I INT_LIT\n              | F FLOAT_LIT\n              | C IMAGINARY_LIT\n              | S STRING_LITI : F : C : S : OperandName : IDENTIFIERQualifiedIdent : IDENTIFIER DOT TypeNamePrimaryExpr : Operand\n                   | PrimaryExpr Selector\n                   | Conversion\n                   | PrimaryExpr LSQUARE Expression RSQUARE\n                   | PrimaryExpr Slice\n                   | PrimaryExpr TypeAssertion\n                   | PrimaryExpr LPAREN ExpressionListTypeOpt RPARENSelector : DOT IDENTIFIERSlice : LSQUARE ExpressionOpt COLON ExpressionOpt RSQUARE\n             | LSQUARE ExpressionOpt COLON Expression COLON Expression RSQUARETypeAssertion : DOT LPAREN Type RPARENExpressionListTypeOpt : ExpressionList\n                             | epsilonExpression : UnaryExpr\n                  | Expression COMPARE_OR Expression\n                  | Expression COMPARE_AND Expression\n                  | Expression EQEQ Expression\n                  | Expression NOTEQUALS Expression\n                  | Expression LESSTHAN Expression\n                  | Expression GREATERTHAN Expression\n                  | Expression LESSTHAN_EQUAL Expression\n                  | Expression GREATERTHAN_EQUAL Expression\n                  | Expression OR Expression\n                  | Expression XOR Expression\n                  | Expression ANDXOR Expression\n                  | Expression DIVIDE Expression\n                  | Expression MODULO Expression\n                  | Expression LSHIFT Expression\n                  | Expression RSHIFT Expression\n                  | Expression PLUS Expression\n                  | Expression MINUS Expression\n                  | Expression MULTIPLY Expression\n                  | Expression AND ExpressionExpressionOpt : Expression\n                     | epsilonUnaryExpr : PrimaryExpr\n                 | UnaryOp UnaryExpr\n                 | NOT UnaryExprUnaryOp : PLUS\n               | MINUS\n               | MULTIPLY\n               | AND Conversion : TYPECAST Type LPAREN Expression RPARENStatement : Declaration\n               | LabeledStmt\n               | SimpleStmt\n               | ReturnStmt\n               | BreakStmt\n               | ContinueStmt\n               | GotoStmt\n               | CreateScope Block EndScope\n               | IfStmt\n               | SwitchStmt\n               | ForStmt\n               | DeferStmt\n               | FallThroughStmt\n               | GoStmt\n               | PrintStmt\n               | ScanStmtPrintStmt : PRINT PD Expression\n               | PRINT PS ExpressionScanStmt : SCAN ExpressionFallThroughStmt : FALLTHROUGHGoStmt : GO ExpressionDeferStmt : DEFER Expression SimpleStmt : epsilon\n                 | ExpressionStmt\n                 | IncDecStmt\n                 | Assignment\n                 | ShortVarDecl  LabeledStmt : Label COLON Statement  Label : IDENTIFIER  ExpressionStmt : Expression  IncDecStmt : Expression INCREMENT\n                 | Expression DECREMENT  Assignment : ExpressionList assign_op ExpressionList assign_op : AssignOp AssignOp : PLUSEQUAL\n               | MINUSEQUAL\n               | TIMESEQUAL\n               | DIVIDE_EQUAL\n               | MODEQUAL\n               | ANDEQUAL\n               | OREQUAL\n               | XOREQUAL\n               | ANDXOR_EQUAL\n               | LSHIFT_EQUAL\n               | RSHIFT_EQUAL\n               | EQUALS  IfStmt : IF Expression CreateScope Block EndScope ElseOpt  ElseOpt : ELSE IfStmt\n              | ELSE CreateScope Block EndScope\n              | epsilon  SwitchStmt : ExprSwitchStmtExprSwitchStmt : SWITCH Expression CreateScope LCURL StartSwitch ExprCaseClauseList RCURL StartSwitch : ExprCaseClauseList : epsilon\n                 | ExprCaseClauseList ExprCaseClause\n    ExprCaseClause : ExprSwitchCase COLON StatementList ExprSwitchCase : CASE ExpressionList\n                 | DEFAULT \n    ForStmt : FOR CreateScope ConditionBlockOpt Block EndScopeConditionBlockOpt : epsilon\n             | Condition\n             | ForClauseCondition : Expression ForClause : SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmtConditionOpt : epsilon\n          | Condition ReturnStmt : RETURN ExpressionListPureOptExpressionListPureOpt : ExpressionList\n             | epsilonBreakStmt : BREAK LabelOptContinueStmt : CONTINUE LabelOptLabelOpt : Label\n        | epsilon GotoStmt : GOTO Label SourceFile : PackageClause SEMICOLON ImportDeclRep TopLevelDeclRepImportDeclRep : epsilon\n           | ImportDeclRep ImportDecl SEMICOLONTopLevelDeclRep : TopLevelDeclRep TopLevelDecl SEMICOLON\n                     | epsilonPackageClause : PACKAGE PackageNamePackageName : IDENTIFIERImportDecl : IMPORT ImportSpec\n          | IMPORT LPAREN ImportSpecRep RPAREN  ImportSpecRep : ImportSpecRep ImportSpec SEMICOLON\n            | epsilon  ImportSpec : PackageNameDotOpt ImportPath  PackageNameDotOpt : DOT\n                        | PackageName\n                        | epsilon ImportPath : STRING_LIT epsilon : '
    
_lr_action_items = {'FUNC':([5,8,9,10,11,24,36,],[-234,-219,-234,20,-222,-220,-221,]),'ANDXOR':([94,99,100,103,107,108,112,113,116,136,138,141,142,143,144,145,147,148,151,153,201,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,240,249,251,252,253,283,286,296,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-114,-136,-87,154,-101,154,-137,-138,-93,-92,-91,-105,-102,-106,-94,154,154,-108,-89,-125,154,-126,-133,154,154,-129,-131,154,-121,-130,-132,-119,-120,-128,154,-127,154,-122,-107,-104,154,154,154,-111,-143,-99,154,-109,154,154,154,154,154,154,154,154,154,-99,154,-110,154,]),'DIVIDE':([94,99,100,103,107,108,112,113,116,136,138,141,142,143,144,145,147,148,151,153,201,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,240,249,251,252,253,283,286,296,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-114,-136,-87,156,-101,156,-137,-138,-93,-92,-91,-105,-102,-106,-94,156,156,-108,-89,156,156,-126,156,156,156,156,156,156,156,156,-132,156,156,156,156,-127,156,156,-107,-104,156,156,156,-111,-143,-99,156,-109,156,156,156,156,156,156,156,156,156,-99,156,-110,156,]),'CONST':([5,8,9,10,11,24,36,231,245,246,299,306,378,],[-234,-219,-234,14,-222,-220,-221,-234,14,-43,-42,14,-234,]),'LPAREN':([13,14,21,23,37,38,54,56,57,59,61,62,63,65,66,68,69,71,72,75,77,90,91,92,94,95,96,97,99,100,101,102,103,108,111,112,114,116,119,122,127,137,139,140,142,143,144,145,146,147,148,149,150,151,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,187,202,204,205,225,231,234,235,236,237,238,241,243,245,246,252,253,257,263,269,276,281,283,288,293,296,297,299,306,307,308,309,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,345,351,352,363,370,378,],[25,33,40,44,-83,-81,-11,-3,-4,-2,-15,-12,-9,-14,111,-6,-7,-8,-13,-5,124,-28,-27,111,-103,111,-141,-140,-88,-90,111,-139,-99,146,111,-87,-142,-101,-10,124,111,-100,-21,-16,-93,-92,-91,-105,111,-102,-106,111,203,-94,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,225,-35,-108,-19,-89,111,-234,-34,111,-107,111,-104,-17,-22,111,-43,-111,-143,111,111,111,-81,111,-99,111,111,-109,111,-42,111,111,111,111,111,-187,-177,-188,-179,-182,-185,-189,-178,-186,111,-183,-184,-180,-181,-99,-110,111,111,111,-234,]),'NOTEQUALS':([94,99,100,103,107,108,112,113,116,136,138,141,142,143,144,145,147,148,151,153,201,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,240,249,251,252,253,283,286,296,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-114,-136,-87,155,-101,155,-137,-138,-93,-92,-91,-105,-102,-106,-94,155,155,-108,-89,-125,-118,-126,-133,-124,155,-129,-131,-117,-121,-130,-132,-119,-120,-128,155,-127,-123,-122,-107,-104,155,155,155,-111,-143,-99,155,-109,155,155,155,155,155,155,155,155,155,-99,155,-110,155,]),'EQEQ':([94,99,100,103,107,108,112,113,116,136,138,141,142,143,144,145,147,148,151,153,201,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,240,249,251,252,253,283,286,296,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-114,-136,-87,162,-101,162,-137,-138,-93,-92,-91,-105,-102,-106,-94,162,162,-108,-89,-125,-118,-126,-133,-124,162,-129,-131,-117,-121,-130,-132,-119,-120,-128,162,-127,-123,-122,-107,-104,162,162,162,-111,-143,-99,162,-109,162,162,162,162,162,162,162,162,162,-99,162,-110,162,]),'GOTO':([231,245,246,299,306,378,],[-234,266,-43,-42,266,-234,]),'XOREQUAL':([94,99,100,103,107,108,112,116,138,141,142,143,144,145,147,148,151,194,195,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,249,252,253,283,285,286,296,344,345,351,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-60,-62,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-61,-111,-143,-99,320,-234,-109,-234,-99,-110,]),'PRINT':([231,245,246,299,306,378,],[-234,272,-43,-42,272,-234,]),'LESSTHAN':([94,99,100,103,107,108,112,113,116,136,138,141,142,143,144,145,147,148,151,153,201,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,240,249,251,252,253,283,286,296,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-114,-136,-87,166,-101,166,-137,-138,-93,-92,-91,-105,-102,-106,-94,166,166,-108,-89,166,166,-126,166,166,166,-129,-131,166,-121,-130,-132,-119,-120,-128,166,-127,166,-122,-107,-104,166,166,166,-111,-143,-99,166,-109,166,166,166,166,166,166,166,166,166,-99,166,-110,166,]),'COLON':([94,99,100,103,107,108,112,116,136,138,141,142,143,144,145,147,148,149,151,194,195,199,200,201,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,249,251,252,253,270,283,296,351,371,372,377,],[-103,-88,-90,-99,-114,-136,-87,-101,-234,-137,-138,-93,-92,-91,-105,-102,-106,-234,-94,-60,-62,237,-135,-134,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-61,297,-111,-143,306,-172,-109,-110,378,-201,-200,]),'GREATERTHAN_EQUAL':([94,99,100,103,107,108,112,113,116,136,138,141,142,143,144,145,147,148,151,153,201,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,240,249,251,252,253,283,286,296,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-114,-136,-87,172,-101,172,-137,-138,-93,-92,-91,-105,-102,-106,-94,172,172,-108,-89,172,172,-126,172,172,172,-129,-131,172,-121,-130,-132,-119,-120,-128,172,-127,172,-122,-107,-104,172,172,172,-111,-143,-99,172,-109,172,172,172,172,172,172,172,172,172,-99,172,-110,172,]),'LSHIFT':([94,99,100,103,107,108,112,113,116,136,138,141,142,143,144,145,147,148,151,153,201,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,240,249,251,252,253,283,286,296,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-114,-136,-87,168,-101,168,-137,-138,-93,-92,-91,-105,-102,-106,-94,168,168,-108,-89,168,168,-126,168,168,168,-129,168,168,168,168,-132,168,168,-128,168,-127,168,168,-107,-104,168,168,168,-111,-143,-99,168,-109,168,168,168,168,168,168,168,168,168,-99,168,-110,168,]),'MULTIPLY':([32,34,35,41,46,55,66,84,87,92,94,95,96,97,98,99,100,101,102,103,107,108,111,112,113,114,115,116,117,120,122,124,127,136,138,141,142,143,144,145,146,147,148,149,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,185,187,189,201,202,203,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,231,233,234,235,236,237,238,240,244,245,246,249,251,252,253,257,263,269,276,281,283,286,288,293,296,297,298,299,300,306,307,308,309,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,332,334,335,337,338,344,345,347,351,352,359,363,370,378,],[-57,55,-56,55,55,55,96,55,-58,96,-103,96,-141,-140,55,-88,-90,96,-139,-99,-114,-136,96,-87,165,-142,55,-101,55,-59,55,55,96,165,-137,-138,-93,-92,-91,-105,96,-102,-106,96,-94,55,165,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,55,-35,-56,165,-108,55,-89,165,165,-126,165,165,165,165,165,165,165,165,-132,165,165,165,165,-127,165,165,96,55,-234,55,-34,96,-107,96,-104,165,55,96,-43,165,165,-111,-143,96,96,96,-81,96,-99,165,96,96,-109,96,165,-42,165,96,96,96,96,165,96,-187,-177,-188,-179,-182,-185,-189,-178,-186,96,-183,-184,-180,-181,165,165,165,165,165,165,-99,165,-110,96,165,96,96,-234,]),'RSHIFT':([94,99,100,103,107,108,112,113,116,136,138,141,142,143,144,145,147,148,151,153,201,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,240,249,251,252,253,283,286,296,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-114,-136,-87,160,-101,160,-137,-138,-93,-92,-91,-105,-102,-106,-94,160,160,-108,-89,160,160,-126,160,160,160,-129,160,160,160,160,-132,160,160,-128,160,-127,160,160,-107,-104,160,160,160,-111,-143,-99,160,-109,160,160,160,160,160,160,160,160,160,-99,160,-110,160,]),'MINUS':([66,92,94,95,96,97,99,100,101,102,103,107,108,111,112,113,114,116,127,136,138,141,142,143,144,145,146,147,148,149,151,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,201,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,231,235,236,237,238,240,245,246,249,251,252,253,257,263,269,276,281,283,286,288,293,296,297,298,299,300,306,307,308,309,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,332,334,335,337,338,344,345,347,351,352,359,363,370,378,],[97,97,-103,97,-141,-140,-88,-90,97,-139,-99,-114,-136,97,-87,161,-142,-101,97,161,-137,-138,-93,-92,-91,-105,97,-102,-106,97,-94,161,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,161,-108,-89,161,161,-126,161,161,161,-129,-131,161,161,-130,-132,161,161,-128,161,-127,161,161,97,-234,97,-107,97,-104,161,97,-43,161,161,-111,-143,97,97,97,-81,97,-99,161,97,97,-109,97,161,-42,161,97,97,97,97,161,97,-187,-177,-188,-179,-182,-185,-189,-178,-186,97,-183,-184,-180,-181,161,161,161,161,161,161,-99,161,-110,97,161,97,97,-234,]),'DOT':([13,25,47,48,60,94,99,100,103,108,112,116,133,142,143,144,145,147,148,151,189,202,205,236,238,252,253,283,296,345,351,],[30,-234,-228,30,93,-103,-88,-90,-99,150,-87,-101,-227,-93,-92,-91,-105,-102,-106,-94,93,-108,-89,-107,-104,-111,-143,-99,-109,-99,-110,]),'LCURL':([54,56,57,59,61,62,63,65,68,69,71,72,75,90,91,94,99,100,103,107,108,112,116,118,119,122,123,136,137,138,139,140,141,142,143,144,145,147,148,151,178,179,180,181,182,184,187,194,195,202,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,231,234,236,238,241,243,245,246,249,252,253,258,264,265,276,284,286,291,292,296,299,306,309,313,329,330,334,340,341,342,343,344,345,346,347,348,350,351,363,367,369,375,378,],[-11,-3,-4,-2,-15,-12,-9,-14,-6,-7,-8,-13,-5,-28,-27,-103,-88,-90,-99,-114,-136,-87,-101,176,-10,-234,-85,-234,-100,-137,-21,-16,-138,-93,-92,-91,-105,-102,-106,-94,-32,-33,-29,-31,-30,231,-35,-60,-62,-108,-19,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-234,-34,-107,-104,-17,-22,-81,-43,-61,-111,-143,-167,-169,-168,-81,-166,-173,231,-170,-109,-42,-81,-234,-81,-174,-175,-81,-204,-203,231,-205,-206,-99,354,-78,-176,231,-110,-234,-81,-207,231,-234,]),'RSQUARE':([54,56,57,59,61,62,63,65,66,68,69,71,72,75,90,91,94,99,100,103,107,108,110,112,113,116,119,137,138,139,140,141,142,143,144,145,147,148,151,174,175,200,201,202,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,237,238,241,243,250,251,252,253,296,335,351,],[-11,-3,-4,-2,-15,-12,-9,-14,98,-6,-7,-8,-13,-5,-28,-27,-103,-88,-90,-99,-114,-136,152,-87,-20,-101,-10,-100,-137,-21,-16,-138,-93,-92,-91,-105,-102,-106,-94,-18,226,-135,238,-108,-19,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-234,-104,-17,-22,296,-134,-111,-143,-109,351,-110,]),'COMPARE_OR':([94,99,100,103,107,108,112,113,116,136,138,141,142,143,144,145,147,148,151,153,201,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,240,249,251,252,253,283,286,296,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-114,-136,-87,159,-101,159,-137,-138,-93,-92,-91,-105,-102,-106,-94,159,159,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,159,159,159,-111,-143,-99,159,-109,159,159,159,159,159,159,159,159,159,-99,159,-110,159,]),'RPAREN':([25,33,40,44,47,48,52,53,54,56,57,59,61,62,63,65,68,69,71,72,75,78,79,81,82,90,91,94,99,100,103,107,108,112,116,119,124,133,134,136,137,138,139,140,141,142,143,144,145,146,147,148,151,153,186,188,190,191,193,194,195,196,197,198,202,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,232,236,238,239,240,241,243,248,249,252,253,296,351,],[-234,-234,-234,-234,-228,85,89,-52,-11,-3,-4,-2,-15,-12,-9,-14,-6,-7,-8,-13,-5,125,-74,130,-66,-28,-27,-103,-88,-90,-99,-114,-136,-87,-101,-10,187,-227,-51,-234,-100,-137,-21,-16,-138,-93,-92,-91,-105,-234,-102,-106,-94,205,-39,234,-36,-73,-65,-60,-62,-113,236,-112,-108,-19,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-38,-107,-104,252,253,-17,-22,-37,-61,-111,-143,-109,-110,]),'DEFER':([231,245,246,299,306,378,],[-234,263,-43,-42,263,-234,]),'SEMICOLON':([1,6,7,12,15,16,17,18,19,22,26,31,32,34,35,39,42,43,45,49,50,54,56,57,59,61,62,63,64,65,68,69,70,71,72,75,80,83,85,86,87,88,89,90,91,94,99,100,103,107,108,112,116,119,120,121,122,123,125,126,128,129,130,131,132,135,136,137,138,139,140,141,142,143,144,145,147,148,151,177,178,179,180,181,182,183,187,192,194,195,202,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,229,230,231,234,236,238,241,242,243,245,246,249,252,253,255,256,258,259,260,261,262,264,265,267,268,269,271,273,274,275,276,277,278,279,280,282,283,284,286,287,289,290,292,294,295,296,298,299,300,301,302,303,304,305,306,309,310,311,312,329,330,331,332,333,336,337,338,339,341,344,345,347,348,349,351,352,353,355,356,357,358,359,360,362,366,368,373,376,378,379,381,],[5,-223,-224,24,-48,36,-47,-44,-45,-46,-225,-49,-57,-234,-56,-71,-68,-67,-63,-229,-233,-11,-3,-4,-2,-15,-12,-9,-55,-14,-6,-7,-53,-8,-13,-5,-234,-70,-226,133,-58,134,-50,-28,-27,-103,-88,-90,-99,-114,-136,-87,-101,-10,-59,-82,-234,-82,-72,191,-77,-75,-64,193,-69,-54,-234,-100,-137,-21,-16,-138,-93,-92,-91,-105,-102,-106,-94,-79,-32,-33,-29,-31,-30,-80,-35,-76,-60,-62,-108,-19,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-84,-86,-234,-34,-107,-104,-17,254,-22,-234,-43,-61,-111,-143,-26,-149,-167,-159,299,-152,-156,-169,-168,-145,-158,-234,-194,-157,-155,-150,-81,-147,-153,-234,-163,-144,-99,-166,-173,-234,-146,-154,-170,-148,-40,-109,-164,-42,-165,-172,-217,-210,-212,-211,-234,-234,-216,-214,-215,-174,-175,-213,-162,-82,-171,-161,-160,352,-166,-173,-99,-78,-176,-151,-110,-234,-82,-82,-209,-208,363,-206,-202,-234,-193,-190,-195,-191,-234,-82,-192,]),'IF':([231,245,246,299,306,367,378,],[-234,293,-43,-42,293,293,-234,]),'FALLTHROUGH':([231,245,246,299,306,378,],[-234,280,-43,-42,280,-234,]),'RSHIFT_EQUAL':([94,99,100,103,107,108,112,116,138,141,142,143,144,145,147,148,151,194,195,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,249,252,253,283,285,286,296,344,345,351,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-60,-62,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-61,-111,-143,-99,317,-234,-109,-234,-99,-110,]),'MODEQUAL':([94,99,100,103,107,108,112,116,138,141,142,143,144,145,147,148,151,194,195,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,249,252,253,283,285,286,296,344,345,351,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-60,-62,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-61,-111,-143,-99,319,-234,-109,-234,-99,-110,]),'RCURL':([176,227,228,231,245,246,247,254,299,354,361,364,365,374,378,380,],[-234,243,-25,-234,-41,-43,295,-24,-42,-196,-234,-197,373,-198,-234,-199,]),'PLUS':([66,92,94,95,96,97,99,100,101,102,103,107,108,111,112,113,114,116,127,136,138,141,142,143,144,145,146,147,148,149,151,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,201,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,231,235,236,237,238,240,245,246,249,251,252,253,257,263,269,276,281,283,286,288,293,296,297,298,299,300,306,307,308,309,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,332,334,335,337,338,344,345,347,351,352,359,363,370,378,],[102,102,-103,102,-141,-140,-88,-90,102,-139,-99,-114,-136,102,-87,164,-142,-101,102,164,-137,-138,-93,-92,-91,-105,102,-102,-106,102,-94,164,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,164,-108,-89,164,164,-126,164,164,164,-129,-131,164,164,-130,-132,164,164,-128,164,-127,164,164,102,-234,102,-107,102,-104,164,102,-43,164,164,-111,-143,102,102,102,-81,102,-99,164,102,102,-109,102,164,-42,164,102,102,102,102,164,102,-187,-177,-188,-179,-182,-185,-189,-178,-186,102,-183,-184,-180,-181,164,164,164,164,164,164,-99,164,-110,102,164,102,102,-234,]),'GO':([231,245,246,299,306,378,],[-234,257,-43,-42,257,-234,]),'SWITCH':([231,245,246,299,306,378,],[-234,281,-43,-42,281,-234,]),'ANDXOR_EQUAL':([94,99,100,103,107,108,112,116,138,141,142,143,144,145,147,148,151,194,195,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,249,252,253,283,285,286,296,344,345,351,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-60,-62,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-61,-111,-143,-99,323,-234,-109,-234,-99,-110,]),'COMMA':([32,35,54,56,57,59,61,62,63,65,68,69,71,72,75,87,90,91,94,99,100,103,107,108,112,116,119,120,136,137,138,139,140,141,142,143,144,145,147,148,151,186,188,189,190,194,195,202,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,232,236,238,241,243,248,249,252,253,283,286,296,344,345,351,],[51,76,-11,-3,-4,-2,-15,-12,-9,-14,-6,-7,-8,-13,-5,-58,-28,-27,-103,-88,-90,-99,-114,-136,-87,-101,-10,-59,-234,-100,-137,-21,-16,-138,-93,-92,-91,-105,-102,-106,-94,-39,233,76,-36,235,-62,-108,-19,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-38,-107,-104,-17,-22,-37,-61,-111,-143,-99,-234,-109,-234,-99,-110,]),'DIVIDE_EQUAL':([94,99,100,103,107,108,112,116,138,141,142,143,144,145,147,148,151,194,195,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,249,252,253,283,285,286,296,344,345,351,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-60,-62,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-61,-111,-143,-99,328,-234,-109,-234,-99,-110,]),'INCREMENT':([94,99,100,103,107,108,112,116,138,141,142,143,144,145,147,148,151,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,252,253,283,286,296,344,345,351,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-111,-143,-99,329,-109,329,-99,-110,]),'IMPORT':([5,8,9,24,],[-234,-219,13,-220,]),'IDENTIFIER':([2,13,14,20,21,23,25,32,33,34,35,40,41,44,46,47,48,51,52,53,55,66,74,76,78,79,81,82,84,87,92,93,95,96,97,98,101,102,111,114,115,117,120,122,124,127,133,134,146,149,150,152,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,176,185,187,189,191,193,203,225,226,227,228,231,233,234,235,237,244,245,246,254,257,263,266,269,276,279,281,287,288,293,297,299,306,307,308,309,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,352,363,370,378,],[7,7,35,37,35,46,-234,-57,-234,60,-56,-234,60,-234,60,-228,7,87,35,-52,60,103,119,120,35,-74,46,-66,60,-58,103,60,103,-141,-140,60,103,-139,103,-142,60,60,-59,60,189,103,-227,-51,103,103,202,60,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,-234,60,-35,-56,-73,-65,60,103,60,35,-25,-234,189,-34,103,103,60,283,-43,-24,103,103,301,103,-81,301,103,301,103,103,103,-42,283,103,103,345,103,-187,-177,-188,-179,-182,-185,-189,-178,-186,103,-183,-184,-180,-181,103,345,103,-234,]),'SHORT_ASSIGNMENT':([283,345,],[314,314,]),'$end':([3,4,5,8,9,10,11,24,36,],[-1,0,-234,-219,-234,-218,-222,-220,-221,]),'IMAGINARY_LIT':([66,92,95,96,97,101,102,104,111,114,127,146,149,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,225,231,235,237,245,246,257,263,269,276,281,288,293,297,299,306,307,308,309,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,352,363,370,378,],[-97,-97,-97,-141,-140,-97,-139,142,-97,-142,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-97,-234,-97,-97,-97,-43,-97,-97,-97,-81,-97,-97,-97,-97,-42,-97,-97,-97,-97,-97,-187,-177,-188,-179,-182,-185,-189,-178,-186,-97,-183,-184,-180,-181,-97,-97,-97,-234,]),'PD':([272,],[308,]),'MODULO':([94,99,100,103,107,108,112,113,116,136,138,141,142,143,144,145,147,148,151,153,201,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,240,249,251,252,253,283,286,296,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-114,-136,-87,170,-101,170,-137,-138,-93,-92,-91,-105,-102,-106,-94,170,170,-108,-89,170,170,-126,170,170,170,170,170,170,170,170,-132,170,170,170,170,-127,170,170,-107,-104,170,170,170,-111,-143,-99,170,-109,170,170,170,170,170,170,170,170,170,-99,170,-110,170,]),'STRING':([32,34,35,41,46,55,84,87,93,98,115,117,120,122,124,152,185,187,189,203,226,233,234,244,],[-57,63,-56,63,63,63,63,-58,63,63,63,63,-59,63,63,63,63,-35,-56,63,63,63,-34,63,]),'FOR':([231,245,246,299,306,378,],[-234,276,-43,-42,276,-234,]),'PACKAGE':([0,],[2,]),'COMPARE_AND':([94,99,100,103,107,108,112,113,116,136,138,141,142,143,144,145,147,148,151,153,201,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,240,249,251,252,253,283,286,296,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-114,-136,-87,169,-101,169,-137,-138,-93,-92,-91,-105,-102,-106,-94,169,169,-108,-89,-125,-118,-126,-133,-124,169,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,169,169,169,-111,-143,-99,169,-109,169,169,169,169,169,169,169,169,169,-99,169,-110,169,]),'LSHIFT_EQUAL':([94,99,100,103,107,108,112,116,138,141,142,143,144,145,147,148,151,194,195,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,249,252,253,283,285,286,296,344,345,351,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-60,-62,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-61,-111,-143,-99,315,-234,-109,-234,-99,-110,]),'XOR':([94,99,100,103,107,108,112,113,116,136,138,141,142,143,144,145,147,148,151,153,201,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,240,249,251,252,253,283,286,296,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-114,-136,-87,158,-101,158,-137,-138,-93,-92,-91,-105,-102,-106,-94,158,158,-108,-89,-125,158,-126,-133,-124,158,-129,-131,158,-121,-130,-132,-119,-120,-128,158,-127,158,-122,-107,-104,158,158,158,-111,-143,-99,158,-109,158,158,158,158,158,158,158,158,158,-99,158,-110,158,]),'EQUALS':([46,54,56,57,58,59,61,62,63,65,68,69,71,72,75,80,90,91,94,99,100,103,107,108,112,116,119,137,138,139,140,141,142,143,144,145,147,148,151,194,195,202,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,241,243,249,252,253,283,285,286,296,344,345,351,],[84,-11,-3,-4,92,-2,-15,-12,-9,-14,-6,-7,-8,-13,-5,127,-28,-27,-103,-88,-90,-99,-114,-136,-87,-101,-10,-100,-137,-21,-16,-138,-93,-92,-91,-105,-102,-106,-94,-60,-62,-108,-19,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-17,-22,-61,-111,-143,-99,321,-234,-109,-234,-99,-110,]),'ELSE':([295,355,362,],[-40,-82,367,]),'PLUSEQUAL':([94,99,100,103,107,108,112,116,138,141,142,143,144,145,147,148,151,194,195,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,249,252,253,283,285,286,296,344,345,351,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-60,-62,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-61,-111,-143,-99,322,-234,-109,-234,-99,-110,]),'GREATERTHAN':([94,99,100,103,107,108,112,113,116,136,138,141,142,143,144,145,147,148,151,153,201,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,240,249,251,252,253,283,286,296,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-114,-136,-87,167,-101,167,-137,-138,-93,-92,-91,-105,-102,-106,-94,167,167,-108,-89,167,167,-126,167,167,167,-129,-131,167,-121,-130,-132,-119,-120,-128,167,-127,167,-122,-107,-104,167,167,167,-111,-143,-99,167,-109,167,167,167,167,167,167,167,167,167,-99,167,-110,167,]),'LSQUARE':([32,34,35,41,46,55,67,84,87,94,98,99,100,103,108,112,115,116,117,120,122,124,142,143,144,145,147,148,151,152,185,187,189,202,203,205,226,233,234,236,238,244,252,253,283,296,345,351,],[-57,66,-56,66,66,66,117,66,-58,-103,66,-88,-90,-99,149,-87,66,-101,66,-59,66,66,-93,-92,-91,-105,-102,-106,-94,66,66,-35,-56,-108,66,-89,66,66,-34,-107,-104,66,-111,-143,-99,-109,-99,-110,]),'VAR':([5,8,9,10,11,24,36,231,245,246,299,306,378,],[-234,-219,-234,21,-222,-220,-221,-234,21,-43,-42,21,-234,]),'OREQUAL':([94,99,100,103,107,108,112,116,138,141,142,143,144,145,147,148,151,194,195,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,249,252,253,283,285,286,296,344,345,351,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-60,-62,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-61,-111,-143,-99,326,-234,-109,-234,-99,-110,]),'TYPECAST':([66,92,95,96,97,101,102,111,114,127,146,149,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,225,231,235,237,245,246,257,263,269,276,281,288,293,297,299,306,307,308,309,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,352,363,370,378,],[115,115,115,-141,-140,115,-139,115,-142,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,-234,115,115,115,-43,115,115,115,-81,115,115,115,115,-42,115,115,115,115,115,-187,-177,-188,-179,-182,-185,-189,-178,-186,115,-183,-184,-180,-181,115,115,115,-234,]),'AND':([66,92,94,95,96,97,99,100,101,102,103,107,108,111,112,113,114,116,127,136,138,141,142,143,144,145,146,147,148,149,151,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,201,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,231,235,236,237,238,240,245,246,249,251,252,253,257,263,269,276,281,283,286,288,293,296,297,298,299,300,306,307,308,309,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,332,334,335,337,338,344,345,347,351,352,359,363,370,378,],[114,114,-103,114,-141,-140,-88,-90,114,-139,-99,-114,-136,114,-87,157,-142,-101,114,157,-137,-138,-93,-92,-91,-105,114,-102,-106,114,-94,157,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,157,-108,-89,-125,157,-126,-133,157,157,-129,-131,157,-121,-130,-132,-119,-120,-128,157,-127,157,-122,114,-234,114,-107,114,-104,157,114,-43,157,157,-111,-143,114,114,114,-81,114,-99,157,114,114,-109,114,157,-42,157,114,114,114,114,157,114,-187,-177,-188,-179,-182,-185,-189,-178,-186,114,-183,-184,-180,-181,157,157,157,157,157,157,-99,157,-110,114,157,114,114,-234,]),'MAP':([32,34,35,41,46,55,84,87,98,115,117,120,122,124,152,185,187,189,203,226,233,234,244,],[-57,67,-56,67,67,67,67,-58,67,67,67,-59,67,67,67,67,-35,-56,67,67,67,-34,67,]),'RETURN':([231,245,246,299,306,378,],[-234,269,-43,-42,269,-234,]),'STRUCT':([32,34,35,41,46,55,73,84,87,98,115,117,120,122,124,152,185,187,189,203,226,233,234,244,],[-57,-23,-56,-23,-23,-23,118,-23,-58,-23,-23,-23,-59,-23,-23,-23,-23,-35,-56,-23,-23,-23,-34,-23,]),'CASE':([245,246,299,354,361,364,365,374,378,380,],[-41,-43,-42,-196,-234,-197,370,-198,-234,-199,]),'LESSTHAN_EQUAL':([94,99,100,103,107,108,112,113,116,136,138,141,142,143,144,145,147,148,151,153,201,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,240,249,251,252,253,283,286,296,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-114,-136,-87,163,-101,163,-137,-138,-93,-92,-91,-105,-102,-106,-94,163,163,-108,-89,163,163,-126,163,163,163,-129,-131,163,-121,-130,-132,-119,-120,-128,163,-127,163,-122,-107,-104,163,163,163,-111,-143,-99,163,-109,163,163,163,163,163,163,163,163,163,-99,163,-110,163,]),'INT':([32,34,35,41,46,55,84,87,93,98,115,117,120,122,124,152,185,187,189,203,226,233,234,244,],[-57,68,-56,68,68,68,68,-58,68,68,68,68,-59,68,68,68,68,-35,-56,68,68,68,-34,68,]),'TIMESEQUAL':([94,99,100,103,107,108,112,116,138,141,142,143,144,145,147,148,151,194,195,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,249,252,253,283,285,286,296,344,345,351,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-60,-62,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-61,-111,-143,-99,327,-234,-109,-234,-99,-110,]),'MINUSEQUAL':([94,99,100,103,107,108,112,116,138,141,142,143,144,145,147,148,151,194,195,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,249,252,253,283,285,286,296,344,345,351,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-60,-62,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-61,-111,-143,-99,318,-234,-109,-234,-99,-110,]),'FLOAT':([32,34,35,41,46,55,84,87,93,98,115,117,120,122,124,152,185,187,189,203,226,233,234,244,],[-57,69,-56,69,69,69,69,-58,69,69,69,69,-59,69,69,69,69,-35,-56,69,69,69,-34,69,]),'FLOAT_LIT':([66,92,95,96,97,101,102,105,111,114,127,146,149,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,225,231,235,237,245,246,257,263,269,276,281,288,293,297,299,306,307,308,309,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,352,363,370,378,],[-96,-96,-96,-141,-140,-96,-139,143,-96,-142,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-96,-234,-96,-96,-96,-43,-96,-96,-96,-81,-96,-96,-96,-96,-42,-96,-96,-96,-96,-96,-187,-177,-188,-179,-182,-185,-189,-178,-186,-96,-183,-184,-180,-181,-96,-96,-96,-234,]),'DEFAULT':([245,246,299,354,361,364,365,374,378,380,],[-41,-43,-42,-196,-234,-197,372,-198,-234,-199,]),'BREAK':([231,245,246,299,306,378,],[-234,287,-43,-42,287,-234,]),'INT_LIT':([66,92,95,96,97,101,102,106,111,114,127,146,149,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,225,231,235,237,245,246,257,263,269,276,281,288,293,297,299,306,307,308,309,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,352,363,370,378,],[-95,-95,-95,-141,-140,-95,-139,144,-95,-142,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-95,-234,-95,-95,-95,-43,-95,-95,-95,-81,-95,-95,-95,-95,-42,-95,-95,-95,-95,-95,-187,-177,-188,-179,-182,-185,-189,-178,-186,-95,-183,-184,-180,-181,-95,-95,-95,-234,]),'CONTINUE':([231,245,246,299,306,378,],[-234,279,-43,-42,279,-234,]),'BOOL':([32,34,35,41,46,55,84,87,93,98,115,117,120,122,124,152,185,187,189,203,226,233,234,244,],[-57,71,-56,71,71,71,71,-58,71,71,71,71,-59,71,71,71,71,-35,-56,71,71,71,-34,71,]),'PS':([272,],[307,]),'STRING_LIT':([7,13,25,27,28,29,30,47,48,66,92,95,96,97,101,102,109,111,114,127,133,146,149,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,225,231,235,237,245,246,257,263,269,276,281,288,293,297,299,306,307,308,309,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,352,363,370,378,],[-224,-234,-234,-232,-231,50,-230,-228,-234,-98,-98,-98,-141,-140,-98,-139,151,-98,-142,-98,-227,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-98,-234,-98,-98,-98,-43,-98,-98,-98,-81,-98,-98,-98,-98,-42,-98,-98,-98,-98,-98,-187,-177,-188,-179,-182,-185,-189,-178,-186,-98,-183,-184,-180,-181,-98,-98,-98,-234,]),'NOT':([66,92,95,96,97,101,102,111,114,127,146,149,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,225,231,235,237,245,246,257,263,269,276,281,288,293,297,299,306,307,308,309,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,352,363,370,378,],[101,101,101,-141,-140,101,-139,101,-142,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,-234,101,101,101,-43,101,101,101,-81,101,101,101,101,-42,101,101,101,101,101,-187,-177,-188,-179,-182,-185,-189,-178,-186,101,-183,-184,-180,-181,101,101,101,-234,]),'ANDEQUAL':([94,99,100,103,107,108,112,116,138,141,142,143,144,145,147,148,151,194,195,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,249,252,253,283,285,286,296,344,345,351,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-60,-62,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-61,-111,-143,-99,325,-234,-109,-234,-99,-110,]),'DECREMENT':([94,99,100,103,107,108,112,116,138,141,142,143,144,145,147,148,151,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,252,253,283,286,296,344,345,351,],[-103,-88,-90,-99,-114,-136,-87,-101,-137,-138,-93,-92,-91,-105,-102,-106,-94,-108,-89,-125,-118,-126,-133,-124,-115,-129,-131,-117,-121,-130,-132,-119,-120,-128,-116,-127,-123,-122,-107,-104,-111,-143,-99,330,-109,330,-99,-110,]),'TYPE':([5,8,9,10,11,24,32,34,35,36,41,46,55,84,87,93,98,115,117,120,122,124,152,185,187,189,203,226,231,233,234,244,245,246,299,306,378,],[-234,-219,-234,23,-222,-220,-57,74,-56,-221,74,74,74,74,-58,74,74,74,74,-59,74,74,74,74,-35,-56,74,74,-234,74,-34,74,23,-43,-42,23,-234,]),'OR':([94,99,100,103,107,108,112,113,116,136,138,141,142,143,144,145,147,148,151,153,201,202,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,236,238,240,249,251,252,253,283,286,296,298,300,313,332,334,335,337,338,344,345,347,351,359,],[-103,-88,-90,-99,-114,-136,-87,171,-101,171,-137,-138,-93,-92,-91,-105,-102,-106,-94,171,171,-108,-89,-125,171,-126,-133,-124,171,-129,-131,171,-121,-130,-132,-119,-120,-128,171,-127,-123,-122,-107,-104,171,171,171,-111,-143,-99,171,-109,171,171,171,171,171,171,171,171,171,-99,171,-110,171,]),'SCAN':([231,245,246,299,306,378,],[-234,288,-43,-42,288,-234,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'FunctionBody':([184,],[229,]),'Conversion':([66,92,95,101,111,127,146,149,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,225,235,237,245,257,263,269,281,288,293,297,306,307,308,309,314,324,352,363,370,],[94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,]),'ContinueStmt':([245,306,],[256,256,]),'ExpressionRep':([136,286,344,],[194,194,194,]),'ExpressionStmt':([245,306,309,363,],[258,258,258,258,]),'ScanStmt':([245,306,],[259,259,]),'Statement':([245,306,],[260,336,]),'IfStmt':([245,306,367,],[261,261,376,]),'FallThroughStmt':([245,306,],[262,262,]),'StatementRep':([231,378,],[245,245,]),'TypeToken':([34,41,46,55,84,93,98,115,117,122,124,152,185,203,226,233,244,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'AliasDecl':([23,81,],[43,43,]),'PackageNameDotOpt':([13,48,],[29,29,]),'TypeName':([34,41,46,55,84,93,98,115,117,122,124,152,185,203,226,233,244,],[59,59,59,59,59,137,59,59,59,59,59,59,59,59,59,59,59,]),'ExprCaseClause':([365,],[374,]),'ParametersList':([124,],[188,]),'ParameterDecl':([124,233,],[190,248,]),'FuncScope':([34,41,46,55,84,98,115,117,122,124,152,185,203,226,233,244,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'FunctionName':([20,],[38,]),'LabeledStmt':([245,306,],[267,267,]),'KeyType':([117,],[175,]),'StatementList':([231,378,],[247,380,]),'TypeAssertion':([108,],[148,]),'ConditionOpt':([352,],[358,]),'ElementType':([98,152,226,],[140,204,241,]),'RetTypeSet':([123,],[184,]),'PointerType':([34,41,46,55,84,98,115,117,122,124,152,185,203,226,233,244,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'EndScope':([121,123,333,353,355,379,],[177,183,349,360,362,381,]),'VarSpecRep':([40,],[78,]),'VarDecl':([10,245,306,],[22,22,22,]),'PrintStmt':([245,306,],[268,268,]),'ConstSpecRep':([33,],[52,]),'Operand':([66,92,95,101,111,127,146,149,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,225,235,237,245,257,263,269,281,288,293,297,306,307,308,309,314,324,352,363,370,],[116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,]),'TypeSpec':([23,81,],[45,131,]),'Parameters':([77,122,],[122,178,]),'UnaryOp':([66,92,95,101,111,127,146,149,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,225,235,237,245,257,263,269,281,288,293,297,306,307,308,309,314,324,352,363,370,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'PackageName':([2,13,48,],[6,28,28,]),'SourceFile':([0,],[3,]),'ExpressionListPureOpt':([269,],[303,]),'Label':([245,266,279,287,306,],[270,302,312,312,270,]),'FunctionDecl':([10,],[15,]),'TopLevelDecl':([10,],[16,]),'ExprSwitchStmt':([245,306,],[271,271,]),'IdentifierList':([14,21,52,78,124,227,233,],[34,41,34,41,185,244,185,]),'TypeLit':([34,41,46,55,84,98,115,117,122,124,152,185,203,226,233,244,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'ImportDeclRep':([5,],[9,]),'GoStmt':([245,306,],[273,273,]),'DeferStmt':([245,306,],[274,274,]),'PackageClause':([0,],[1,]),'ResultOpt':([122,],[180,]),'Selector':([108,],[147,]),'IncDecStmt':([245,306,309,363,],[265,265,265,265,]),'GotoStmt':([245,306,],[275,275,]),'TopLevelDeclRep':([9,],[10,]),'C':([66,92,95,101,111,127,146,149,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,225,235,237,245,257,263,269,281,288,293,297,306,307,308,309,314,324,352,363,370,],[104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,]),'PrimaryExpr':([66,92,95,101,111,127,146,149,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,225,235,237,245,257,263,269,281,288,293,297,306,307,308,309,314,324,352,363,370,],[108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,]),'S':([66,92,95,101,111,127,146,149,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,225,235,237,245,257,263,269,281,288,293,297,306,307,308,309,314,324,352,363,370,],[109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,]),'StartSwitch':([354,],[361,]),'assign_op':([285,],[324,]),'Signature':([77,],[123,]),'Block':([184,291,342,350,375,],[230,333,353,355,379,]),'ExprCaseClauseList':([361,],[365,]),'SwitchStmt':([245,306,],[278,278,]),'VarSpec':([21,78,],[39,126,]),'Result':([122,],[182,]),'Assignment':([245,306,309,363,],[264,264,264,264,]),'ExpressionListTypeOpt':([146,],[197,]),'QualifiedIdent':([34,41,46,55,84,93,98,115,117,122,124,152,185,203,226,233,244,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'Literal':([66,92,95,101,111,127,146,149,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,225,235,237,245,257,263,269,281,288,293,297,306,307,308,309,314,324,352,363,370,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'ImportDecl':([9,],[12,]),'OperandName':([66,92,95,101,111,127,146,149,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,225,235,237,245,257,263,269,281,288,293,297,306,307,308,309,314,324,352,363,370,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'AssignOp':([285,],[316,]),'LabelOpt':([279,287,],[311,331,]),'FieldDeclRep':([176,],[227,]),'start':([0,],[4,]),'Declaration':([10,245,306,],[17,282,282,]),'Condition':([309,352,],[340,356,]),'StructType':([34,41,46,55,84,98,115,117,122,124,152,185,203,226,233,244,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'ConstSpec':([14,52,],[31,88,]),'F':([66,92,95,101,111,127,146,149,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,225,235,237,245,257,263,269,281,288,293,297,306,307,308,309,314,324,352,363,370,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'epsilon':([5,9,13,25,33,34,40,44,48,80,122,136,146,149,176,231,237,245,269,279,286,287,306,309,344,352,361,362,363,378,],[8,11,27,47,53,64,79,82,27,128,181,195,196,200,228,246,200,284,304,310,195,310,284,341,195,357,364,366,284,246,]),'ConditionBlockOpt':([309,],[342,]),'ExpressionList':([92,127,146,245,269,306,309,324,363,370,],[135,192,198,285,305,285,285,348,285,377,]),'SimpleStmt':([245,306,309,363,],[289,289,339,369,]),'ImportSpecRep':([25,],[48,]),'Expression':([66,92,111,127,146,149,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,225,235,237,245,257,263,269,281,288,293,297,306,307,308,309,314,324,352,363,370,],[113,136,153,136,136,201,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,240,249,251,286,298,300,136,313,332,334,335,286,337,338,344,347,136,359,286,136,]),'ImportPath':([29,],[49,]),'ExprSwitchCase':([365,],[371,]),'ExpressionOpt':([149,237,],[199,250,]),'IdentifierRep':([14,21,52,78,124,227,233,],[32,32,32,32,32,32,32,]),'TypeExprListOpt':([34,],[70,]),'ReturnStmt':([245,306,],[277,277,]),'ConstDecl':([10,245,306,],[18,18,18,]),'Slice':([108,],[145,]),'ArrayType':([34,41,46,55,84,98,115,117,122,124,152,185,203,226,233,244,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'ForStmt':([245,306,],[290,290,]),'Function':([77,],[121,]),'ImportSpec':([13,48,],[26,86,]),'Type':([34,41,46,55,84,98,115,117,122,124,152,185,203,226,233,244,],[58,80,83,90,132,139,173,174,179,186,139,232,239,139,186,255,]),'TypeSpecRep':([44,],[81,]),'CreateScope':([38,245,276,306,313,334,367,],[77,291,309,291,346,350,375,]),'SliceType':([34,41,46,55,84,98,115,117,122,124,152,185,203,226,233,244,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'TypeDecl':([10,245,306,],[19,19,19,]),'BaseType':([55,],[91,]),'I':([66,92,95,101,111,127,146,149,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,225,235,237,245,257,263,269,281,288,293,297,306,307,308,309,314,324,352,363,370,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'UnaryExpr':([66,92,95,101,111,127,146,149,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,225,235,237,245,257,263,269,281,288,293,297,306,307,308,309,314,324,352,363,370,],[107,107,138,141,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,]),'ArrayLength':([66,],[110,]),'MapType':([34,41,46,55,84,98,115,117,122,124,152,185,203,226,233,244,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'ForClause':([309,],[343,]),'ShortVarDecl':([245,306,309,363,],[292,292,292,292,]),'TypeDef':([23,81,],[42,42,]),'FieldDecl':([227,],[242,]),'BreakStmt':([245,306,],[294,294,]),'BasicLit':([66,92,95,101,111,127,146,149,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,225,235,237,245,257,263,269,281,288,293,297,306,307,308,309,314,324,352,363,370,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'ExpressionListOpt':([80,],[129,]),'ElseOpt':([362,],[368,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> SourceFile','start',1,'p_start','parser.py',159),
  ('Type -> TypeName','Type',1,'p_type','parser.py',167),
  ('Type -> TypeLit','Type',1,'p_type','parser.py',168),
  ('TypeName -> TypeToken','TypeName',1,'p_type_name','parser.py',172),
  ('TypeName -> QualifiedIdent','TypeName',1,'p_type_name','parser.py',173),
  ('TypeToken -> INT','TypeToken',1,'p_type_token','parser.py',186),
  ('TypeToken -> FLOAT','TypeToken',1,'p_type_token','parser.py',187),
  ('TypeToken -> BOOL','TypeToken',1,'p_type_token','parser.py',188),
  ('TypeToken -> STRING','TypeToken',1,'p_type_token','parser.py',189),
  ('TypeToken -> TYPE IDENTIFIER','TypeToken',2,'p_type_token','parser.py',190),
  ('TypeLit -> ArrayType','TypeLit',1,'p_type_lit','parser.py',211),
  ('TypeLit -> StructType','TypeLit',1,'p_type_lit','parser.py',212),
  ('TypeLit -> PointerType','TypeLit',1,'p_type_lit','parser.py',213),
  ('TypeLit -> MapType','TypeLit',1,'p_type_lit','parser.py',214),
  ('TypeLit -> SliceType','TypeLit',1,'p_type_lit','parser.py',215),
  ('SliceType -> LSQUARE RSQUARE ElementType','SliceType',3,'p_slice_type','parser.py',225),
  ('MapType -> MAP LSQUARE KeyType RSQUARE ElementType','MapType',5,'p_map_type','parser.py',234),
  ('KeyType -> Type','KeyType',1,'p_key_type','parser.py',241),
  ('ArrayType -> LSQUARE ArrayLength RSQUARE ElementType','ArrayType',4,'p_array_type','parser.py',248),
  ('ArrayLength -> Expression','ArrayLength',1,'p_array_length','parser.py',259),
  ('ElementType -> Type','ElementType',1,'p_element_type','parser.py',263),
  ('StructType -> FuncScope STRUCT LCURL FieldDeclRep RCURL','StructType',5,'p_struct_type','parser.py',271),
  ('FuncScope -> <empty>','FuncScope',0,'p_func_scope','parser.py',277),
  ('FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON','FieldDeclRep',3,'p_field_decl_rep','parser.py',281),
  ('FieldDeclRep -> epsilon','FieldDeclRep',1,'p_field_decl_rep','parser.py',282),
  ('FieldDecl -> IdentifierList Type','FieldDecl',2,'p_field_decl','parser.py',292),
  ('PointerType -> MULTIPLY BaseType','PointerType',2,'p_point_type','parser.py',311),
  ('BaseType -> Type','BaseType',1,'p_base_type','parser.py',317),
  ('Signature -> Parameters ResultOpt','Signature',2,'p_sign','parser.py',324),
  ('ResultOpt -> Result','ResultOpt',1,'p_result_opt','parser.py',342),
  ('ResultOpt -> epsilon','ResultOpt',1,'p_result_opt','parser.py',343),
  ('Result -> Parameters','Result',1,'p_result','parser.py',347),
  ('Result -> Type','Result',1,'p_result','parser.py',348),
  ('Parameters -> LPAREN ParametersList RPAREN','Parameters',3,'p_params','parser.py',353),
  ('Parameters -> LPAREN RPAREN','Parameters',2,'p_params','parser.py',354),
  ('ParametersList -> ParameterDecl','ParametersList',1,'p_param_list','parser.py',361),
  ('ParametersList -> ParametersList COMMA ParameterDecl','ParametersList',3,'p_param_list','parser.py',362),
  ('ParameterDecl -> IdentifierList Type','ParameterDecl',2,'p_param_decl','parser.py',372),
  ('ParameterDecl -> Type','ParameterDecl',1,'p_param_decl','parser.py',373),
  ('Block -> LCURL StatementList RCURL','Block',3,'p_block','parser.py',392),
  ('StatementList -> StatementRep','StatementList',1,'p_stat_list','parser.py',396),
  ('StatementRep -> StatementRep Statement SEMICOLON','StatementRep',3,'p_stat_rep','parser.py',400),
  ('StatementRep -> epsilon','StatementRep',1,'p_stat_rep','parser.py',401),
  ('Declaration -> ConstDecl','Declaration',1,'p_decl','parser.py',412),
  ('Declaration -> TypeDecl','Declaration',1,'p_decl','parser.py',413),
  ('Declaration -> VarDecl','Declaration',1,'p_decl','parser.py',414),
  ('TopLevelDecl -> Declaration','TopLevelDecl',1,'p_toplevel_decl','parser.py',418),
  ('TopLevelDecl -> FunctionDecl','TopLevelDecl',1,'p_toplevel_decl','parser.py',419),
  ('ConstDecl -> CONST ConstSpec','ConstDecl',2,'p_const_decl','parser.py',426),
  ('ConstDecl -> CONST LPAREN ConstSpecRep RPAREN','ConstDecl',4,'p_const_decl','parser.py',427),
  ('ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON','ConstSpecRep',3,'p_const_spec_rep','parser.py',434),
  ('ConstSpecRep -> epsilon','ConstSpecRep',1,'p_const_spec_rep','parser.py',435),
  ('ConstSpec -> IdentifierList TypeExprListOpt','ConstSpec',2,'p_const_spec','parser.py',443),
  ('TypeExprListOpt -> Type EQUALS ExpressionList','TypeExprListOpt',3,'p_type_expr_list','parser.py',459),
  ('TypeExprListOpt -> epsilon','TypeExprListOpt',1,'p_type_expr_list','parser.py',460),
  ('IdentifierList -> IDENTIFIER','IdentifierList',1,'p_identifier_list','parser.py',475),
  ('IdentifierList -> IdentifierRep','IdentifierList',1,'p_identifier_list','parser.py',476),
  ('IdentifierRep -> IdentifierRep COMMA IDENTIFIER','IdentifierRep',3,'p_identifier_rep','parser.py',492),
  ('IdentifierRep -> IDENTIFIER COMMA IDENTIFIER','IdentifierRep',3,'p_identifier_rep','parser.py',493),
  ('ExpressionList -> Expression ExpressionRep','ExpressionList',2,'p_expr_list','parser.py',523),
  ('ExpressionRep -> ExpressionRep COMMA Expression','ExpressionRep',3,'p_expr_rep','parser.py',533),
  ('ExpressionRep -> epsilon','ExpressionRep',1,'p_expr_rep','parser.py',534),
  ('TypeDecl -> TYPE TypeSpec','TypeDecl',2,'p_type_decl','parser.py',551),
  ('TypeDecl -> TYPE LPAREN TypeSpecRep RPAREN','TypeDecl',4,'p_type_decl','parser.py',552),
  ('TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON','TypeSpecRep',3,'p_type_spec_rep','parser.py',559),
  ('TypeSpecRep -> epsilon','TypeSpecRep',1,'p_type_spec_rep','parser.py',560),
  ('TypeSpec -> AliasDecl','TypeSpec',1,'p_type_spec','parser.py',567),
  ('TypeSpec -> TypeDef','TypeSpec',1,'p_type_spec','parser.py',568),
  ('AliasDecl -> IDENTIFIER EQUALS Type','AliasDecl',3,'p_alias_decl','parser.py',572),
  ('TypeDef -> IDENTIFIER Type','TypeDef',2,'p_type_def','parser.py',584),
  ('VarDecl -> VAR VarSpec','VarDecl',2,'p_var_decl','parser.py',597),
  ('VarDecl -> VAR LPAREN VarSpecRep RPAREN','VarDecl',4,'p_var_decl','parser.py',598),
  ('VarSpecRep -> VarSpecRep VarSpec SEMICOLON','VarSpecRep',3,'p_var_spec_rep','parser.py',605),
  ('VarSpecRep -> epsilon','VarSpecRep',1,'p_var_spec_rep','parser.py',606),
  ('VarSpec -> IdentifierList Type ExpressionListOpt','VarSpec',3,'p_var_spec','parser.py',614),
  ('ExpressionListOpt -> EQUALS ExpressionList','ExpressionListOpt',2,'p_expr_list_opt','parser.py',661),
  ('ExpressionListOpt -> epsilon','ExpressionListOpt',1,'p_expr_list_opt','parser.py',662),
  ('ShortVarDecl -> IDENTIFIER SHORT_ASSIGNMENT Expression','ShortVarDecl',3,'p_short_var_decl','parser.py',672),
  ('FunctionDecl -> FUNC FunctionName CreateScope Function EndScope','FunctionDecl',5,'p_func_decl','parser.py',691),
  ('FunctionDecl -> FUNC FunctionName CreateScope Signature EndScope','FunctionDecl',5,'p_func_decl','parser.py',692),
  ('CreateScope -> <empty>','CreateScope',0,'p_create_scope','parser.py',708),
  ('EndScope -> <empty>','EndScope',0,'p_end_scope','parser.py',712),
  ('FunctionName -> IDENTIFIER','FunctionName',1,'p_func_name','parser.py',716),
  ('Function -> Signature RetTypeSet FunctionBody','Function',3,'p_func','parser.py',731),
  ('RetTypeSet -> <empty>','RetTypeSet',0,'p_ret_type_set','parser.py',748),
  ('FunctionBody -> Block','FunctionBody',1,'p_func_body','parser.py',757),
  ('Operand -> Literal','Operand',1,'p_operand','parser.py',764),
  ('Operand -> OperandName','Operand',1,'p_operand','parser.py',765),
  ('Operand -> LPAREN Expression RPAREN','Operand',3,'p_operand','parser.py',766),
  ('Literal -> BasicLit','Literal',1,'p_literal','parser.py',773),
  ('BasicLit -> I INT_LIT','BasicLit',2,'p_basic_lit','parser.py',832),
  ('BasicLit -> F FLOAT_LIT','BasicLit',2,'p_basic_lit','parser.py',833),
  ('BasicLit -> C IMAGINARY_LIT','BasicLit',2,'p_basic_lit','parser.py',834),
  ('BasicLit -> S STRING_LIT','BasicLit',2,'p_basic_lit','parser.py',835),
  ('I -> <empty>','I',0,'p_I','parser.py',843),
  ('F -> <empty>','F',0,'p_F','parser.py',847),
  ('C -> <empty>','C',0,'p_C','parser.py',851),
  ('S -> <empty>','S',0,'p_S','parser.py',855),
  ('OperandName -> IDENTIFIER','OperandName',1,'p_operand_name','parser.py',859),
  ('QualifiedIdent -> IDENTIFIER DOT TypeName','QualifiedIdent',3,'p_qualified_ident','parser.py',898),
  ('PrimaryExpr -> Operand','PrimaryExpr',1,'p_prim_expr','parser.py',910),
  ('PrimaryExpr -> PrimaryExpr Selector','PrimaryExpr',2,'p_prim_expr','parser.py',911),
  ('PrimaryExpr -> Conversion','PrimaryExpr',1,'p_prim_expr','parser.py',912),
  ('PrimaryExpr -> PrimaryExpr LSQUARE Expression RSQUARE','PrimaryExpr',4,'p_prim_expr','parser.py',913),
  ('PrimaryExpr -> PrimaryExpr Slice','PrimaryExpr',2,'p_prim_expr','parser.py',914),
  ('PrimaryExpr -> PrimaryExpr TypeAssertion','PrimaryExpr',2,'p_prim_expr','parser.py',915),
  ('PrimaryExpr -> PrimaryExpr LPAREN ExpressionListTypeOpt RPAREN','PrimaryExpr',4,'p_prim_expr','parser.py',916),
  ('Selector -> DOT IDENTIFIER','Selector',2,'p_selector','parser.py',997),
  ('Slice -> LSQUARE ExpressionOpt COLON ExpressionOpt RSQUARE','Slice',5,'p_slice','parser.py',1023),
  ('Slice -> LSQUARE ExpressionOpt COLON Expression COLON Expression RSQUARE','Slice',7,'p_slice','parser.py',1024),
  ('TypeAssertion -> DOT LPAREN Type RPAREN','TypeAssertion',4,'p_type_assert','parser.py',1032),
  ('ExpressionListTypeOpt -> ExpressionList','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',1037),
  ('ExpressionListTypeOpt -> epsilon','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',1038),
  ('Expression -> UnaryExpr','Expression',1,'p_expr','parser.py',1044),
  ('Expression -> Expression COMPARE_OR Expression','Expression',3,'p_expr','parser.py',1045),
  ('Expression -> Expression COMPARE_AND Expression','Expression',3,'p_expr','parser.py',1046),
  ('Expression -> Expression EQEQ Expression','Expression',3,'p_expr','parser.py',1047),
  ('Expression -> Expression NOTEQUALS Expression','Expression',3,'p_expr','parser.py',1048),
  ('Expression -> Expression LESSTHAN Expression','Expression',3,'p_expr','parser.py',1049),
  ('Expression -> Expression GREATERTHAN Expression','Expression',3,'p_expr','parser.py',1050),
  ('Expression -> Expression LESSTHAN_EQUAL Expression','Expression',3,'p_expr','parser.py',1051),
  ('Expression -> Expression GREATERTHAN_EQUAL Expression','Expression',3,'p_expr','parser.py',1052),
  ('Expression -> Expression OR Expression','Expression',3,'p_expr','parser.py',1053),
  ('Expression -> Expression XOR Expression','Expression',3,'p_expr','parser.py',1054),
  ('Expression -> Expression ANDXOR Expression','Expression',3,'p_expr','parser.py',1055),
  ('Expression -> Expression DIVIDE Expression','Expression',3,'p_expr','parser.py',1056),
  ('Expression -> Expression MODULO Expression','Expression',3,'p_expr','parser.py',1057),
  ('Expression -> Expression LSHIFT Expression','Expression',3,'p_expr','parser.py',1058),
  ('Expression -> Expression RSHIFT Expression','Expression',3,'p_expr','parser.py',1059),
  ('Expression -> Expression PLUS Expression','Expression',3,'p_expr','parser.py',1060),
  ('Expression -> Expression MINUS Expression','Expression',3,'p_expr','parser.py',1061),
  ('Expression -> Expression MULTIPLY Expression','Expression',3,'p_expr','parser.py',1062),
  ('Expression -> Expression AND Expression','Expression',3,'p_expr','parser.py',1063),
  ('ExpressionOpt -> Expression','ExpressionOpt',1,'p_expr_opt','parser.py',1109),
  ('ExpressionOpt -> epsilon','ExpressionOpt',1,'p_expr_opt','parser.py',1110),
  ('UnaryExpr -> PrimaryExpr','UnaryExpr',1,'p_unary_expr','parser.py',1114),
  ('UnaryExpr -> UnaryOp UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',1115),
  ('UnaryExpr -> NOT UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',1116),
  ('UnaryOp -> PLUS','UnaryOp',1,'p_unary_op','parser.py',1146),
  ('UnaryOp -> MINUS','UnaryOp',1,'p_unary_op','parser.py',1147),
  ('UnaryOp -> MULTIPLY','UnaryOp',1,'p_unary_op','parser.py',1148),
  ('UnaryOp -> AND','UnaryOp',1,'p_unary_op','parser.py',1149),
  ('Conversion -> TYPECAST Type LPAREN Expression RPAREN','Conversion',5,'p_conversion','parser.py',1163),
  ('Statement -> Declaration','Statement',1,'p_statement','parser.py',1171),
  ('Statement -> LabeledStmt','Statement',1,'p_statement','parser.py',1172),
  ('Statement -> SimpleStmt','Statement',1,'p_statement','parser.py',1173),
  ('Statement -> ReturnStmt','Statement',1,'p_statement','parser.py',1174),
  ('Statement -> BreakStmt','Statement',1,'p_statement','parser.py',1175),
  ('Statement -> ContinueStmt','Statement',1,'p_statement','parser.py',1176),
  ('Statement -> GotoStmt','Statement',1,'p_statement','parser.py',1177),
  ('Statement -> CreateScope Block EndScope','Statement',3,'p_statement','parser.py',1178),
  ('Statement -> IfStmt','Statement',1,'p_statement','parser.py',1179),
  ('Statement -> SwitchStmt','Statement',1,'p_statement','parser.py',1180),
  ('Statement -> ForStmt','Statement',1,'p_statement','parser.py',1181),
  ('Statement -> DeferStmt','Statement',1,'p_statement','parser.py',1182),
  ('Statement -> FallThroughStmt','Statement',1,'p_statement','parser.py',1183),
  ('Statement -> GoStmt','Statement',1,'p_statement','parser.py',1184),
  ('Statement -> PrintStmt','Statement',1,'p_statement','parser.py',1185),
  ('Statement -> ScanStmt','Statement',1,'p_statement','parser.py',1186),
  ('PrintStmt -> PRINT PD Expression','PrintStmt',3,'p_print_stmt','parser.py',1193),
  ('PrintStmt -> PRINT PS Expression','PrintStmt',3,'p_print_stmt','parser.py',1194),
  ('ScanStmt -> SCAN Expression','ScanStmt',2,'p_scan_stmt','parser.py',1207),
  ('FallThroughStmt -> FALLTHROUGH','FallThroughStmt',1,'p_fallthrough_stmt','parser.py',1214),
  ('GoStmt -> GO Expression','GoStmt',2,'p_go_stmt','parser.py',1218),
  ('DeferStmt -> DEFER Expression','DeferStmt',2,'p_defer_stmt','parser.py',1224),
  ('SimpleStmt -> epsilon','SimpleStmt',1,'p_simple_stmt','parser.py',1229),
  ('SimpleStmt -> ExpressionStmt','SimpleStmt',1,'p_simple_stmt','parser.py',1230),
  ('SimpleStmt -> IncDecStmt','SimpleStmt',1,'p_simple_stmt','parser.py',1231),
  ('SimpleStmt -> Assignment','SimpleStmt',1,'p_simple_stmt','parser.py',1232),
  ('SimpleStmt -> ShortVarDecl','SimpleStmt',1,'p_simple_stmt','parser.py',1233),
  ('LabeledStmt -> Label COLON Statement','LabeledStmt',3,'p_labeled_statements','parser.py',1238),
  ('Label -> IDENTIFIER','Label',1,'p_label','parser.py',1256),
  ('ExpressionStmt -> Expression','ExpressionStmt',1,'p_expression_stmt','parser.py',1261),
  ('IncDecStmt -> Expression INCREMENT','IncDecStmt',2,'p_inc_dec','parser.py',1267),
  ('IncDecStmt -> Expression DECREMENT','IncDecStmt',2,'p_inc_dec','parser.py',1268),
  ('Assignment -> ExpressionList assign_op ExpressionList','Assignment',3,'p_assignment','parser.py',1275),
  ('assign_op -> AssignOp','assign_op',1,'p_assign_op','parser.py',1309),
  ('AssignOp -> PLUSEQUAL','AssignOp',1,'p_AssignOp','parser.py',1313),
  ('AssignOp -> MINUSEQUAL','AssignOp',1,'p_AssignOp','parser.py',1314),
  ('AssignOp -> TIMESEQUAL','AssignOp',1,'p_AssignOp','parser.py',1315),
  ('AssignOp -> DIVIDE_EQUAL','AssignOp',1,'p_AssignOp','parser.py',1316),
  ('AssignOp -> MODEQUAL','AssignOp',1,'p_AssignOp','parser.py',1317),
  ('AssignOp -> ANDEQUAL','AssignOp',1,'p_AssignOp','parser.py',1318),
  ('AssignOp -> OREQUAL','AssignOp',1,'p_AssignOp','parser.py',1319),
  ('AssignOp -> XOREQUAL','AssignOp',1,'p_AssignOp','parser.py',1320),
  ('AssignOp -> ANDXOR_EQUAL','AssignOp',1,'p_AssignOp','parser.py',1321),
  ('AssignOp -> LSHIFT_EQUAL','AssignOp',1,'p_AssignOp','parser.py',1322),
  ('AssignOp -> RSHIFT_EQUAL','AssignOp',1,'p_AssignOp','parser.py',1323),
  ('AssignOp -> EQUALS','AssignOp',1,'p_AssignOp','parser.py',1324),
  ('IfStmt -> IF Expression CreateScope Block EndScope ElseOpt','IfStmt',6,'p_if_statement','parser.py',1330),
  ('ElseOpt -> ELSE IfStmt','ElseOpt',2,'p_else_opt','parser.py',1351),
  ('ElseOpt -> ELSE CreateScope Block EndScope','ElseOpt',4,'p_else_opt','parser.py',1352),
  ('ElseOpt -> epsilon','ElseOpt',1,'p_else_opt','parser.py',1353),
  ('SwitchStmt -> ExprSwitchStmt','SwitchStmt',1,'p_switch_statement','parser.py',1365),
  ('ExprSwitchStmt -> SWITCH Expression CreateScope LCURL StartSwitch ExprCaseClauseList RCURL','ExprSwitchStmt',7,'p_ExprSwitchStmt','parser.py',1369),
  ('StartSwitch -> <empty>','StartSwitch',0,'p_start_switch','parser.py',1393),
  ('ExprCaseClauseList -> epsilon','ExprCaseClauseList',1,'p_ExprCaseClauseList','parser.py',1406),
  ('ExprCaseClauseList -> ExprCaseClauseList ExprCaseClause','ExprCaseClauseList',2,'p_ExprCaseClauseList','parser.py',1407),
  ('ExprCaseClause -> ExprSwitchCase COLON StatementList','ExprCaseClause',3,'p_ExprCaseClause','parser.py',1423),
  ('ExprSwitchCase -> CASE ExpressionList','ExprSwitchCase',2,'p_ExprSwitchCase','parser.py',1436),
  ('ExprSwitchCase -> DEFAULT','ExprSwitchCase',1,'p_ExprSwitchCase','parser.py',1437),
  ('ForStmt -> FOR CreateScope ConditionBlockOpt Block EndScope','ForStmt',5,'p_for','parser.py',1463),
  ('ConditionBlockOpt -> epsilon','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',1474),
  ('ConditionBlockOpt -> Condition','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',1475),
  ('ConditionBlockOpt -> ForClause','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',1476),
  ('Condition -> Expression','Condition',1,'p_condition','parser.py',1480),
  ('ForClause -> SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmt','ForClause',5,'p_forclause','parser.py',1484),
  ('ConditionOpt -> epsilon','ConditionOpt',1,'p_conditionopt','parser.py',1504),
  ('ConditionOpt -> Condition','ConditionOpt',1,'p_conditionopt','parser.py',1505),
  ('ReturnStmt -> RETURN ExpressionListPureOpt','ReturnStmt',2,'p_return','parser.py',1512),
  ('ExpressionListPureOpt -> ExpressionList','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',1529),
  ('ExpressionListPureOpt -> epsilon','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',1530),
  ('BreakStmt -> BREAK LabelOpt','BreakStmt',2,'p_break','parser.py',1534),
  ('ContinueStmt -> CONTINUE LabelOpt','ContinueStmt',2,'p_continue','parser.py',1538),
  ('LabelOpt -> Label','LabelOpt',1,'p_labelopt','parser.py',1542),
  ('LabelOpt -> epsilon','LabelOpt',1,'p_labelopt','parser.py',1543),
  ('GotoStmt -> GOTO Label','GotoStmt',2,'p_goto','parser.py',1548),
  ('SourceFile -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep','SourceFile',4,'p_source_file','parser.py',1555),
  ('ImportDeclRep -> epsilon','ImportDeclRep',1,'p_import_decl_rep','parser.py',1563),
  ('ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON','ImportDeclRep',3,'p_import_decl_rep','parser.py',1564),
  ('TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON','TopLevelDeclRep',3,'p_toplevel_decl_rep','parser.py',1573),
  ('TopLevelDeclRep -> epsilon','TopLevelDeclRep',1,'p_toplevel_decl_rep','parser.py',1574),
  ('PackageClause -> PACKAGE PackageName','PackageClause',2,'p_package_clause','parser.py',1586),
  ('PackageName -> IDENTIFIER','PackageName',1,'p_package_name','parser.py',1591),
  ('ImportDecl -> IMPORT ImportSpec','ImportDecl',2,'p_import_decl','parser.py',1603),
  ('ImportDecl -> IMPORT LPAREN ImportSpecRep RPAREN','ImportDecl',4,'p_import_decl','parser.py',1604),
  ('ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON','ImportSpecRep',3,'p_import_spec_rep','parser.py',1611),
  ('ImportSpecRep -> epsilon','ImportSpecRep',1,'p_import_spec_rep','parser.py',1612),
  ('ImportSpec -> PackageNameDotOpt ImportPath','ImportSpec',2,'p_import_spec','parser.py',1620),
  ('PackageNameDotOpt -> DOT','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',1628),
  ('PackageNameDotOpt -> PackageName','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',1629),
  ('PackageNameDotOpt -> epsilon','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',1630),
  ('ImportPath -> STRING_LIT','ImportPath',1,'p_import_path','parser.py',1638),
  ('epsilon -> <empty>','epsilon',0,'p_empty','parser.py',1647),
]
